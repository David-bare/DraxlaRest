<?xml version="1.0"?>
<doc>
    <assembly>
        <name>AAL2Wrap</name>
    </assembly>
    <members>
        <member name="T:Vasco.AAL2Wrap">
            <summary>
            A wrapper to VASCO® Data Security VACMAN® Controller.
            </summary>
            <remarks>
            If you require a higher level of security, it is possible to
            migrate to the "VACMAN Controller for HSM" solution. An HSM (Hardware
            Security Module) is a tamper-proof hardware module that is connected to, or
            inserted into, the Host computer. This HSM contains secure storage for
            master keys in combination with cryptographic processing capabilities. The
            goal of using an HSM in combination with the VACMAN Controller is to
            guarantee that DIGIPASS® Keys are never in clear view on the Host computer.
            When there is a rejection of a wrong DIGIPASS password/signature, the HSM
            guarantees that the correct passwords or signature are not available on the
            Host computer. The VACMAN Controller for HSM provides the same function
            interfaces as the standard VACMAN Controller. We therefore recommend that,
            during development, one start the integration work with the standard VACMAN
            Controller and then upgrade to the VACMAN Controller for HSM.
            <para>
            This class is used for many purposes:
            </para>
            <list type="bullet">
            <item>
            <description>import tokens from DPX files.</description>
            </item>
            <item>
            <description>generate <i>Challenges</i>.</description>
            </item>
            <item>
            <description>verify responses to <i>Challenges</i> and dynamic <i>Passwords</i>.</description>
            </item>
            <item>
            <description>generate <i>HostCode</i>.</description>
            </item>
            <item>
            <description>verify <i>data Signatures</i>. </description>
            </item>
            <item>
            <description>get token information.</description>
            </item>
            <item>
            <description>Reset token information.</description>
            </item>
            <item>
            <description>Set a Token Property.</description>
            </item>
            <item>
            <description>Reset <i>Static PIN</i>(Static Password).</description>
            </item>
            <item>
            <description>change <i>Static PIN</i>(Static Password).</description>
            </item>
            <item>
            <description>change <i>Encrypted Static PIN</i>(Encrypted Static Password).</description>
            </item>
            <item>
            <description>unlock tokens.</description>
            </item>
            <item>
            <description>generate <i>Unlock Authentication Code</i>.</description>
            </item>
            <item>
            <description>get <i>Unlock Authentication Counter</i>.</description>
            </item>
            <item>
            <description>authorize unlock.</description>
            </item>
            <item>
            <description>synchronize DIGIPASS application BLOBs.</description>
            </item>
            <item>
            <description>synchronize Event or Time between DIGIPASS And Host.</description>
            </item>
            <item>
            <description>test tokens time synchronization mechanism (DP500 only)</description>
            </item>
            <item>
            <description>verify an EMV CAP 2004 secure code</description>
            </item>
            <item>
            <description>generate EMV CAP 2004 secure code</description>
            </item>
            <item>
            <description>extract static vector from a DPX file</description>
            </item>
            <item>
            <description>extract message vector from a DPX file</description>
            </item>
            <item>
            <description>activate DIGIPASS software</description>
            </item>
            <item>
            <description>activate DIGIPASS Multi-Device</description>
            </item>
            <item>
            <description>DIGIPASS secure channel</description>
            </item>
            <item>
            <description>get version information on native C library</description>
            </item>
            <item>
            <description>get version information wrapper</description>
            </item>
            </list>
            <para>
            Importing tokens:
            </para>
            <list type="bullet">
            <item>
            <description>create a AAL2Wrap object.</description>
            </item>
            <item>
            <description>call AAL2DPXInit or AAL2DPXInitEx</description>
            </item>
            <item>
            <description>(optionally call AAL2DPXGetStaticVector)</description>
            </item>
            <item>
            <description>call AAL2DPXGetToken while it returns a non <i>null</i> value and store the different values to your database.</description>
            </item>
            <item>
            <description>call AAL2DPXClose.</description>
            </item>
            </list>
            <para>
            Challenge/Response authentication:
            </para>
            <list type="bullet">
            <item>
            <description>get the DIGIPASS application BLOB from your database</description>
            </item>
            <item>
            <description>call AAL2GenerateChallenge.</description>
            </item>
            <item>
            <description>call AAL2VerifyPassword</description>
            </item>
            <item>
            <description>store back the DIGIPASS application BLOB to your database.</description>
            </item>
            </list>
            <para>
            Response only authentication:
            </para>
            <list type="bullet">
            <item>
            <description>get the DIGIPASS application BLOB from your database</description>
            </item>
            <item>
            <description>AAL2VerifyPassword with an empty string (or <i>null</i>) as <i>Challenge</i></description>
            </item>
            <item>
            <description>store back the DIGIPASS application BLOB to your database.</description>
            </item>
            </list>
            <para>
            Response only Generation:
            </para>
            <list type="bullet">
            <item>
            <description>get the DIGIPASS application BLOB from your database</description>
            </item>
            <item>
            <description>call AAL2GenPassword with an empty string (or <i>null</i>) as <i>Challenge</i></description>
            </item>
            <item>
            <description>get the String returned value to get the generated Response</description>
            </item>
            <item>
            <description>store back the DIGIPASS application BLOB to your database.</description>
            </item>
            </list>
            <para>
            EMV CAP 2004 data management:
            </para>
            <list type="bullet">
            <item>
            <description>generate TLV data from TLV values using AAL2GenTLV</description>
            </item>
            <item>
            <description>generate EMV application BLOB from TLV data using AAL2GenEMVBlobEx</description>
            </item>
            </list>
            <para>
            EMV CAP 2004 secure code verification:
            </para>
            <list type="bullet">
            <item>
            <description>get the EMV application BLOB from your database</description>
            </item>
            <item>
            <description>call AAL2VerifyEMVCAPMode1, AAL2VerifyEMVCAPMode2 or AAL2VerifyEMVCAPMode3 following the desired mode.</description>
            </item>
            <item>
            <description>store back the EMV application BLOB to your database.</description>
            </item>
            </list>
            <para>
            EMV CAP 2004 secure code generation:
            </para>
            <list type="bullet">
            <item>
            <description>get the EMV application BLOB from your database</description>
            </item>
            <item>
            <description>call AAL2GenEMVCAPMode1, AAL2GenEMVCAPMode2 or AAL2GenEMVCAPMode3 following the desired mode.</description>
            </item>
            <item>
            <description>store back the EMV application BLOB to your database.</description>
            </item>
            </list>
            All of the functions (except error functions) sets an internal error code, which may be retrieved
            with getRetCode, or interpreted with getLastError.
            <para>
            version VACMAN Controller <b>$(VC_PKG_VERSION)</b> (minimum .Net version required: <b>2.0</b>)
            </para>
            <para>
            For an exhaustive documentation please refer to the Authentication Server Framework C-C++ Programmer's Guide.
            </para>
            </remarks>
        </member>
        <member name="F:Vasco.AAL2Wrap.TOKEN_MODEL">
            <summary>
            
            </summary>
        </member>
        <member name="F:Vasco.AAL2Wrap.USE_COUNT">
            <summary>
            
            </summary>
        </member>
        <member name="F:Vasco.AAL2Wrap.LAST_TIME_USED">
            <summary>
            
            </summary>
        </member>
        <member name="F:Vasco.AAL2Wrap.LAST_TIME_SHIFT">
            <summary>
            
            </summary>
        </member>
        <member name="F:Vasco.AAL2Wrap.TIME_BASED_ALGO">
            <summary>
            
            </summary>
        </member>
        <member name="F:Vasco.AAL2Wrap.PIN_SUPPORTED">
            <summary>
            
            </summary>
        </member>
        <member name="F:Vasco.AAL2Wrap.UNLOCK_SUPPORTED">
            <summary>
            
            </summary>
        </member>
        <member name="F:Vasco.AAL2Wrap.PIN_CH_ON">
            <summary>
            
            </summary>
        </member>
        <member name="F:Vasco.AAL2Wrap.PIN_CH_FORCED">
            <summary>
            
            </summary>
        </member>
        <member name="F:Vasco.AAL2Wrap.PIN_LEN">
            <summary>
            
            </summary>
        </member>
        <member name="F:Vasco.AAL2Wrap.PIN_MIN_LEN">
            <summary>
            
            </summary>
        </member>
        <member name="F:Vasco.AAL2Wrap.VIRTUAL_TOKEN_GRACE_PERIOD">
            <summary>
            
            </summary>
        </member>
        <member name="F:Vasco.AAL2Wrap.VIRTUAL_TOKEN_REMAIN_USE">
            <summary>
            
            </summary>
        </member>
        <member name="F:Vasco.AAL2Wrap.TOKEN_STATUS">
            <summary>
            
            </summary>
        </member>
        <member name="F:Vasco.AAL2Wrap.VIRTUAL_TOKEN_TYPE">
            <summary>
            
            </summary>
        </member>
        <member name="F:Vasco.AAL2Wrap.LAST_RESPONSE_TYPE">
            <summary>
            
            </summary>
        </member>
        <member name="F:Vasco.AAL2Wrap.ERROR_COUNT">
            <summary>
            
            </summary>
        </member>
        <member name="F:Vasco.AAL2Wrap.EVENT_VALUE">
            <summary>
            
            </summary>
        </member>
        <member name="F:Vasco.AAL2Wrap.SYNC_WINDOWS">
            <summary>
            
            </summary>
        </member>
        <member name="F:Vasco.AAL2Wrap.LAST_EVENT_VALUE">
            <summary>
            
            </summary>
        </member>
        <member name="F:Vasco.AAL2Wrap.PIN_ENABLED">
            <summary>
            
            </summary>
        </member>
        <member name="F:Vasco.AAL2Wrap.EVENT_BASED_ALGO">
            <summary>
            
            </summary>
        </member>
        <member name="F:Vasco.AAL2Wrap.AMOUNT_SUPPORT">
            <summary>
            
            </summary>
        </member>
        <member name="F:Vasco.AAL2Wrap.IMK_LABEL">
            <summary>
            
            </summary>
        </member>
        <member name="F:Vasco.AAL2Wrap.KCV_TYPE">
            <summary>
            
            </summary>
        </member>
        <member name="F:Vasco.AAL2Wrap.KCV_VALUE">
            <summary>
            
            </summary>
        </member>
        <member name="F:Vasco.AAL2Wrap.CODE_WORD">
            <summary>
            
            </summary>
        </member>
        <member name="F:Vasco.AAL2Wrap.AUTH_MODE">
            <summary>
            
            </summary>
        </member>
        <member name="F:Vasco.AAL2Wrap.DERIVATION_SUPPORTED">
            <summary>
            
            </summary>
        </member>
        <member name="F:Vasco.AAL2Wrap.OCRA_SUITE">
            <summary>
            
            </summary>
        </member>
        <member name="F:Vasco.AAL2Wrap.MAX_DTF_NUMBER">
            <summary>
            
            </summary>
        </member>
        <member name="F:Vasco.AAL2Wrap.DTF1_MIN_LEN">
            <summary>
            
            </summary>
        </member>
        <member name="F:Vasco.AAL2Wrap.DTF1_MAX_LEN">
            <summary>
            
            </summary>
        </member>
        <member name="F:Vasco.AAL2Wrap.DTF1_CHK">
            <summary>
            
            </summary>
        </member>
        <member name="F:Vasco.AAL2Wrap.DTF2_MIN_LEN">
            <summary>
            
            </summary>
        </member>
        <member name="F:Vasco.AAL2Wrap.DTF2_MAX_LEN">
            <summary>
            
            </summary>
        </member>
        <member name="F:Vasco.AAL2Wrap.DTF2_CHK">
            <summary>
            
            </summary>
        </member>
        <member name="F:Vasco.AAL2Wrap.DTF3_MIN_LEN">
            <summary>
            
            </summary>
        </member>
        <member name="F:Vasco.AAL2Wrap.DTF3_MAX_LEN">
            <summary>
            
            </summary>
        </member>
        <member name="F:Vasco.AAL2Wrap.DTF3_CHK">
            <summary>
            
            </summary>
        </member>
        <member name="F:Vasco.AAL2Wrap.DTF4_MIN_LEN">
            <summary>
            
            </summary>
        </member>
        <member name="F:Vasco.AAL2Wrap.DTF4_MAX_LEN">
            <summary>
            
            </summary>
        </member>
        <member name="F:Vasco.AAL2Wrap.DTF4_CHK">
            <summary>
            
            </summary>
        </member>
        <member name="F:Vasco.AAL2Wrap.DTF5_MIN_LEN">
            <summary>
            
            </summary>
        </member>
        <member name="F:Vasco.AAL2Wrap.DTF5_MAX_LEN">
            <summary>
            
            </summary>
        </member>
        <member name="F:Vasco.AAL2Wrap.DTF5_CHK">
            <summary>
            
            </summary>
        </member>
        <member name="F:Vasco.AAL2Wrap.DTF6_MIN_LEN">
            <summary>
            
            </summary>
        </member>
        <member name="F:Vasco.AAL2Wrap.DTF6_MAX_LEN">
            <summary>
            
            </summary>
        </member>
        <member name="F:Vasco.AAL2Wrap.DTF6_CHK">
            <summary>
            
            </summary>
        </member>
        <member name="F:Vasco.AAL2Wrap.DTF7_MIN_LEN">
            <summary>
            
            </summary>
        </member>
        <member name="F:Vasco.AAL2Wrap.DTF7_MAX_LEN">
            <summary>
            
            </summary>
        </member>
        <member name="F:Vasco.AAL2Wrap.DTF7_CHK">
            <summary>
            
            </summary>
        </member>
        <member name="F:Vasco.AAL2Wrap.DTF8_MIN_LEN">
            <summary>
            
            </summary>
        </member>
        <member name="F:Vasco.AAL2Wrap.DTF8_MAX_LEN">
            <summary>
            
            </summary>
        </member>
        <member name="F:Vasco.AAL2Wrap.DTF8_CHK">
            <summary>
            
            </summary>
        </member>
        <member name="F:Vasco.AAL2Wrap.DTF9_MIN_LEN">
            <summary>
            
            </summary>
        </member>
        <member name="F:Vasco.AAL2Wrap.DTF9_MAX_LEN">
            <summary>
            
            </summary>
        </member>
        <member name="F:Vasco.AAL2Wrap.DTF9_CHK">
            <summary>
            
            </summary>
        </member>
        <member name="F:Vasco.AAL2Wrap.DTF10_MIN_LEN">
            <summary>
            
            </summary>
        </member>
        <member name="F:Vasco.AAL2Wrap.DTF10_MAX_LEN">
            <summary>
            
            </summary>
        </member>
        <member name="F:Vasco.AAL2Wrap.DTF10_CHK">
            <summary>
            
            </summary>
        </member>
        <member name="F:Vasco.AAL2Wrap.RESPONSE_LEN">
            <summary>
            
            </summary>
        </member>
        <member name="F:Vasco.AAL2Wrap.RESPONSE_FORMAT">
            <summary>
            
            </summary>
        </member>
        <member name="F:Vasco.AAL2Wrap.RESPONSE_CHK">
            <summary>
            
            </summary>
        </member>
        <member name="F:Vasco.AAL2Wrap.TIME_STEP">
            <summary>
            
            </summary>
        </member>
        <member name="F:Vasco.AAL2Wrap.TRIPLE_DES_USED">
            <summary>
            
            </summary>
        </member>
        <member name="F:Vasco.AAL2Wrap.SECURE_CHANNEL_MSG_SIG_SUPPORTED">
            <summary>
            
            </summary>
        </member>
        <member name="F:Vasco.AAL2Wrap.OFFLINE_AUTHENTICATION_SUPPORTED">
            <summary>
            
            </summary>
        </member>
        <member name="F:Vasco.AAL2Wrap.STATIC_PIN_ENABLED">
            <summary>
            
            </summary>
        </member>
        <member name="F:Vasco.AAL2Wrap.STATIC_PIN_DISABLED">
            <summary>
            
            </summary>
        </member>
        <member name="F:Vasco.AAL2Wrap.FORCE_PIN_CHANGE">
            <summary>
            
            </summary>
        </member>
        <member name="F:Vasco.AAL2Wrap.PRIMARY_TOKEN_ENABLED">
            <summary>
            
            </summary>
        </member>
        <member name="F:Vasco.AAL2Wrap.VIRTUAL_TOKEN_ENABLED">
            <summary>
            
            </summary>
        </member>
        <member name="F:Vasco.AAL2Wrap.VIRTUAL_TOKEN_SUPPORTED">
            <summary>
            
            </summary>
        </member>
        <member name="F:Vasco.AAL2Wrap.TW_DYNAMIC_WINDOWS">
            <summary>
            
            </summary>
        </member>
        <member name="F:Vasco.AAL2Wrap.SW_UNIT_MINUTE">
            <summary>
            
            </summary>
        </member>
        <member name="F:Vasco.AAL2Wrap.SW_DISCRETE">
            <summary>
            
            </summary>
        </member>
        <member name="F:Vasco.AAL2Wrap.ACTV_DEFAULT">
            <summary>
            
            </summary>
        </member>
        <member name="F:Vasco.AAL2Wrap.ACTV_OFFLINE">
            <summary>
            
            </summary>
        </member>
        <member name="F:Vasco.AAL2Wrap.HostCode">
            <summary>
            DIGIPASS Host Code
            </summary>
            <remarks>
            This feature allows a client to Authenticate back the Host Server that validated the Dynamic Password.
            </remarks>
        </member>
        <member name="F:Vasco.AAL2Wrap.retCode">
            <summary>
            
            </summary>
        </member>
        <member name="F:Vasco.AAL2Wrap.QABlobSize">
            <summary>
            
            </summary>
        </member>
        <member name="F:Vasco.AAL2Wrap.StaticVectorLen">
            <summary>
            
            </summary>
        </member>
        <member name="F:Vasco.AAL2Wrap.MessageVectorLen">
            <summary>
            
            </summary>
        </member>
        <member name="F:Vasco.AAL2Wrap.DpxHandle">
            <summary>
            
            </summary>
        </member>
        <member name="F:Vasco.AAL2Wrap.Acode">
            <summary>
            
            </summary>
        </member>
        <member name="F:Vasco.AAL2Wrap.XERC">
            <summary>
            
            </summary>
        </member>
        <member name="F:Vasco.AAL2Wrap.SNsuffix">
            <summary>
            
            </summary>
        </member>
        <member name="F:Vasco.AAL2Wrap.QAIndexList">
            <summary>
            
            </summary>
        </member>
        <member name="F:Vasco.AAL2Wrap.QAHashData">
            <summary>
            
            </summary>
        </member>
        <member name="F:Vasco.AAL2Wrap.QABlob">
            <summary>
            
            </summary>
        </member>
        <member name="F:Vasco.AAL2Wrap.StaticVector">
            <summary>
            
            </summary>
        </member>
        <member name="F:Vasco.AAL2Wrap.MessageVector">
            <summary>
            
            </summary>
        </member>
        <member name="F:Vasco.AAL2Wrap.QAKey">
            <summary>
            
            </summary>
        </member>
        <member name="F:Vasco.AAL2Wrap.isDpxError">
            <summary>
            
            </summary>
        </member>
        <member name="F:Vasco.AAL2Wrap.UACounter">
            <summary>
            
            </summary>
        </member>
        <member name="F:Vasco.AAL2Wrap.KParams">
            <summary>
            This Structure contains Kernel Parameters.
            </summary>
        </member>
        <member name="M:Vasco.AAL2Wrap.#ctor">
            <summary>
            Class Contructor.
            </summary>
        </member>
        <member name="M:Vasco.AAL2Wrap.AAL2GenQAHashData(System.String,System.Int32)">
            <summary>
            Generate QA Hash Data.
            </summary>
            <remarks>
            This function extracts randomly from a QA blob a list of question index and 
            their matching answer hash. The number of extracted index is the Security Level.
            </remarks>
            <seealso cref="M:Vasco.AAL2Wrap.getRetCode"/> 
            <seealso cref="M:Vasco.AAL2Wrap.getLastError"/>
            <seealso cref="M:Vasco.AAL2Wrap.getQAIndexList"/>
            <seealso cref="M:Vasco.AAL2Wrap.getQAHashData"/>
            <param name="aQABlob"> byte[] QABlob</param>
            <param name="SecurityLevel"> int number of bloc to extract from the QABlob</param>
            <returns> 0 if successful.</returns>
        </member>
        <member name="M:Vasco.AAL2Wrap.AAL2QAGenQABlob(System.Int32,System.String,System.String)">
            <summary>
            Generate a QA BLOB
            </summary>
            <remarks>
            This function generates a QABlob from a list of question
            index with clear answer and a user ID.
            </remarks>
            <seealso cref="M:Vasco.AAL2Wrap.getRetCode"/>
            <seealso cref="M:Vasco.AAL2Wrap.getLastError"/>
            <seealso cref="M:Vasco.AAL2Wrap.getQABlob"/>
            <param name="QANb"> int Number of Item in the QA list  </param>
            <param name="aQAList"> string List of question index on 2 ascii characters and answer separated by a ";"
            Ex: 01aNsWeR1;0Fanswer4;2Eanswer22;19answer09;8Fan;</param>
            <param name="aUserID"> string Id of the QABlob owner on max 32 ascii characters</param>
            <returns> 0 if successful.</returns>
        </member>
        <member name="M:Vasco.AAL2Wrap.AAL2QAGenQAKey(System.String,System.String,System.String)">
            <summary>
            Generate QA Key.
            </summary>
            <remarks>
            This function generates a QA Key based on two list of indexes 
            and their matching hash and the QA Key user ID owner.
            </remarks>
            <seealso cref="M:Vasco.AAL2Wrap.getRetCode"/>
            <seealso cref="M:Vasco.AAL2Wrap.getLastError"/>
            <seealso cref="M:Vasco.AAL2Wrap.getQAKey"/>
            <param name="IndexList"> string list of extracted index </param>
            <param name="HashList"> string list of extracted hash </param>
            <param name="UserID"> string ID of the QAKey owner </param>
            <returns> 0 if successful.</returns>
        </member>
        <member name="M:Vasco.AAL2Wrap.getQAKey">
            <summary>
            Returns the QA Key generated by the last AAL2GenQAKey function call.
            </summary>
            <remarks>
            Key on 32 ascii characters calculated from the answer hash of the user.
            This key will be used to encrypt the activation data. 
            </remarks>
            <seealso cref="M:Vasco.AAL2Wrap.AAL2GenQAKey(System.Byte[],System.Byte[],System.Byte[],System.Byte[])"/> 
            <returns> return QA Key data or <i>null</i>.</returns>
        </member>
        <member name="M:Vasco.AAL2Wrap.AAL2DPXInit(System.String,System.String,System.Int32@,System.Int32@)">
            <summary>
            Initiates the import process.
            </summary>
            <remarks>
            Opens the DPX file FileName, verifies the key InitKey, values the
            number of defined applications contained in the DPX file, the list
            of these applications names, and the total number of defined DIGIPASS.
            </remarks>
            <seealso cref="M:Vasco.AAL2Wrap.AAL2DPXGetStaticVector"/> 
            <seealso cref="M:Vasco.AAL2Wrap.AAL2DPXGetToken(System.String)"/> 
            <seealso cref="M:Vasco.AAL2Wrap.AAL2DPXGetTokenBlobs(System.Int32@)"/> 
            <seealso cref="M:Vasco.AAL2Wrap.AAL2DPXClose"/> 
            <seealso cref="M:Vasco.AAL2Wrap.getLastError"/> 
            <param name="FileName ">FileName the full name (including path) of the DPX file. 
            Only characters of the 7-bit ASCII printable character set are supported.</param>
            <param name="InitKey ">InitKey the DPX import Key.</param>
            <param name="AppCount ">Number of application described in the DPX file.</param>
            <param name="DigipassCount ">Number of DIGIPASS contained in the DPX file.</param>
            <returns> returns the list of applications names  or <i>null</i></returns> 
        </member>
        <member name="M:Vasco.AAL2Wrap.AAL2DPXInit(System.String,System.String,System.String,System.String,System.Int32@,System.Int32@)">
            <summary>
            Initiates the import process.
            </summary>
            <remarks>
            Opens the DPX file FileName, derives the transport key InitKey
            using the operator key OperKey and the administrator key AdminKey,
            values the number of defined applications contained in the DPX file, the list
            of these applications names, and the total number of defined DIGIPASS.
            </remarks>
            <seealso cref="M:Vasco.AAL2Wrap.AAL2DPXGetStaticVector"/> 
            <seealso cref="M:Vasco.AAL2Wrap.AAL2DPXGetToken(System.String)"/> 
            <seealso cref="M:Vasco.AAL2Wrap.AAL2DPXGetTokenBlobs(System.Int32@)"/> 
            <seealso cref="M:Vasco.AAL2Wrap.AAL2DPXClose"/> 
            <seealso cref="M:Vasco.AAL2Wrap.getRetCode"/> 
            <seealso cref="M:Vasco.AAL2Wrap.getLastError"/> 
            <param name="FileName ">FileName the full name (including path) of the DPX file. 
            Only characters of the 7-bit ASCII printable character set are supported.</param>
            <param name="InitKey ">InitKey the DPX import Key.</param>
            <param name="OperKey ">OperKey the operator's Key.</param>
            <param name="AdminKey ">AdminKey the administrator's Key.</param>
            <param name="AppCount ">Number of application described in the DPX file.</param>
            <param name="DigipassCount ">Number of DIGIPASS contained in the DPX file.</param>
            <returns> returns the list of applications names  or <i>null</i></returns> 
        </member>
        <member name="M:Vasco.AAL2Wrap.AAL2DPXGetStaticVector">
            <summary>
            This function is used to retrieve the static vector (if present) from a DPX file.
            <p></p>
            The static vector holds the parameter settings necessary for activation of a certain category of DIGIPASS devices:
            <ul>
            <li> Software DIGIPASS compliant with the standard activation (in the context of single device licensing; see Authentication Server Framework Product Guide).</li>
            <li> Software or Hardware DIGIPASS compliant with the multi-device activation (in the context of multi-device licensing; see Authentication Server Framework Product Guide).</li>
            </ul>
            <p></p>
            </summary>
            <seealso cref="M:Vasco.AAL2Wrap.AAL2DPXInit(System.String,System.String,System.Int32@,System.Int32@)"/> 
            <seealso cref="M:Vasco.AAL2Wrap.AAL2DPXClose"/> 
            <seealso cref="M:Vasco.AAL2Wrap.getLastError"/> 
            <seealso cref="M:Vasco.AAL2Wrap.getStaticVector"/> 
            <returns> 0 if successful.</returns>  
        </member>
        <member name="M:Vasco.AAL2Wrap.AAL2DPXGetMessageVector">
            <summary>
            This function is used to retrieve the message vector (if present) from a DPX file.
            <p></p>
            The message vector holds the Message parameters settings necessary for messages generation applicable with a certain category of DIGIPASS devices:
            <ul>
            <li> Software or Hardware DIGIPASS compliant with the multi-device activation (in the context of multi-device licensing; see Authentication Server Framework Product Guide).</li>
            </ul>
            <p></p>
            The message vector is used by:
            <ul>
            <li><see cref="M:Vasco.AAL2Wrap.AAL2GenPayloadKeyBlob(System.Byte[],System.String)"/> or <see cref="M:Vasco.AAL2Wrap.AAL2GenPayloadKeyBlob(System.String@,System.String)"/></li>
            <li><see cref="M:Vasco.AAL2Wrap.AAL2GenMessageActivation1(System.Byte[],System.String,System.String,System.String,System.String)"/> or  <see cref="M:Vasco.AAL2Wrap.AAL2GenMessageActivation1(System.String,System.String,System.String,System.String,System.String)"/> </li>
            <li><see cref="M:Vasco.AAL2Wrap.AAL2GenMessageActivation2(System.Byte[],System.String,System.String,System.String,System.String)"/> or <see cref="M:Vasco.AAL2Wrap.AAL2GenMessageActivation2(System.String@,System.String,System.String,System.String,System.String)"/> </li> 
            <li><see cref="M:Vasco.AAL2Wrap.AAL2GenMessageDeactivation(System.String,System.String,System.Int32)"/> </li>
            <li><see cref="M:Vasco.AAL2Wrap.AAL2GenMessageRequest(System.String,System.String,System.String)"/></li>  
            </ul>
            to generate Multi-Device Activation or Secure Channel messages.
            AAL2DPXGetMessageVector must be called after <see cref="M:Vasco.AAL2Wrap.AAL2DPXInit(System.String,System.String,System.Int32@,System.Int32@)"/>  
            and before <see cref="M:Vasco.AAL2Wrap.AAL2DPXGetTokenBlobsEx"/>. 
            The output message vector is a 26 character string.
            </summary>
            <seealso cref="M:Vasco.AAL2Wrap.AAL2DPXInit(System.String,System.String,System.Int32@,System.Int32@)"/> 
            <seealso cref="M:Vasco.AAL2Wrap.AAL2DPXClose"/> 
            <seealso cref="M:Vasco.AAL2Wrap.getLastError"/> 
            <seealso cref="M:Vasco.AAL2Wrap.getMessageVector"/> 
            <seealso cref="M:Vasco.AAL2Wrap.getRetCode"/> 
            <seealso cref="M:Vasco.AAL2Wrap.getLastError"/> 
            <seealso cref="M:Vasco.AAL2Wrap.AAL2DPXGetTokenBlobsEx"/> 
            <seealso cref="M:Vasco.AAL2Wrap.AAL2GenPayloadKeyBlob(System.Byte[],System.String)"/> 
            <seealso cref="M:Vasco.AAL2Wrap.AAL2GenMessageActivation1(System.Byte[],System.String,System.String,System.String,System.String)"/>                
            <seealso cref="M:Vasco.AAL2Wrap.AAL2GenMessageActivation1(System.String,System.String,System.String,System.String,System.String)"/>                
            <seealso cref="M:Vasco.AAL2Wrap.AAL2GenMessageActivation2(System.Byte[],System.String,System.String,System.String,System.String)"/>                  
            <seealso cref="M:Vasco.AAL2Wrap.AAL2GenMessageActivation2(System.String@,System.String,System.String,System.String,System.String)"/>                  
            <seealso cref="M:Vasco.AAL2Wrap.AAL2GenMessageDeactivation(System.String,System.String,System.Int32)"/>                 
            <seealso cref="M:Vasco.AAL2Wrap.AAL2GenMessageRequest(System.String,System.String,System.String)"/>                  
            <returns> 0 if successful.</returns>  
        </member>
        <member name="M:Vasco.AAL2Wrap.AAL2DPXGetToken(System.String)">
            <summary>
            Import the next DIGIPASS record corresponding to appliName from the DPX file.
            It is recommended using the new function <see cref="M:Vasco.AAL2Wrap.AAL2DPXGetTokenBlobsEx"/> rather than <see cref="M:Vasco.AAL2Wrap.AAL2DPXGetToken(System.String)"/>.
            </summary>
            <seealso cref="M:Vasco.AAL2Wrap.AAL2DPXInit(System.String,System.String,System.Int32@,System.Int32@)"/> 
            <seealso cref="M:Vasco.AAL2Wrap.AAL2DPXClose"/> 
            <seealso cref="M:Vasco.AAL2Wrap.getLastError"/> 
            <param name="AppliName">Application Name to import (returned by AAL2DPXInit).</param>
            <returns> returns a DIGIPASS or <i>null</i>.</returns> 
        </member>
        <member name="M:Vasco.AAL2Wrap.AAL2DPXGetTokenBlobs(System.Int32@)">
            <summary>
            Import multiple applications for a single DIGIPASS from the DPX file.
            It is recommended using the new function <see cref="M:Vasco.AAL2Wrap.AAL2DPXGetTokenBlobsEx"/> rather than <see cref="M:Vasco.AAL2Wrap.AAL2DPXGetTokenBlobs(System.Int32@)"/>.
            </summary>
            <seealso cref="M:Vasco.AAL2Wrap.AAL2DPXInit(System.String,System.String,System.Int32@,System.Int32@)"/> 
            <seealso cref="M:Vasco.AAL2Wrap.AAL2DPXClose"/> 
            <seealso cref="M:Vasco.AAL2Wrap.getLastError"/> 
            <param name="AppCount">Number of applications returned in the DIGIPASS array. Set on output.</param>
            <returns> returns an array of DIGIPASS or <i>null</i>.</returns> 
        </member>
        <member name="M:Vasco.AAL2Wrap.AAL2DPXGetTokenBlobsEx">
            <summary>
            Import multiple applications for a single DIGIPASS from the DPX file.
            This function replaces the former function <see cref="M:Vasco.AAL2Wrap.AAL2DPXGetTokenBlobs(System.Int32@)"/> in order to support 
            DPX files containing Master Activation licenses (in the context of multi-device licensing; see Authentication Server Framework Product Guide), but also
            support traditional DPX files containing DIGIPASS applications (in the context of single device licensing; see Authentication Server Framework Product Guide).
            Usage of the former functions <see cref="M:Vasco.AAL2Wrap.AAL2DPXGetToken(System.String)"/> and
            <see cref="M:Vasco.AAL2Wrap.AAL2DPXGetTokenBlobs(System.Int32@)"/> is no more recommended.
            <p></p>
            In case of DPX files containing Master Activation licenses:
            <ul>
            <li> The Master Activation application BLOB and the associated Activation Vector are involved in the 
            activation process of the DIGIPASS instance related to a particular license of the imported DPX file.</li>
            <li> The Activation Vector holds some parameters for the Activation1 Message that will be generated afterward by the VACMAN Controller for a particular license.</li>
            <li> The Sequence Number Threshold is a number from 1 to 99 indicating the number of instances which can be activated from the license; configured by VASCO at the time of order.</li>
            </ul>
            The function AAL2DPXGetTokenBlobsEx must be called several times to import all the DIGIPASS from a DPX file, one time for each serial number.
            AAL2DPXGetTokenBlobsEx returns 107 when the last DIGIPASS has been imported.
            <p></p>
            In case of DPX containing Payload Key, each call of AAL2DPXGetTokenBlobsEx will return one Payload Key BLOB for each DIGIPASS.
            <p></p>
            <b>Note:</b><br/>
            If the DIGIPASS uses the secure channel feature but the DPX does not contain Payload Key (case of DIGIPASS post-provisioned), 
            the function call to <see cref="M:Vasco.Response.RespDPXGetTokenBlobsEx.getPKBlob">RespDPXGetTokenBlobsEx.getPKBlob</see> will not return any payload key BLOB. 
            The payload key BLOBs must be generated in this case using <see cref="M:Vasco.AAL2Wrap.AAL2GenPayloadKeyBlob(System.String@,System.String)">AAL2GenPayloadKeyBlob</see> function.<br/>
            No payload key BLOB will be imported or must be generated if the DIGIPASS does not support secure channel feature.<br/>
            <p></p>
            After importing all the DIGIPASS from a DPX file, the function AAL2DPXClose must be called.
            </summary>
            <returns>RespDPXGetTokenBlobsEx object or <i>null</i></returns>
            <seealso cref="M:Vasco.AAL2Wrap.getRetCode"/>
            <seealso cref="M:Vasco.AAL2Wrap.getLastError"/>
            <seealso cref="M:Vasco.AAL2Wrap.AAL2DPXInit(System.String,System.String,System.Int32@,System.Int32@)"/> 
            <seealso cref="M:Vasco.AAL2Wrap.AAL2DPXClose"/> 
            <seealso cref="M:Vasco.Response.RespDPXGetTokenBlobsEx.getActivationVector"/>
            <seealso cref="M:Vasco.Response.RespDPXGetTokenBlobsEx.getApplCount"/>
            <seealso cref="M:Vasco.Response.RespDPXGetTokenBlobsEx.getAuthMode"/>
            <seealso cref="M:Vasco.Response.RespDPXGetTokenBlobsEx.getbDpData"/>
            <seealso cref="M:Vasco.Response.RespDPXGetTokenBlobsEx.getSeqNumThreshold"/>
            <seealso cref="M:Vasco.Response.RespDPXGetTokenBlobsEx.getSerialAppl"/>
            <seealso cref="M:Vasco.Response.RespDPXGetTokenBlobsEx.getDpData"/>
            <seealso cref="M:Vasco.Response.RespDPXGetTokenBlobsEx.getTokenType"/>
            <seealso cref="M:Vasco.Response.RespDPXGetTokenBlobsEx.getPKBlob"/>
        </member>
        <member name="M:Vasco.AAL2Wrap.AAL2DPXClose">
            <summary>
            Closes the DPX import process, as well as the DPX file itself.
            </summary>
            <seealso cref="M:Vasco.AAL2Wrap.AAL2DPXGetStaticVector"/> 
            <seealso cref="M:Vasco.AAL2Wrap.AAL2DPXGetToken(System.String)"/> 
            <seealso cref="M:Vasco.AAL2Wrap.AAL2DPXGetTokenBlobs(System.Int32@)"/> 
            <seealso cref="M:Vasco.AAL2Wrap.AAL2DPXInit(System.String,System.String,System.Int32@,System.Int32@)"/> 
            <seealso cref="M:Vasco.AAL2Wrap.getRetCode"/> 
            <seealso cref="M:Vasco.AAL2Wrap.getLastError"/> 
            <returns> return 0 if successful.</returns>
        </member>
        <member name="M:Vasco.AAL2Wrap.AAL2ResetTokenInfo(System.Byte[])">
            <summary>
             Resets DIGIPASS application BLOB error counter and force the synchronization time window.
            </summary>
            <remarks>
            If IThreshold or SThreshold run time parameters are used and are greater
            than zero during calls to AAL2VerifyPassword or AAL2VerifySignature
            functions, the current DIGIPASS application BLOB error counter is checked to see
            if it is greater than or equal to the given threshold value. If it is,
            AAL2VerifyPassword and AAL2VerifySignature functions produce return
            codes 202 or 203. This function will reset internal DIGIPASS application BLOB error
            counter to zero. After a call to AAL2ResetTokenInfo the synchronization time window will
            be used for the following password (or signature) validation.
            </remarks>
            <param name="bDpData"> byte[248] DIGIPASS application BLOB.
            <b>Upon return from the function call, this BLOB must be rewritten to the application database to reflect the changes.</b></param>
            <returns> return 0 if successful.</returns> 
            <seealso cref="M:Vasco.AAL2Wrap.getRetCode"/> 
            <seealso cref="M:Vasco.AAL2Wrap.getLastError"/> 
        </member>
        <member name="M:Vasco.AAL2Wrap.AAL2ResetTokenInfo(System.String@)">
            <summary>
             Resets DIGIPASS application BLOB error counter and force the synchronization time window.
            </summary>
            <remarks>
            If IThreshold or SThreshold run time parameters are used and are greater
            than zero during calls to AAL2VerifyPassword or AAL2VerifySignature
            functions, the current DIGIPASS application BLOB error counter is checked to see
            if it is greater than or equal to the given threshold value. If it is,
            AAL2VerifyPassword and AAL2VerifySignature functions produce return
            codes 202 or 203. This function will reset internal DIGIPASS application BLOB error
            counter to zero. After a call to AAL2ResetTokenInfo the synchronization time window will
            be used for the following password (or signature) validation.
            </remarks>
            <seealso cref="M:Vasco.AAL2Wrap.getRetCode"/> 
            <seealso cref="M:Vasco.AAL2Wrap.getLastError"/> 
            <param name="DpData"> string DIGIPASS application BLOB.
            <b>Upon return from the function call, this BLOB must be rewritten to the application database to reflect the changes.</b></param>
            <returns> return 0 if successful.</returns> 
        </member>
        <member name="M:Vasco.AAL2Wrap.AAL2MigrateBlob(System.Byte[],System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            This function is used to perform a migration of Software Protection Keys for a given
            DIGIPASS application BLOB.
            </summary>
            <remarks>
            With a software implementation of the VACMAN Controller, the DIGIPASS application BLOBs in the database are protected
            with a key which is unique per record because it is derived from the DIGIPASS serial number, the DIGIPASS
            application name and a static initial vector.
            <para>
            There is 2 ways to derive this default VACMAN Controller database protection key with some kernel parameters:
            </para>
            <list type="bullet">
            <item>
            using the Derive Vector (DeriveVector)
            </item>
            <item>
            using the 4 Storage Derive Keys (StorageDeriveKey1, StorageDeriveKey2, StorageDeriveKey3, StorageDeriveKey4).
            </item>
            </list>
            </remarks>
            <seealso cref="M:Vasco.AAL2Wrap.getRetCode"/> 
            <seealso cref="M:Vasco.AAL2Wrap.getLastError"/> 
            <param name="bDpData"> byte[248] DIGIPASS application BLOB.
            <b>Upon return from the function call, this BLOB must be rewritten to the application database to reflect the changes.</b></param>
            <param name="DeriveVector">int new Dervivation Vector</param>
            <param name="StorageDeriveKey1">int new Derivation Storage Key1</param>
            <param name="StorageDeriveKey2">int new Derivation Storage Key2</param>
            <param name="StorageDeriveKey3">int new Derivation Storage Key3</param>
            <param name="StorageDeriveKey4">int new Derivation Storage Key4</param>
            <returns> return 0 if successful.</returns> 
        </member>
        <member name="M:Vasco.AAL2Wrap.AAL2MigrateBlob(System.String@,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            This function is used to perform a migration of Software Protection Keys for a given
            DIGIPASS application BLOB.
            </summary>
            <remarks>
            With a software implementation of the VACMAN Controller, the DIGIPASS application BLOBs in the database are protected
            with a key which is unique per record because it is derived from the DIGIPASS serial number, the DIGIPASS
            application name and a static initial vector.
            <para>
            There is 2 ways to derive this default VACMAN Controller database protection key with some kernel parameters:
            </para>
            <list type="bullet">
            <item>
            using the Derive Vector (DeriveVector)
            </item>
            <item>
            using the 4 Storage Derive Keys (StorageDeriveKey1, StorageDeriveKey2, StorageDeriveKey3, StorageDeriveKey4).
            </item>
            </list>
            </remarks>
            <seealso cref="M:Vasco.AAL2Wrap.getRetCode"/> 
            <seealso cref="M:Vasco.AAL2Wrap.getLastError"/> 
            <param name="DpData"> string DIGIPASS application BLOB.
            <b>Upon return from the function call, this BLOB must be rewritten to the application database to reflect the changes.</b></param>
            <param name="DeriveVector">int new Dervivation Vector</param>
            <param name="StorageDeriveKey1">int new Derivation Storage Key1</param>
            <param name="StorageDeriveKey2">int new Derivation Storage Key2</param>
            <param name="StorageDeriveKey3">int new Derivation Storage Key3</param>
            <param name="StorageDeriveKey4">int new Derivation Storage Key4</param>
            <returns> return 0 if successful.</returns> 
        </member>
        <member name="M:Vasco.AAL2Wrap.AAL2MigratePKBlob(System.String,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            This function is used to migrate software protection keys for a given PayloadKey BLOB. Migrating the protection keys
            for a given Payload Key BLOB does not change the Payload Key, but only the keys used to protect the BLOB.
            <p></p>
            It is only applicable to Hardware or Software DIGIPASS compliant with the multi-device two steps activation
            (in the context of multi-device licensing; see Authentication Server Framework Product Guide).
            <p></p>
            There are two ways to derive this default VACMAN Controller database protection key with kernel parameters:
            <ul>
            <li>using the derive vector (DeriveVector)</li>
            <li>using the four storage derive keys (StorageDeriveKey1, StorageDeriveKey2, StorageDeriveKey3, StorageDeriveKey4).</li>
            </ul>
            </summary>
            <seealso cref="M:Vasco.AAL2Wrap.getRetCode"/> 
            <seealso cref="M:Vasco.AAL2Wrap.getLastError"/> 
            <param name="PKBlob">Contains the Payload Key BLOB to migrate from software protection keys to new ones. </param>
            <param name="DeriveVector">New derive vector to use for PKBlob encryption. Values range from 0x00 to 0x7FFFFFFF.</param>
            <param name="StorageDeriveKey1">New storage derivation key part 1 to use for PKBlob encryption. Values range from 0x00 to 0xFFFFFFFF.</param>
            <param name="StorageDeriveKey2">New storage derivation key part 2 to use for PKBlob encryption. Values range from 0x00 to 0xFFFFFFFF.</param>
            <param name="StorageDeriveKey3">New storage derivation key part 3 to use for PKBlob encryption. Values range from 0x00 to 0xFFFFFFFF.</param>
            <param name="StorageDeriveKey4">New storage derivation key part 4 to use for PKBlob encryption. Values range from 0x00 to 0xFFFFFFFF.</param>
            <returns>the migrating PayloadKeyBlob in case of success or <i>null</i> in case of error. <b>Upon return from the function call, this BLOB must be rewritten to the application database to reflect the changes.</b></returns>
        </member>
        <member name="M:Vasco.AAL2Wrap.AAL2SyncTokenBlob(System.String[],System.Int32)">
            <summary>
            Synchronizes  DIGIPASS application BLOBs.
            </summary>
            <remarks>
            This function can be used for two different purposes:
            <p>
            If a DIGIPASS has been programmed with more than one time-based application,
            this function may be used to synchronize the time drift and last time used value
            stored in the different DIGIPASS application BLOBs. The most recently
            used application (greater last time used) serves as the reference.
            1.	Pass all the application BLOBs from the DIGIPASS to AAL2SyncTokenBlob.
            2.	The most recent time information will be synchronized between the application BLOBs.
            </p>
            <p>
            If a DIGIPASS application has been programmed without virtual token support,
            this function may be used to upgrade its BLOB with virtual token feature.
            A new BLOB with the same serial number, the same application name and with the virtual
            token support activated will be necessary to perform the upgrade of the existing BLOB.
            1.	Import the new virtual token BLOB with the same serial number, the same application name.
            2.	Pass both the current initial BLOB used in production database and the newly imported virtual
            token BLOB to AAL2SyncTokenBlob.
            3.	The virtual token BLOB will upgrade the initial BLOB with the virtual token support.
            4.	The initial BLOB (which has inherited virtual token support) can be written back in production database.
            </p>
            </remarks>
            <seealso cref="M:Vasco.AAL2Wrap.getRetCode"/> 
            <seealso cref="M:Vasco.AAL2Wrap.getLastError"/> 
            <param name="DpData_Table"> string[] DIGIPASS application BLOB table.
            <b>Upon return from the function call, these BLOBs must be rewritten to the application database to reflect the changes.</b></param>
            <param name="appl_count">int applicount</param>
            <returns> return 0 if successful.</returns>
        </member>
        <member name="M:Vasco.AAL2Wrap.AAL2SyncTokenBlob(System.Byte[][],System.Int32)">
            <summary>
            Synchronizes  DIGIPASS application BLOBs.
            </summary>
            <remarks>
            This function can be used for two different purposes:
            <p>
            If a DIGIPASS has been programmed with more than one time-based application,
            this function may be used to synchronize the time drift and last time used value
            stored in the different DIGIPASS application BLOBs. The most recently
            used application (greater last time used) serves as the reference.
            1.	Pass all the application BLOBs from the DIGIPASS to AAL2SyncTokenBlob.
            2.	The most recent time information will be synchronized between the application BLOBs.
            </p>
            <p>
            If a DIGIPASS application has been programmed without virtual token support,
            this function may be used to upgrade its BLOB with virtual token feature.
            A new BLOB with the same serial number, the same application name and with the virtual
            token support activated will be necessary to perform the upgrade of the existing BLOB.
            1.	Import the new virtual token BLOB with the same serial number, the same application name.
            2.	Pass both the current initial BLOB used in production database and the newly imported virtual
            token BLOB to AAL2SyncTokenBlob.
            3.	The virtual token BLOB will upgrade the initial BLOB with the virtual token support.
            4.	The initial BLOB (which has inherited virtual token support) can be written back in production database.
            </p>
            </remarks>
            <seealso cref="M:Vasco.AAL2Wrap.getRetCode"/> 
            <seealso cref="M:Vasco.AAL2Wrap.getLastError"/> 
            <param name="bDpData_Table"> byte[][248] DIGIPASS application BLOB table.
            <b>Upon return from the function call, these BLOBs must be rewritten to the application database to reflect the changes.</b></param>
            <param name="appl_count">int applicount</param>
            <returns> return 0 if successful.</returns>
        </member>
        <member name="M:Vasco.AAL2Wrap.AAL2GetWrapperVersion">
            <summary>
             Gets the VACMAN Controller dotNet Wrapper version.
            </summary>
            <returns>the dotNet Wrapper version </returns>
        </member>
        <member name="M:Vasco.AAL2Wrap.AAL2GetLibraryVersion">
            <summary>
            This function returns Library information of the VACMAN Controller Native C Library
            </summary>
            <returns>RespGetLibraryVersion object containing information about VACMAN Controller Native C Library or <i>null</i></returns>
            <seealso cref="M:Vasco.AAL2Wrap.getRetCode"/> 
            <seealso cref="M:Vasco.AAL2Wrap.getLastError"/> 
            <seealso cref="M:Vasco.Response.RespGetLibraryVersion.getLibraryVersion"/>
            <seealso cref="M:Vasco.Response.RespGetLibraryVersion.getLibraryBitness"/>
            <seealso cref="M:Vasco.Response.RespGetLibraryVersion.getLibraryType"/>
        </member>
        <member name="M:Vasco.AAL2Wrap.AAL2GetTokenInfo(System.Byte[])">
            <summary>
            Gets some DIGIPASS application BLOB internal values in readable format.
            </summary>
            <seealso cref="M:Vasco.AAL2Wrap.getRetCode"/> 
            <seealso cref="M:Vasco.AAL2Wrap.getLastError"/> 
            <param name="bDpData"> byte[248] DIGIPASS application BLOB</param>
            <returns> return a structure containing informations about the DIGIPASS represented by DpData or <i>null</i>.</returns>
        </member>
        <member name="M:Vasco.AAL2Wrap.AAL2GetTokenInfo(System.String)">
            <summary>
            Gets some DIGIPASS application BLOB internal values in readable format.
            </summary>
            <seealso cref="M:Vasco.AAL2Wrap.getRetCode"/> 
            <seealso cref="M:Vasco.AAL2Wrap.getLastError"/> 
            <param name="DpData"> string DIGIPASS application BLOB</param>
            <returns> return a structure containing informations about the DIGIPASS represented by DpData or <i>null</i>.</returns>
        </member>
        <member name="M:Vasco.AAL2Wrap.AAL2GetTokenProperty(System.Byte[],System.Int32,System.Int32@)">
            <summary>
            Gets some DIGIPASS internal Property value in INTEGER format.
            </summary>
            <seealso cref="M:Vasco.AAL2Wrap.getRetCode"/> 
            <seealso cref="M:Vasco.AAL2Wrap.getLastError"/> 
            <param name="bDpData"> byte[248] DIGIPASS application BLOB</param>
            <param name="Property"> Property that you wish to retrieve the Value.</param>
            <param name="Value"> Value of the Given Property.</param>
            <returns> returns 0 on success, error code otherwise.</returns>
            <remarks>
            Property can be one of the following:
            <list type="bullet">
            <item>
            <description><see cref="F:Vasco.AAL2Wrap.USE_COUNT"/> - Usage count from 0 to 999999<br/>
            (returned value capped to 999999 in case the token is used more than 999999 times)<br/>
            (capped to 032767 in case of EMV CAP token)<br/></description><br/>
            </item>
            <item>
            <description><see cref="F:Vasco.AAL2Wrap.LAST_TIME_USED"/> - Last time used, number of elapsed seconds since January 1 1970<br/></description><br/>
            </item>
            <item>
            <description><see cref="F:Vasco.AAL2Wrap.LAST_TIME_SHIFT"/> - Last token time shift in second <br/></description><br/>
            </item>
            <item>
            <description><see cref="F:Vasco.AAL2Wrap.TIME_BASED_ALGO"/> - Is time based algorithm ? 0 = No, 1 = Yes<br/></description><br/>
            </item>
            <item>
            <description><see cref="F:Vasco.AAL2Wrap.EVENT_BASED_ALGO"/> - Is event based algorithm ? 0 = No, 1 = Yes<br/></description><br/>
            </item>
            <item>
            <description><see cref="F:Vasco.AAL2Wrap.PIN_SUPPORTED"/> -  Is static PIN supported ? 0 = No, 1 = Yes<br/></description><br/>
            </item>
            <item>
            <description><see cref="F:Vasco.AAL2Wrap.UNLOCK_SUPPORTED"/> - Is unlock supported ? 0 = No, 1 = Yes<br/></description><br/>
            </item>
            <item>
            <description><see cref="F:Vasco.AAL2Wrap.PIN_CH_ON"/> - Is PIN change mode ON ?  0 = No, 1 = Yes<br/></description><br/>
            </item>
            <item>
            <description><see cref="F:Vasco.AAL2Wrap.PIN_LEN"/> - PIN length from 0 to 8<br/></description><br/>
            </item>
            <item>
            <description><see cref="F:Vasco.AAL2Wrap.PIN_MIN_LEN"/> - PIN minimum length from 0 to 8<br/></description><br/>
            </item>
            <item>
            <description><see cref="F:Vasco.AAL2Wrap.PIN_ENABLED"/> - Is PIN feature enabled ? 0 = No, 1 = Yes<br/></description><br/>
            </item>
            <item>
            <description><see cref="F:Vasco.AAL2Wrap.PIN_CH_FORCED"/> - Is PIN change forced ? 0 = No, 1 = Yes<br/></description><br/>
            </item>
            <item>
            <description><see cref="F:Vasco.AAL2Wrap.PRIMARY_TOKEN_ENABLED"/> - Is primary token enabled ? 0 = No, 1 = Yes<br/></description><br/>
            </item>
            <item>
            <description><see cref="F:Vasco.AAL2Wrap.VIRTUAL_TOKEN_SUPPORTED"/> - Is virtual token supported ? 0 = No, 1 = Yes<br/></description><br/>
            </item>
            <item>
            <description><see cref="F:Vasco.AAL2Wrap.VIRTUAL_TOKEN_ENABLED"/> - Is virual token enabled ? 0 = No, 1 = Yes<br/></description><br/>
            </item>
            <item>
            <description><see cref="F:Vasco.AAL2Wrap.ERROR_COUNT"/> - Error count from 0 to 032767<br/>
            (returned value capped to 032767 in case more than 032767 failed validations occurs)<br/></description><br/>
            </item>
            <item>
            <description><see cref="F:Vasco.AAL2Wrap.EVENT_VALUE"/> - Event value from 0 to 4294967294<br/>
            For Event Based algorithm, Current Event value stored into the DIGIPASS application BLOB.<br/>
            This is the greatest Event value received for a valid verification, this is not necessarily the
            latest valid verification performed (for non-sequential Signatures presentation)<br/></description><br/>
            </item>
            <item>
            <description><see cref="F:Vasco.AAL2Wrap.LAST_EVENT_VALUE"/> - Last event value from 0 to 4294967294<br/>
            For Event Based algorithm, Event value from the last valid verification.<br/>
            (used for non-sequential Signatures presentation)<br/></description><br/>
            </item>
            <item>
            <description><see cref="F:Vasco.AAL2Wrap.SYNC_WINDOWS"/> - Is token in synchronization state ? 0 = No, 1 = Yes.<br/>
            Indicates whether or not the Initial Synchronization Window 
            will be used to perform the next validation for the DIGIPASS.<br/></description><br/>
            </item>
            <item>
            <description><see cref="F:Vasco.AAL2Wrap.CODE_WORD"/> - Codeword value from 0x00000000 to 0xFFFFFFFF<br/>
            Application codeword.<br/></description><br/>
            </item>
            <item>
            <description><see cref="F:Vasco.AAL2Wrap.DERIVATION_SUPPORTED"/> - Does DIGIPASS application support DIGIPASS data derivation ? 0 = No, 1 = Yes<br/></description><br/>
            </item>
            <item>
            <description><see cref="F:Vasco.AAL2Wrap.MAX_DTF_NUMBER"/> - Maximum number of datafields from 0 to 8 for DIGIPASS applications, always 10 for EMV applications<br/></description><br/>
            </item>
            <item>
            <description><see cref="F:Vasco.AAL2Wrap.DTF1_MIN_LEN"/> to <see cref="F:Vasco.AAL2Wrap.DTF10_MIN_LEN"/> - Minimum length of the datafield from 0 to 16<br/></description><br/>
            </item>
            <item>
            <description><see cref="F:Vasco.AAL2Wrap.DTF1_MAX_LEN"/> to <see cref="F:Vasco.AAL2Wrap.DTF10_MAX_LEN"/> - Maximum length of the datafield from 0 to 16<br/></description><br/>
            </item>
            <item>
            <description><see cref="F:Vasco.AAL2Wrap.DTF1_CHK"/> to <see cref="F:Vasco.AAL2Wrap.DTF10_CHK"/> - Does the datafield use a check digit ? 0 = No, 1 = Yes<br/></description><br/>
            </item>
            <item>
            <description><see cref="F:Vasco.AAL2Wrap.RESPONSE_LEN"/> - Response Length 0 to 16<br/>
            Response Length configured for the application, <b>excluding</b> the response checksum checkdigit if any, and <b>excluding</b> the Static PIN if any.<br/></description><br/>
            </item>
            <item>
            <description><see cref="F:Vasco.AAL2Wrap.RESPONSE_CHK"/> - Is Response Check supported ? 0 = No, 1 = Yes.<br/>
            Indicates if the response configured for the application uses a checksum check digit. If any, the OTP or Signature for this application will have a length of response len +1.<br/></description><br/>
            </item>
            <item>
            <description><see cref="F:Vasco.AAL2Wrap.TIME_STEP"/> - Time Step from 0 to 262144<br/>
            Decimal value of the Time Step in seconds for time based applications.<br/></description><br/>
            </item>
            <item>
            <description><see cref="F:Vasco.AAL2Wrap.TRIPLE_DES_USED"/> - Is Triple Des algorithm is used ? 0 = No, 1 = Yes.<br/>
            Indicates if the application uses 3DES algorithm.<br/></description><br/>
            </item>
            <item>
            <description><see cref="F:Vasco.AAL2Wrap.SECURE_CHANNEL_MSG_SIG_SUPPORTED"/> - Does DIGIPASS application support Secure Channel Message Signature ? 0 = No, 1 = Yes.<br/>
            Indicates if the application supports the Secure Channel Message Signature.<br/></description><br/>
            </item>
            <item>
            <description><see cref="F:Vasco.AAL2Wrap.OFFLINE_AUTHENTICATION_SUPPORTED"/> - Does DIGIPASS application support the offline data block generation ? 0 = No, 1 = Yes.<br/>
            Indicates if the application supports the the offline data block generation (for offline authentication with the VACMAN Controller Offline Module) .<br/></description><br/>
            </item>
            </list>
            </remarks>
        </member>
        <member name="M:Vasco.AAL2Wrap.AAL2GetTokenProperty(System.String,System.Int32,System.Int32@)">
            <summary>
            Gets some DIGIPASS application BLOB internal values in INTEGER format.
            </summary>
            <seealso cref="M:Vasco.AAL2Wrap.getRetCode"/> 
            <seealso cref="M:Vasco.AAL2Wrap.getLastError"/> 
            <param name="DpData"> string DIGIPASS application BLOB</param>
            <param name="Property"> Property that you wish to retrieve the Value.</param>
            <param name="Value"> Value of the Given Property.</param>
            <returns> returns 0 on success, error code otherwise.</returns>
            <remarks>
            Property can be one of the following:
            <list type="bullet">
            <item>
            <description><see cref="F:Vasco.AAL2Wrap.USE_COUNT"/> - Usage count from 0 to 999999<br/>
            (returned value capped to 999999 in case the token is used more than 999999 times)<br/>
            (capped to 032767 in case of EMV CAP token)<br/></description><br/>
            </item>
            <item>
            <description><see cref="F:Vasco.AAL2Wrap.LAST_TIME_USED"/> - Last time used, number of elapsed seconds since January 1 1970<br/></description><br/>
            </item>
            <item>
            <description><see cref="F:Vasco.AAL2Wrap.LAST_TIME_SHIFT"/> - Last token time shift in second <br/></description><br/>
            </item>
            <item>
            <description><see cref="F:Vasco.AAL2Wrap.TIME_BASED_ALGO"/> - Is time based algorithm ? 0 = No, 1 = Yes<br/></description><br/>
            </item>
            <item>
            <description><see cref="F:Vasco.AAL2Wrap.EVENT_BASED_ALGO"/> - Is event based algorithm ? 0 = No, 1 = Yes<br/></description><br/>
            </item>
            <item>
            <description><see cref="F:Vasco.AAL2Wrap.PIN_SUPPORTED"/> -  Is static PIN supported ? 0 = No, 1 = Yes<br/></description><br/>
            </item>
            <item>
            <description><see cref="F:Vasco.AAL2Wrap.UNLOCK_SUPPORTED"/> - Is unlock supported ? 0 = No, 1 = Yes<br/></description><br/>
            </item>
            <item>
            <description><see cref="F:Vasco.AAL2Wrap.PIN_CH_ON"/> - Is PIN change mode ON ?  0 = No, 1 = Yes<br/></description><br/>
            </item>
            <item>
            <description><see cref="F:Vasco.AAL2Wrap.PIN_LEN"/> - PIN length from 0 to 8<br/></description><br/>
            </item>
            <item>
            <description><see cref="F:Vasco.AAL2Wrap.PIN_MIN_LEN"/> - PIN minimum length from 0 to 8<br/></description><br/>
            </item>
            <item>
            <description><see cref="F:Vasco.AAL2Wrap.PIN_ENABLED"/> - Is PIN feature enabled ? 0 = No, 1 = Yes<br/></description><br/>
            </item>
            <item>
            <description><see cref="F:Vasco.AAL2Wrap.PIN_CH_FORCED"/> - Is PIN change forced ? 0 = No, 1 = Yes<br/></description><br/>
            </item>
            <item>
            <description><see cref="F:Vasco.AAL2Wrap.PRIMARY_TOKEN_ENABLED"/> - Is primary token enabled ? 0 = No, 1 = Yes<br/></description><br/>
            </item>
            <item>
            <description><see cref="F:Vasco.AAL2Wrap.VIRTUAL_TOKEN_SUPPORTED"/> - Is virtual token supported ? 0 = No, 1 = Yes<br/></description><br/>
            </item>
            <item>
            <description><see cref="F:Vasco.AAL2Wrap.VIRTUAL_TOKEN_ENABLED"/> - Is virual token enabled ? 0 = No, 1 = Yes<br/></description><br/>
            </item>
            <item>
            <description><see cref="F:Vasco.AAL2Wrap.ERROR_COUNT"/> - Error count from 0 to 032767<br/>
            (returned value capped to 032767 in case more than 032767 failed validations occurs)<br/></description><br/>
            </item>
            <item>
            <description><see cref="F:Vasco.AAL2Wrap.EVENT_VALUE"/> - Event value from 0 to 4294967294<br/>
            For Event Based algorithm, Current Event value stored into the DIGIPASS application BLOB.<br/>
            This is the greatest Event value received for a valid verification, this is not necessarily the
            latest valid verification performed (for non-sequential Signatures presentation)<br/></description><br/>
            </item>
            <item>
            <description><see cref="F:Vasco.AAL2Wrap.LAST_EVENT_VALUE"/> - Last event value from 0 to 4294967294<br/>
            For Event Based algorithm, Event value from the last valid verification.<br/>
            (used for non-sequential Signatures presentation)<br/></description><br/>
            </item>
            <item>
            <description><see cref="F:Vasco.AAL2Wrap.SYNC_WINDOWS"/> - Is token in synchronization state ? 0 = No, 1 = Yes.<br/>
            Indicates whether or not the Initial Synchronization Window 
            will be used to perform the next validation for the DIGIPASS.<br/></description><br/>
            </item>
            <item>
            <description><see cref="F:Vasco.AAL2Wrap.CODE_WORD"/> - Codeword value from 0x00000000 to 0xFFFFFFFF<br/>
            Application codeword.<br/></description><br/>
            </item>
            <item>
            <description><see cref="F:Vasco.AAL2Wrap.DERIVATION_SUPPORTED"/> - Does DIGIPASS application support DIGIPASS data derivation ? 0 = No, 1 = Yes<br/></description><br/>
            </item>
            <item>
            <description><see cref="F:Vasco.AAL2Wrap.MAX_DTF_NUMBER"/> - Maximum number of datafields from 0 to 8 for DIGIPASS applications, always 10 for EMV applications<br/></description><br/>
            </item>
            <item>
            <description><see cref="F:Vasco.AAL2Wrap.DTF1_MIN_LEN"/> to <see cref="F:Vasco.AAL2Wrap.DTF10_MIN_LEN"/> - Minimum length of the datafield from 0 to 16<br/></description><br/>
            </item>
            <item>
            <description><see cref="F:Vasco.AAL2Wrap.DTF1_MAX_LEN"/> to <see cref="F:Vasco.AAL2Wrap.DTF10_MAX_LEN"/> - Maximum length of the datafield from 0 to 16<br/></description><br/>
            </item>
            <item>
            <description><see cref="F:Vasco.AAL2Wrap.DTF1_CHK"/> to <see cref="F:Vasco.AAL2Wrap.DTF10_CHK"/> - Does the datafield use a check digit ? 0 = No, 1 = Yes<br/></description><br/>
            </item>
            <item>
            <description><see cref="F:Vasco.AAL2Wrap.RESPONSE_LEN"/> - Response Length 0 to 16<br/>
            Response Length configured for the application, <b>excluding</b> the response checksum checkdigit if any, and <b>excluding</b> the Static PIN if any.<br/></description><br/>
            </item>
            <item>
            <description><see cref="F:Vasco.AAL2Wrap.RESPONSE_CHK"/> - Is Response Check supported ? 0 = No, 1 = Yes.<br/>
            Indicates if the response configured for the application uses a checksum check digit. If any, the OTP or Signature for this application will have a length of response len +1.<br/></description><br/>
            </item>
            <item>
            <description><see cref="F:Vasco.AAL2Wrap.TIME_STEP"/> - Time Step from 0 to 262144<br/>
            Decimal value of the Time Step in seconds for time based applications.<br/></description><br/>
            </item>
            <item>
            <description><see cref="F:Vasco.AAL2Wrap.TRIPLE_DES_USED"/>  Is Triple Des algorithm is used ? 0 = No, 1 = Yes.<br/>
            Indicates if the application uses 3DES algorithm.<br/></description><br/>
            </item>
            <item>
            <description><see cref="F:Vasco.AAL2Wrap.SECURE_CHANNEL_MSG_SIG_SUPPORTED"/>  Does DIGIPASS application support Secure Channel Message Signature ? 0 = No, 1 = Yes.<br/>
            Indicates if the application supports the Secure Channel Message Signature.<br/></description><br/>
            </item>
            <item>
            <description><see cref="F:Vasco.AAL2Wrap.OFFLINE_AUTHENTICATION_SUPPORTED"/> - Does DIGIPASS application support the offline data block generation ? 0 = No, 1 = Yes.<br/>
            Indicates if the application supports the the offline data block generation (for offline authentication with the VACMAN Controller Offline Module) .<br/></description><br/>
            </item>
            </list>
            </remarks>
        </member>
        <member name="M:Vasco.AAL2Wrap.AAL2GetTokenProperty(System.Byte[],System.Int32)">
            <summary>
            Gets some DIGIPASS internal Property values in readable format.
            </summary>
            <seealso cref="M:Vasco.AAL2Wrap.getRetCode"/> 
            <seealso cref="M:Vasco.AAL2Wrap.getLastError"/> 
            <param name="bDpData"> byte[248] DIGIPASS application BLOB</param>
            <param name="Property"> Property Value.</param>
            <returns> return a string containing the property information or <i>null</i>.</returns>
            <remarks>
            Property can be one of the following:
            <list type="bullet">
            <item>
            <description><see cref="F:Vasco.AAL2Wrap.TOKEN_MODEL"/> - Token model<br/>
            Size : 5<br/>
            description : 5 characters, "DP300", "DP700", etc...<br/></description><br/>
            </item>
            <item>
            <description><see cref="F:Vasco.AAL2Wrap.USE_COUNT"/> - Usage count<br/>
            Size : 6<br/>
            description : 6 digits, "000000 to 999999"<br/>
            (returned value capped to 999999 in case the token is used more than 999999 times)<br/>
            (capped to 032767 in case of EMV CAP token)<br/></description><br/>
            </item>
            <item>
            <description><see cref="F:Vasco.AAL2Wrap.LAST_TIME_USED"/> - Last time used<br/>
            Size : 24<br/>
            description : 24 characters Ddd Mmm DD HH:MM:SS YYYY<br/></description><br/>
            </item>
            <item>
            <description><see cref="F:Vasco.AAL2Wrap.LAST_TIME_SHIFT"/> - Last time shift<br/>
            Size : Up to 11<br/>
            description : Up to 11 signed digits, +/- seconds<br/></description><br/>
            </item>
            <item>
            <description><see cref="F:Vasco.AAL2Wrap.TIME_BASED_ALGO"/> - Is time based algorithm ?<br/>
            Size : 3<br/>
            description : 3 characters, "YES"/"NO "<br/></description><br/>
            </item>
            <item>
            <description><see cref="F:Vasco.AAL2Wrap.EVENT_BASED_ALGO"/> - Is event based algorithm ?<br/>
            Size : 3<br/>
            description : 3 characters, "YES"/"NO "<br/></description><br/>
            </item>
            <item>
            <description><see cref="F:Vasco.AAL2Wrap.PIN_SUPPORTED"/> -  Is static PIN supported ?<br/>
            Size : 3<br/>
            description : 3 characters, "YES"/"NO "<br/></description><br/>
            </item>
            <item>
            <description><see cref="F:Vasco.AAL2Wrap.UNLOCK_SUPPORTED"/> - Is unlock supported ?<br/>
            Size : 3<br/>
            description : 3 characters, "YES"/"NO "<br/></description><br/>
            </item>
            <item>
            <description><see cref="F:Vasco.AAL2Wrap.PIN_CH_ON"/> - Is PIN change mode ON ?<br/>
            Size : 3<br/>
            description : 3 characters, "YES"/"NO "<br/></description><br/>
            </item>
            <item>
            <description><see cref="F:Vasco.AAL2Wrap.PIN_LEN"/> - PIN length<br/>
            Size : 2<br/>
            description : 2 digits, "00" to "08" Current Static Pin Length<br/></description><br/>
            </item>
            <item>
            <description><see cref="F:Vasco.AAL2Wrap.PIN_MIN_LEN"/> - PIN minimum length<br/>
            Size : 2<br/>
            description : 2 digits, "00" to "08" Static Pin minimum Length<br/></description><br/>
            </item>
            <item>
            <description><see cref="F:Vasco.AAL2Wrap.PIN_ENABLED"/> - Is PIN feature enabled ?<br/>
            Size : 3<br/>
            description : 3 characters, "YES"/"NO ". Indicates whether the PIN is enabled or not.<br/></description><br/>
            </item>
            <item>
            <description><see cref="F:Vasco.AAL2Wrap.PIN_CH_FORCED"/> - Is PIN change forced ?<br/>
            Size : 3<br/>
            description : 3 characters, "YES"/"NO ". Indicates whether the PIN has to be changed at the next logon attempt.<br/></description><br/>
            </item>
            <item>
            <description><see cref="F:Vasco.AAL2Wrap.PRIMARY_TOKEN_ENABLED"/> - Is primary token enabled ?<br/>
            Size : 3<br/>
            description : 3 characters, "YES"/"NO ". Indicates whether the primary Token is enabled or not.<br/></description><br/>
            </item>
            <item>
            <description><see cref="F:Vasco.AAL2Wrap.VIRTUAL_TOKEN_SUPPORTED"/> - Is virtual token supported ?<br/>
            Size : 3<br/>
            description : 3 characters, "YES"/"NO ". Indicates whether the virtual token is supportrd or not.<br/></description><br/>
            </item>
            <item>
            <description><see cref="F:Vasco.AAL2Wrap.VIRTUAL_TOKEN_ENABLED"/> - Is virual token enabled ?<br/>
            Size : 3<br/>
            description : 3 characters, "YES"/"NO ". Indicates whether the virtual token is enabled or not.<br/></description><br/>
            </item>
            <item>
            <description><see cref="F:Vasco.AAL2Wrap.VIRTUAL_TOKEN_TYPE"/> - Virtual token type<br/>
            Size : 7<br/>
            description : Up to 8 digits "BACKUP","PRIMARY", "NA", Virtual token type<br/></description><br/>
            </item>
            <item>
            <description><see cref="F:Vasco.AAL2Wrap.VIRTUAL_TOKEN_GRACE_PERIOD"/> - Virtual token grace period<br/>
            Size : 24<br/>
            description : 24 characters Ddd Mmm DD HH:MM:SS YYYY Virtual Token Grace Period expiration date<br/></description><br/>
            </item>
            <item>
            <description><see cref="F:Vasco.AAL2Wrap.VIRTUAL_TOKEN_REMAIN_USE"/> - Virtual token remain use<br/>
            Size : 3<br/>
            description :  digits, "000" to "255" Virtual token remaining uses.<br/></description><br/>
            </item>
            <item>
            <description><see cref="F:Vasco.AAL2Wrap.LAST_RESPONSE_TYPE"/> - Last response type<br/>
            Size : 8<br/>
            description : Up to 8 digits "BACKUP", "PRIMARY", "NA". Last valid response type<br/></description><br/>
            </item>
            <item>
            <description><see cref="F:Vasco.AAL2Wrap.ERROR_COUNT"/> - Error count<br/>
            Size : 6<br/>
            description : 6 digits, "000000" to "032767" Error counter value<br/>
            (returned value capped to 032767 in case more than 032767 failed validations occurs)<br/></description><br/>
            </item>
            <item>
            <description><see cref="F:Vasco.AAL2Wrap.EVENT_VALUE"/> - Event value <br/>
            Size : 10<br/>
            description : 10 digits, "0000000000" to "4294967294"<br/>
            For Event Based algorithm, Current Event value stored into the DIGIPASS application BLOB.
            This is the greatest Event value received for a valid verification, this is not necessarily the
            latest valid verification performed (for non-sequential Signatures presentation)<br/></description><br/>
            </item>
            <item>
            <description><see cref="F:Vasco.AAL2Wrap.LAST_EVENT_VALUE"/> - Last event value<br/>
            Size : 10<br/>
            description : 10 digits, "0000000000" to "4294967294"<br/>
            For Event Based algorithm, Event value from the last valid verification.
            (used for non-sequential Signatures presentation)<br/></description><br/>
            </item>
            <item>
            <description><see cref="F:Vasco.AAL2Wrap.SYNC_WINDOWS"/> - Is token in synchronization state ?<br/>
            Size : 3<br/>
            description : 3 characters, "YES"/"NO ". Indicates whether or not the Initial Synchronization Window 
            will be used to perform the next validation for the DIGIPASS.<br/></description><br/>
            </item>
            <item>
            <description><see cref="F:Vasco.AAL2Wrap.CODE_WORD"/> - Codeword value<br/>
            Size : 8<br/>
            description : 8 characters, "00000000" to "FFFFFFFF". Application codeword.<br/></description><br/>
            </item>
            <item>
            <description><see cref="F:Vasco.AAL2Wrap.AUTH_MODE"/> - Authentication mode<br/>
            Size : 2<br/>
            description : 2 characters, "RO"/"SG"/"CR"/"MM"/"UL". Indicates the authentication mode for the aplication.<br/></description><br/>
            </item>
            <item>
            <description><see cref="F:Vasco.AAL2Wrap.DERIVATION_SUPPORTED"/> - Does DIGIPASS application support DIGIPASS data derivation ?<br/>
            Size : 3<br/>
            Description : 3 characters "YES"/"NO"/"NA", indicating if the DIGIPASS application supports DIGIPASS data derivation. Always "NA" for EMV tokens.<br/></description><br/>
            </item>
            <item>
            <description><see cref="F:Vasco.AAL2Wrap.OCRA_SUITE"/> - OCRA suite<br/>
            Size : 48<br/>
            description : Up to 48 characters containing the OCRASuite, e.g. OCRA-1:HOTP-SHA1-6:QN08.
            The OCRASuite is a value representing the suite of operations to compute an OCRA response.<br/></description><br/>
            </item>
            <item>
            <description><see cref="F:Vasco.AAL2Wrap.MAX_DTF_NUMBER"/> - Maximum number of datafields <br/>
            Size : 2<br/>
            Description : 2 characters containing the maximum number of datafields.
            From "00" to "08" for DIGIPASS applications, always "10" for EMV applications (MODE2 with TDS).<br/></description><br/>
            </item>
            <item>
            <description><see cref="F:Vasco.AAL2Wrap.DTF1_MIN_LEN"/> to <see cref="F:Vasco.AAL2Wrap.DTF10_MIN_LEN"/> - Minimum length of the datafield (for DTF 1 to 10)<br/>
            Size : 2+1<br/>
            Description : 2 characters containing the minimum length of the datafield.
            From "00" to "16" for DIGIPASS applications, always "00" for EMV applications. 
            DTF9_MIN_LEN and DTF10_MIN_LEN are not applicable for DIGIPASS applications and return "NA".<br/></description><br/>
            </item>
            <item>
            <description><see cref="F:Vasco.AAL2Wrap.DTF1_MAX_LEN"/> to <see cref="F:Vasco.AAL2Wrap.DTF10_MAX_LEN"/> - Maximum length of the datafield (for DTF 1 to 10)<br/>
            Size : 2<br/>
            Description : 2 characters containing the maximum length of the datafield.
            From "00" to "16" for DIGIPASS applications, always "10" for EMV applications. 
            DTF9_MAX_LEN and DTF10_MAX_LEN are not applicable for DIGIPASS applications and return "NA".<br/></description><br/>
            </item>
            <item>
            <description><see cref="F:Vasco.AAL2Wrap.DTF1_CHK"/> to <see cref="F:Vasco.AAL2Wrap.DTF10_CHK"/> - Does the datafield use a check digit (for DTF 1 to 10)
            Size : 3<br/>
            Description : 3 characters "YES"/"NO"/"NA", indicating if the datafield use a check digit.
            Always "NO" for EMV applications. DTF9_CHK and DTF10_CHK are not applicable for a 
            DIGIPASS application and return "NA".<br/></description><br/>
            </item>
            <item>
            <description><see cref="F:Vasco.AAL2Wrap.RESPONSE_LEN"/> - Response Length <br/>
            Size : 2<br/>
            Description : 2 characters containing the Response length configured for the application.
            From "00" to "16" fexcluding the response checksum checkdigit if any, and excluding the 
            Static PIN if any<br/></description><br/>
            </item>
            <item>
            <description><see cref="F:Vasco.AAL2Wrap.RESPONSE_FORMAT"/> - response Format <br/>
            Size : up to 16<br/>
            Description : up to 16 characters containing the Response format can be either HEX, DEC1 or DEC2.<br/>
            (Hexadecimal, Decimal1 or Decimal2)<br/></description><br/>
            </item>
            <item>
            <description><see cref="F:Vasco.AAL2Wrap.RESPONSE_CHK"/> - Is Response Check supported ?<br/>
            Size : 3<br/>
            Description : 3 characters "YES"/"NO" indicating if the response configured for the application uses a checksum check digit. 
            If any, the OTP or Signature for this application will have a length of response length +1.<br/></description><br/>
            </item>
            <item>
            <description><see cref="F:Vasco.AAL2Wrap.TIME_STEP"/> - Time Step <br/>
            Size : 6<br/>
            Description : 6 digits from 000000 to 262144 Decimal value of the Time Step in seconds for time based applications.
            <br/></description><br/>
            </item>
            <item>
            <description><see cref="F:Vasco.AAL2Wrap.TRIPLE_DES_USED"/>  Is Triple DES algorithm is used ?<br/>
            Size : 3<br/>
            Description : 3 characters "YES"/"NO" indicating if the application uses 3DES algorithm.
            <br/></description><br/>
            </item>
            <item>
            <description><see cref="F:Vasco.AAL2Wrap.SECURE_CHANNEL_MSG_SIG_SUPPORTED"/>  Does DIGIPASS application support Secure Channel Message Signature ?<br/>
            Size : 3<br/>
            Description : 3 characters "YES"/"NO"/"NA", indicating if the DIGIPASS application supports Secure Channel Message Signature. Always "NA" for EMV tokens.<br/></description><br/>
            </item>
            <item>
            <description><see cref="F:Vasco.AAL2Wrap.OFFLINE_AUTHENTICATION_SUPPORTED"/>  Does DIGIPASS application support the offline data block generation ?<br/>
            Size : 3<br/>
            Description : 3 characters "YES"/"NO"/"NA", indicating if the DIGIPASS application supports the offline data block generation (for offline authentication with the VACMAN Controller Offline Module). Always "NA" for EMV tokens.<br/></description><br/>
            </item>
            </list>
            </remarks>
        </member>
        <member name="M:Vasco.AAL2Wrap.AAL2GetTokenProperty(System.String,System.Int32)">
            <summary>
            Gets some DIGIPASS application BLOB internal values in readable format.
            </summary>
            <seealso cref="M:Vasco.AAL2Wrap.getRetCode"/> 
            <seealso cref="M:Vasco.AAL2Wrap.getLastError"/> 
            <param name="DpData"> string DIGIPASS application BLOB</param>
            <param name="Property"> Property Value.</param>
            <returns> return a string containing the property information or <i>null</i>.</returns>
            <remarks>
            Property can be one of the following:
            <list type="bullet">
            <item>
            <description><see cref="F:Vasco.AAL2Wrap.TOKEN_MODEL"/> - Token model<br/>
            Size : 5<br/>
            description : 5 characters, "DP300", "DP700", etc...<br/></description><br/>
            </item>
            <item>
            <description><see cref="F:Vasco.AAL2Wrap.USE_COUNT"/> - Usage count<br/>
            Size : 6<br/>
            description : 6 digits, "000000 to 999999"<br/>
            (returned value capped to 999999 in case the token is used more than 999999 times)<br/>
            (capped to 032767 in case of EMV CAP token)<br/></description><br/>
            </item>
            <item>
            <description><see cref="F:Vasco.AAL2Wrap.LAST_TIME_USED"/> - Last time used<br/>
            Size : 24<br/>
            description : 24 characters Ddd Mmm DD HH:MM:SS YYYY<br/></description><br/>
            </item>
            <item>
            <description><see cref="F:Vasco.AAL2Wrap.LAST_TIME_SHIFT"/> - Last time shift<br/>
            Size : Up to 11<br/>
            description : Up to 11 signed digits, +/- seconds<br/></description><br/>
            </item>
            <item>
            <description><see cref="F:Vasco.AAL2Wrap.TIME_BASED_ALGO"/> - Is time based algorithm ?<br/>
            Size : 3<br/>
            description : 3 characters, "YES"/"NO "<br/></description><br/>
            </item>
            <item>
            <description><see cref="F:Vasco.AAL2Wrap.EVENT_BASED_ALGO"/> - Is event based algorithm ?<br/>
            Size : 3<br/>
            description : 3 characters, "YES"/"NO "<br/></description><br/>
            </item>
            <item>
            <description><see cref="F:Vasco.AAL2Wrap.PIN_SUPPORTED"/> -  Is static PIN supported ?<br/>
            Size : 3<br/>
            description : 3 characters, "YES"/"NO "<br/></description><br/>
            </item>
            <item>
            <description><see cref="F:Vasco.AAL2Wrap.UNLOCK_SUPPORTED"/> - Is unlock supported ?<br/>
            Size : 3<br/>
            description : 3 characters, "YES"/"NO "<br/></description><br/>
            </item>
            <item>
            <description><see cref="F:Vasco.AAL2Wrap.PIN_CH_ON"/> - Is PIN change mode ON ?<br/>
            Size : 3<br/>
            description : 3 characters, "YES"/"NO "<br/></description><br/>
            </item>
            <item>
            <description><see cref="F:Vasco.AAL2Wrap.PIN_LEN"/> - PIN length<br/>
            Size : 2<br/>
            description : 2 digits, "00" to "08" Current Static Pin Length<br/></description><br/>
            </item>
            <item>
            <description><see cref="F:Vasco.AAL2Wrap.PIN_MIN_LEN"/> - PIN minimum length<br/>
            Size : 2<br/>
            description : 2 digits, "00" to "08" Static Pin minimum Length<br/></description><br/>
            </item>
            <item>
            <description><see cref="F:Vasco.AAL2Wrap.PIN_ENABLED"/> - Is PIN feature enabled ?<br/>
            Size : 3<br/>
            description : 3 characters, "YES"/"NO ". Indicates whether the PIN is enabled or not.<br/></description><br/>
            </item>
            <item>
            <description><see cref="F:Vasco.AAL2Wrap.PIN_CH_FORCED"/> - Is PIN change forced ?<br/>
            Size : 3<br/>
            description : 3 characters, "YES"/"NO ". Indicates whether the PIN has to be changed at the next logon attempt.<br/></description><br/>
            </item>
            <item>
            <description><see cref="F:Vasco.AAL2Wrap.PRIMARY_TOKEN_ENABLED"/> - Is primary token enabled ?<br/>
            Size : 3<br/>
            description : 3 characters, "YES"/"NO ". Indicates whether the primary Token is enabled or not.<br/></description><br/>
            </item>
            <item>
            <description><see cref="F:Vasco.AAL2Wrap.VIRTUAL_TOKEN_SUPPORTED"/> - Is virtual token supported ?<br/>
            Size : 3<br/>
            description : 3 characters, "YES"/"NO ". Indicates whether the virtual token is supportrd or not.<br/></description><br/>
            </item>
            <item>
            <description><see cref="F:Vasco.AAL2Wrap.VIRTUAL_TOKEN_ENABLED"/> - Is virual token enabled ?<br/>
            Size : 3<br/>
            description : 3 characters, "YES"/"NO ". Indicates whether the virtual token is enabled or not.<br/></description><br/>
            </item>
            <item>
            <description><see cref="F:Vasco.AAL2Wrap.VIRTUAL_TOKEN_TYPE"/> - Virtual token type<br/>
            Size : 7<br/>
            description : Up to 8 digits "BACKUP","PRIMARY", "NA", Virtual token type<br/></description><br/>
            </item>
            <item>
            <description><see cref="F:Vasco.AAL2Wrap.VIRTUAL_TOKEN_GRACE_PERIOD"/> - Virtual token grace period<br/>
            Size : 24<br/>
            description : 24 characters Ddd Mmm DD HH:MM:SS YYYY Virtual Token Grace Period expiration date<br/></description><br/>
            </item>
            <item>
            <description><see cref="F:Vasco.AAL2Wrap.VIRTUAL_TOKEN_REMAIN_USE"/> - Virtual token remain use<br/>
            Size : 3<br/>
            description :  digits, "000" to "255" Virtual token remaining uses.<br/></description><br/>
            </item>
            <item>
            <description><see cref="F:Vasco.AAL2Wrap.LAST_RESPONSE_TYPE"/> - Last response type<br/>
            Size : 8<br/>
            description : Up to 8 digits "BACKUP", "PRIMARY", "NA". Last valid response type<br/></description><br/>
            </item>
            <item>
            <description><see cref="F:Vasco.AAL2Wrap.ERROR_COUNT"/> - Error count<br/>
            Size : 6<br/>
            description : 6 digits, "000000" to "032767" Error counter value<br/>
            (returned value capped to 032767 in case more than 032767 failed validations occurs)<br/></description><br/>
            </item>
            <item>
            <description><see cref="F:Vasco.AAL2Wrap.EVENT_VALUE"/> - Event value<br/>
            Size : 10<br/>
            description : 10 digits, "0000000000" to "4294967294"<br/>
            For Event Based algorithm, Current Event value stored into the DIGIPASS application BLOB.
            This is the greatest Event value received for a valid verification, this is not necessarily the
            latest valid verification performed (for non-sequential Signatures presentation)<br/></description><br/>
            </item>
            <item>
            <description><see cref="F:Vasco.AAL2Wrap.LAST_EVENT_VALUE"/> - Last event value<br/>
            Size : 10<br/>
            description : 10 digits, "0000000000" to "4294967294"<br/>
            For Event Based algorithm, Event value from the last valid verification.
            (used for non-sequential Signatures presentation)<br/></description><br/>
            </item>
            <item>
            <description><see cref="F:Vasco.AAL2Wrap.SYNC_WINDOWS"/> - Is token in synchronization state ?<br/>
            Size : 3<br/>
            description : 3 characters, "YES"/"NO ". Indicates whether or not the Initial Synchronization Window 
            will be used to perform the next validation for the DIGIPASS.<br/></description><br/>
            </item>
            <item>
            <description><see cref="F:Vasco.AAL2Wrap.CODE_WORD"/> - Codeword value<br/>
            Size : 8<br/>
            description : 8 characters, "00000000" to "FFFFFFFF". Application codeword.<br/></description><br/>
            </item>
            <item>
            <description><see cref="F:Vasco.AAL2Wrap.AUTH_MODE"/> - Authentication mode<br/>
            Size : 2<br/>
            description : 2 characters, "RO"/"SG"/"CR"/"MM"/"UL". Indicates the authentication mode for the aplication.<br/></description><br/>
            </item>
            <item>
            <description><see cref="F:Vasco.AAL2Wrap.DERIVATION_SUPPORTED"/> - Does DIGIPASS application support DIGIPASS data derivation ?<br/>
            Size : 3<br/>
            Description : 3 characters "YES"/"NO"/"NA", indicating if the DIGIPASS application supports DIGIPASS data derivation. Always "NA" for EMV tokens.<br/></description><br/>
            </item>
            <item>
            <description><see cref="F:Vasco.AAL2Wrap.OCRA_SUITE"/> - OCRA suite<br/>
            Size : 48<br/>
            description : Up to 48 characters containing the OCRASuite, e.g. OCRA-1:HOTP-SHA1-6:QN08.
            The OCRASuite is a value representing the suite of operations to compute an OCRA response.<br/></description><br/>
            </item>
            <item>
            <description><see cref="F:Vasco.AAL2Wrap.MAX_DTF_NUMBER"/> - Maximum number of datafields <br/>
            Size : 2<br/>
            Description : 2 characters containing the maximum number of datafields.
            From "00" to "08" for DIGIPASS applications, always "10" for EMV applications (MODE2 with TDS).<br/></description><br/>
            </item>
            <item>
            <description><see cref="F:Vasco.AAL2Wrap.DTF1_MIN_LEN"/> to <see cref="F:Vasco.AAL2Wrap.DTF10_MIN_LEN"/> - Minimum length of the datafield (for DTF 1 to 10)<br/>
            Size : 2<br/>
            Description : 2 characters containing the minimum lemgth of the datafield.
            From "00" to "16" for DIGIPASS applications, always "00" for EMV applications. 
            DTF9_MIN_LEN and DTF10_MIN_LEN are not applicable for DIGIPASS applications and return "NA".<br/></description><br/>
            </item>
            <item>
            <description><see cref="F:Vasco.AAL2Wrap.DTF1_MAX_LEN"/> to <see cref="F:Vasco.AAL2Wrap.DTF10_MAX_LEN"/> - Maximum length of the datafield (for DTF 1 to 10)<br/>
            Size : 2<br/>
            Description : 2 characters containing the maximum lemgth of the datafield.
            From "00" to "16" for DIGIPASS applications, always "10" for EMV applications. 
            DTF9_MAX_LEN and DTF10_MAX_LEN are not applicable for DIGIPASS applications and return "NA".<br/></description><br/>
            </item>
            <item>
            <description><see cref="F:Vasco.AAL2Wrap.DTF1_CHK"/> to <see cref="F:Vasco.AAL2Wrap.DTF10_CHK"/> - Does the datafield use a check digit (for DTF 1 to 10)
            Size : 3<br/>
            Description : 3 characters "YES"/"NO"/"NA", indicating if the datafield use a check digit.
            Always "NO" for EMV applications. DTF9_CHK and DTF10_CHK are not applicable for a 
            DIGIPASS application and return "NA".<br/></description><br/>
            </item>
            <item>
            <description><see cref="F:Vasco.AAL2Wrap.RESPONSE_LEN"/> - Response Length <br/>
            Size : 2<br/>
            Description : 2 characters containing the Response length configured for the application.
            From "00" to "16" fexcluding the response checksum checkdigit if any, and excluding the 
            Static PIN if any<br/></description><br/>
            </item>
            <item>
            <description><see cref="F:Vasco.AAL2Wrap.RESPONSE_FORMAT"/> - response Format <br/>
            Size : up to 16<br/>
            Description : up to 16 characters containing the Response format can be either HEX, DEC1 or DEC2.<br/>
            (Hexadecimal, Decimal1 or Decimal2)<br/></description><br/>
            </item>
            <item>
            <description><see cref="F:Vasco.AAL2Wrap.RESPONSE_CHK"/> - Is Response Check supported ?<br/>
            Size : 3<br/>
            Description : 3 characters "YES"/"NO" indicating if the response configured for the application uses a checksum check digit. 
            If any, the OTP or Signature for this application will have a length of response length +1.<br/></description><br/>
            </item>
            <item>
            <description><see cref="F:Vasco.AAL2Wrap.TIME_STEP"/> - Time Step <br/>
            Size : 3<br/>
            Description : 6 digits from 000000 to 262144 Decimal value of the Time Step in seconds for time based applications.<br/>
            </description><br/>
            </item>
            <item>
            <description><see cref="F:Vasco.AAL2Wrap.TRIPLE_DES_USED"/>  Is Triple Des algorithm is used ?<br/>
            Size : 3<br/>
            Description : 3 characters "YES"/"NO" indicating if the application uses 3DES algorithm.<br/>
            </description><br/>
            </item>
            <item>
            <description><see cref="F:Vasco.AAL2Wrap.SECURE_CHANNEL_MSG_SIG_SUPPORTED"/>  Does DIGIPASS application support Secure Channel Message Signature ?<br/>
            Size : 3<br/>
            Description : 3 characters "YES"/"NO"/"NA" indicating if the application supports the Secure Channel Message Signature. Always "NA" for EMV tokens.
            <br/></description><br/>
            </item>
            <item>
            <description><see cref="F:Vasco.AAL2Wrap.OFFLINE_AUTHENTICATION_SUPPORTED"/>  Does DIGIPASS application support the offline data block generation ?<br/>
            Size : 3<br/>
            Description : 3 characters "YES"/"NO"/"NA", indicating if the DIGIPASS application supports the offline data block generation (for offline authentication with the VACMAN Controller Offline Module). Always "NA" for EMV tokens.<br/></description><br/>
            </item>
            </list>
            </remarks>
        </member>
        <member name="M:Vasco.AAL2Wrap.AAL2GetTokenInfoEx(System.Byte[])">
            <summary>
            Gets some DIGIPASS application internal Property values in readable format.
            </summary>
            <seealso cref="M:Vasco.AAL2Wrap.getRetCode"/> 
            <seealso cref="M:Vasco.AAL2Wrap.getLastError"/> 
            <param name="bDpData"> byte[248] DIGIPASS application BLOB</param>
            <returns> return a structure containing informations about the DIGIPASS application BLOB or <i>null</i>.</returns>
        </member>
        <member name="M:Vasco.AAL2Wrap.AAL2GetTokenInfoEx(System.String)">
            <summary>
            Gets some DIGIPASS application internal Property values in readable format.
            </summary>
            <seealso cref="M:Vasco.AAL2Wrap.getRetCode"/> 
            <seealso cref="M:Vasco.AAL2Wrap.getLastError"/> 
            <param name="DpData"> string DIGIPASS application BLOB</param>
            <returns> return a structure containing informations about the DIGIPASS application BLOB or <i>null</i>.</returns>
        </member>
        <member name="M:Vasco.AAL2Wrap.AAL2SetTokenProperty(System.String@,System.Int32,System.Int32)">
            <summary>
            Sets Information for a DIGIPASS application.
            </summary>
            <remarks>
            Sets a specified <b>Property</b> to a new <b>Value</b> for a specified DIGIPASS application.
            <list type="bullet">
            <item>
            <description><see cref="F:Vasco.AAL2Wrap.LAST_TIME_USED"/> : valid value : [631152000:2147483647].<br/></description><br/>
            </item>
            <item>
            <description><see cref="F:Vasco.AAL2Wrap.LAST_TIME_SHIFT"/> : valid value : [-100000:100000].<br/></description><br/>
            </item>
            <item>
            <description><see cref="F:Vasco.AAL2Wrap.TOKEN_STATUS"/> - valid values :<br/>
            0 (Token Disabled)<br/>
            1 (Primary Token Enabled Only)<br/>
            2 (Backup  Token Enabled Only)<br/>
            3 (Primary and Backup Enabled)<br/></description><br/>
            </item>
            <item>
            <description><see cref="F:Vasco.AAL2Wrap.VIRTUAL_TOKEN_GRACE_PERIOD"/> : valid value [1:364].<br/></description><br/>
            </item>
            <item>
            <description><see cref="F:Vasco.AAL2Wrap.VIRTUAL_TOKEN_REMAIN_USE"/> : valid value [0:254]. <br/></description><br/>
            </item>
            <item>
            <description><see cref="F:Vasco.AAL2Wrap.PIN_ENABLED"/> - valid values :<br/>
            1 (STATIC_PIN_ENABLED)<br/>
            2 (STATIC_PIN_DISABLED).<br/></description><br/>
            </item>
            <item>
            <description><see cref="F:Vasco.AAL2Wrap.PIN_MIN_LEN"/> : valid value [3:8].<br/></description><br/>
            </item>
            <item>
            <description><see cref="F:Vasco.AAL2Wrap.PIN_CH_FORCED"/> : 1 force PIN Change.<br/></description><br/>
            </item>
            <item>
            <description><see cref="F:Vasco.AAL2Wrap.ERROR_COUNT"/> : 0 Reset Error Counter.<br/></description><br/>
            </item>
            <item>
            <description><see cref="F:Vasco.AAL2Wrap.EVENT_VALUE"/> : valid value [0:4294967294].<br/>
            Set is possible only for event greater later than the current EVENT_VALUE
            </description><br/>
            </item>
            </list>
            </remarks>                                  
            <param name="DpData"> string DIGIPASS application BLOB.
            <b>Upon return from the function call, this BLOB must be rewritten to the application database to reflect the changes.</b></param>
            <param name="Property"> Property we want to set.</param>
            <param name="PropertyValue"> Value for the specified property.</param>
            <seealso cref="M:Vasco.AAL2Wrap.getRetCode"/> 
            <seealso cref="M:Vasco.AAL2Wrap.getLastError"/> 
            <returns> return 0 if successful.</returns>
        </member>
        <member name="M:Vasco.AAL2Wrap.AAL2SetTokenProperty(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Sets Information for a DIGIPASS application.
            </summary>
            <remarks>
            Sets a specified <b>Property</b> to a new <b>Value</b> for a specified DIGIPASS application.
            <list type="bullet">
            <item>
            <description><see cref="F:Vasco.AAL2Wrap.LAST_TIME_USED"/> : valid value : [631152000:2147483647].<br/></description><br/>
            </item>
            <item>
            <description><see cref="F:Vasco.AAL2Wrap.LAST_TIME_SHIFT"/> : valid value : [-100000:100000].<br/></description><br/>
            </item>
            <item>
            <description><see cref="F:Vasco.AAL2Wrap.TOKEN_STATUS"/> - valid values :<br/>
            0 (Token Disabled)<br/>
            1 (Primary Token Enabled Only)<br/>
            2 (Backup  Token Enabled Only)<br/>
            3 (Primary and Backup Enabled)<br/></description><br/>
            </item>
            <item>
            <description><see cref="F:Vasco.AAL2Wrap.VIRTUAL_TOKEN_GRACE_PERIOD"/> : valid value [1:364].<br/></description><br/>
            </item>
            <item>
            <description><see cref="F:Vasco.AAL2Wrap.VIRTUAL_TOKEN_REMAIN_USE"/> : valid value [0:254]. <br/></description><br/>
            </item>
            <item>
            <description><see cref="F:Vasco.AAL2Wrap.PIN_ENABLED"/> - valid values :<br/>
            1 (STATIC_PIN_ENABLED)<br/>
            2 (STATIC_PIN_DISABLED).<br/></description><br/>
            </item>
            <item>
            <description><see cref="F:Vasco.AAL2Wrap.PIN_MIN_LEN"/> : valid value [3:8].<br/></description><br/>
            </item>
            <item>
            <description><see cref="F:Vasco.AAL2Wrap.PIN_CH_FORCED"/> : 1 force PIN Change.<br/></description><br/>
            </item>
            <item>
            <description><see cref="F:Vasco.AAL2Wrap.ERROR_COUNT"/> : 0 Reset Error Counter.<br/></description><br/>
            </item>
            <item>
            <description><see cref="F:Vasco.AAL2Wrap.EVENT_VALUE"/> : valid value [0:4294967294].<br/>
            Set is possible only for event greater later than the current EVENT_VALUE
            </description><br/>
            </item>
            </list>
            </remarks>                                  
            <param name="bDpData"> byte[248] DIGIPASS application BLOB.
            <b>Upon return from the function call, this BLOB must be rewritten to the application database to reflect the changes.</b></param>
            <param name="Property"> Property we want to set.</param>
            <param name="PropertyValue"> Value for the specified property.</param>
            <seealso cref="M:Vasco.AAL2Wrap.getRetCode"/> 
            <seealso cref="M:Vasco.AAL2Wrap.getLastError"/> 
            <returns> return 0 if successful.</returns>
        </member>
        <member name="M:Vasco.AAL2Wrap.AAL2GenTLV(Vasco.AAL2Wrap.TTLVItem[],System.Int32,System.Byte[])">
            <summary>
            Generate EMV TLV.
            This function is reserved to VACMAN Controller for CTVS.
            </summary>
            <param name="Values">List of values.</param>
            <param name="ValueCount">Number of values.</param>
            <param name="bTLVData">Allocated array of bytes to receive the TLV data.</param>
            <returns>The length of the TLV data. To get the return code, the function getRetCode() should be called.</returns>
        </member>
        <member name="M:Vasco.AAL2Wrap.AAL2GenEMVBlobEx(System.Byte[],System.UInt32,System.UInt32,System.Boolean,System.Byte[],System.String)">
            <summary>
            Generate EMV application BLOB.
            This function is reserved to VACMAN Controller for CTVS SSM.
            </summary>
            <param name="bTLVData">The TLV data.</param>
            <param name="nTLVDataLength">The length of the TLV data.</param>
            <param name="EMVType">The EMV type.</param>
            <param name="isKeyIMK">Defines if the key is IMK.</param>
            <param name="KeyData">The key data (16 bytes).</param>
            <param name="SerialNum">The serial number.</param>
            <returns>A DIGIPASS object that contains the EMV application BLOB. To get the return code, the function getRetCode() should be called.</returns>
        </member>
        <member name="M:Vasco.AAL2Wrap.AAL2GenEMVBlobEx(System.Byte[],System.UInt32,System.UInt32,Vasco.Key,System.String)">
            <summary>
            Generate EMV application BLOB.
            This function is reserved to VACMAN Controller for CTVS.
            </summary>
            <param name="bTLVData">The TLV data.</param>
            <param name="nTLVDataLength">The length of the TLV data.</param>
            <param name="EMVType">The EMV type.</param>
            <param name="CryptoKey">Key containing the Key object to use with this EMV application BLOB.</param>
            <param name="SerialNum">The serial number.</param>
            <returns>A DIGIPASS object that contains the EMV application BLOB. To get the return code, the function <see cref="M:Vasco.AAL2Wrap.getRetCode"/> should be called.</returns>
        </member>
        <member name="M:Vasco.AAL2Wrap.AAL2GenerateChallenge(System.Byte[])">
            <summary>
            Returns a random Challenge.
            </summary>
            <remarks>
            If a user's DIGIPASS has been programmed to operate in Challenge/Response authentication
            mode, then the authentication application must generate a random Challenge suitable for the
            user's DIGIPASS, and then invite the user to enter the proposed Challenge in his / her DIGIPASS
            in order to build a dynamic Password. AAL2GenerateChallenge obtains the Challenge characteristics
            information of the user's DIGIPASS from DIGIPASS application BLOB DpData and builds the appropriate
            Challenge.
            </remarks>
            <seealso cref="M:Vasco.AAL2Wrap.AAL2VerifyPassword(System.Byte[],System.String,System.String)"/> 
            <seealso cref="M:Vasco.AAL2Wrap.getRetCode"/> 
            <seealso cref="M:Vasco.AAL2Wrap.getLastError"/> 
            <param name="bDpData"> byte[248] DIGIPASS application BLOB.
            <b>Upon return from the function call, this BLOB must be rewritten to the application database to reflect the changes.</b></param>
            <returns> return the random Challenge or <i>null</i>.</returns> 
        </member>
        <member name="M:Vasco.AAL2Wrap.AAL2GenerateChallenge(System.String@)">
            <summary>
            Returns a random Challenge.
            </summary>
            <remarks>
            If a user's DIGIPASS has been programmed to operate in Challenge/Response authentication
            mode, then the authentication application must generate a random Challenge suitable for the
            user's DIGIPASS, and then invite the user to enter the proposed Challenge in his / her DIGIPASS
            in order to build a dynamic Password. AAL2GenerateChallenge obtains the Challenge characteristics
            information of the user's DIGIPASS from DIGIPASS application BLOB DpData and builds the appropriate
            Challenge.
            </remarks>
            <seealso cref="M:Vasco.AAL2Wrap.AAL2VerifyPassword(System.String@,System.String,System.String)"/> 
            <seealso cref="M:Vasco.AAL2Wrap.getHostCode"/> 
            <seealso cref="M:Vasco.AAL2Wrap.getRetCode"/> 
            <seealso cref="M:Vasco.AAL2Wrap.getLastError"/> 
            <param name="DpData"> string DIGIPASS application BLOB.
            <b>Upon return from the function call, this BLOB must be rewritten to the application database to reflect the changes.</b></param>
            <returns> return the random Challenge or <i>null</i>.</returns> 
        </member>
        <member name="M:Vasco.AAL2Wrap.AAL2GenActivationCodeEx(System.Byte[],System.String,System.String,System.String,System.Int32)">
            <summary>
            Returns DIGIPASS [Encrypted] Activation Code or [X]FAD.<br/>
            </summary>
            <remarks>
            @deprecated Since version 3.11.1 you must use AAL2GenActivationCodeXErc(byte[][] bDpData_Table, short  Appli_Count, string StaticVectorIn, string SharedData, string Alea, int ActivationFlags, int XERCFlag)
            </remarks> 
        </member>
        <member name="M:Vasco.AAL2Wrap.AAL2GenActivationCodeEx(System.String@,System.String,System.String,System.String,System.Int32)">
            <summary>
            Returns DIGIPASS [Encrypted] Activation Code or [X]FAD.<br/>
            </summary>
            <remarks>
            @deprecated Since version 3.11.1 you must use AAL2GenActivationCodeXErc(string[] DpData_Table, short  Appli_Count, string StaticVectorIn, string SharedData, string Alea, int ActivationFlags, int XERCFlag)
            </remarks> 
        </member>
        <member name="M:Vasco.AAL2Wrap.AAL2GenActivationCodeXErc(System.Byte[][],System.Int16,System.String,System.String,System.String,System.Int32,System.Int32)">
            <summary>
            Returns DIGIPASS [Encrypted] Activation Code or [X]FAD and [Encrypted] Event Reactivation Counter.<br/>
            </summary>
            <remarks>
            This function generates activation data for Software DIGIPASS compliant with the standard one step activation
            (in the context of single device licensing; see Authentication Server Framework Product Guide). Will be generated:
            <ul>
            <li>Either an Activation Code that can be used for an offline activation workflow (Offline Activation Mode).
            This Activation Code will become an Encrypted Activation Code if the SharedData and/or Alea parameters are used.</li>
            <li>Or a Full Activation Data (FAD), that can be used for an online activation workflow (Online Activation Mode).
            This FAD will become an Encrypted Full Activation Data (XFAD) if the SharedData and/or Alea parameters are used.</li>
            </ul>
            For Software DIGIPASS based on DIGIPASS SDK 4.0 or higher, the Activation Mode depends on the
            content of the ActivationFlags input parameter.<br/>
            For the former Software DIGIPASS based on DIGIPASS SDK prior version 4.0, by default, the Activation mode
            depends on the Static Vector configuration and content. It can be forced to offline Activation Mode, setting the
            appropriate flag in the ActivationFlags input parameter.<br/>
            <br/>
            This function can also generate:
            <ul>
            <li>Either an Event Reactivation Counter (ERC), if both the SharedData and Alea parameters are null.</li>
            <li>Or an Encrypted Event Reactivation Counter (XERC), if the SharedData and/or Alea parameters are used.</li>
            </ul>
            <p></p>
            <b>Note:</b><br/>
            For Software DIGIPASS based on DIGIPASS SDK prior version 4.0, it is not allowed to use 
            a SharedData and/or Alea in case of <b>offline</b> Activation Mode.<br/>
            <p></p>
            <b style="color:#FF6600">Important Note:</b><br/>
            <span style="color:#FF6600">
            To generate activation data for a Software DIGIPASS using this function, it’s mandatory to provide all the corresponding customer DIGIPASS application BLOBs.
            The function will fail if all the customer DIGIPASS application BLOBs of the related Software DIGIPASS are not provided.<br/>
            </span>
            </remarks>
            <seealso cref="M:Vasco.AAL2Wrap.getRetCode"/> 
            <seealso cref="M:Vasco.AAL2Wrap.getLastError"/>
            <seealso cref="M:Vasco.AAL2Wrap.getActivationCode"/>
            <seealso cref="M:Vasco.AAL2Wrap.getXERC"/> 
            <seealso cref="M:Vasco.AAL2Wrap.getSerialNumber"/> 
            <param name="bDpData_Table"> byte[][248] DIGIPASS application BLOB table (maximum 8 BLOBs).
            <b>Upon return from the function call, these BLOBs must be rewritten to the application database to reflect the changes.</b></param>
            <param name="Appli_Count"> number of applications in the DIGIPASS application BLOB table</param>
            <param name="StaticVectorIn"> Software DIGIPASS parameter settings, up to 4094 characters</param>
            <param name="SharedData"> data used to encrypt the activation data </param>
            <param name="Alea"> encryption diversifier pseudo randomly generated </param>
            <param name="ActivationFlags"> flag specifying the activation mode, online or offline activation:
            <ul>
            <li>ActivationFlags = ACTV_DEFAULT (0x00000000) Default activation mode (Online for Software DIGIPASS based
            on DIGIPASS SDK 4.0 or higher, static vector parameter dependent - Online or Offline - for prior versions)</li>
            <li>ActivationFlags = ACTV_OFFLINE (0x00000001) Offline activation mode </li></ul></param>
            <param name="XERCFlag"> Event Reactivation Counter Flag.
            The XERCFlag determines if the Event Reactivation Counter or (Encrypted Event Reactivation Counter) must be generated:
            <ul>
            <li>XERCFlag = 0 : The [X]ERC will not be generated</li>
            <li>XERCFlag = 1 : The [X]ERC will be generated.</li></ul></param>
            <returns> return 0 if successful.</returns>
        </member>
        <member name="M:Vasco.AAL2Wrap.AAL2GenActivationCodeXErc(System.String[],System.Int16,System.String,System.String,System.String,System.Int32,System.Int32)">
            <summary>
            Returns DIGIPASS [Encrypted] Activation Code or [X]FAD and [Encrypted] Event Reactivation Counter.<br/>
            </summary>
            <remarks>
            This function generates activation data for Software DIGIPASS compliant with the standard one step activation
            (in the context of single device licensing; see Authentication Server Framework Product Guide). Will be generated:
            <ul>
            <li>Either an Activation Code that can be used for an offline activation workflow (Offline Activation Mode).
            This Activation Code will become an Encrypted Activation Code if the SharedData and/or Alea parameters are used.</li>
            <li>Or a Full Activation Data (FAD), that can be used for an online activation workflow (Online Activation Mode).
            This FAD will become an Encrypted Full Activation Data (XFAD) if the SharedData and/or Alea parameters are used.</li>
            </ul>
            For Software DIGIPASS based on DIGIPASS SDK 4.0 or higher, the Activation Mode depends on the
            content of the ActivationFlags input parameter.<br/>
            For the former Software DIGIPASS based on DIGIPASS SDK prior version 4.0, by default, the Activation mode
            depends on the Static Vector configuration and content. It can be forced to offline Activation Mode, setting the
            appropriate flag in the ActivationFlags input parameter.<br/>
            <br/>
            This function can also generate:
            <ul>
            <li>Either an Event Reactivation Counter (ERC), if both the SharedData and Alea parameters are null.</li>
            <li>Or an Encrypted Event Reactivation Counter (XERC), if the SharedData and/or Alea parameters are used.</li>
            </ul>
            <p></p>
            <b>Note:</b><br/>
            For Software DIGIPASS based on DIGIPASS SDK prior version 4.0, it is not allowed to use 
            a SharedData and/or Alea in case of <b>offline</b> Activation Mode.<br/>
            <p></p>
            <b style="color:#FF6600">Important Note:</b><br/>
            <span style="color:#FF6600">
            To generate activation data for a Software DIGIPASS using this function, it’s mandatory to provide all the corresponding customer DIGIPASS application BLOBs.
            The function will fail if all the customer DIGIPASS application BLOBs of the related Software DIGIPASS are not provided.<br/>
            </span>
            </remarks>
            <seealso cref="M:Vasco.AAL2Wrap.getRetCode"/> 
            <seealso cref="M:Vasco.AAL2Wrap.getLastError"/>
            <seealso cref="M:Vasco.AAL2Wrap.getActivationCode"/>
            <seealso cref="M:Vasco.AAL2Wrap.getXERC"/> 
            <seealso cref="M:Vasco.AAL2Wrap.getSerialNumber"/> 
            <param name="DpData_Table"> string[] DIGIPASS application BLOB table (maximum 8 BLOBs).
            <b>Upon return from the function call, these BLOBs must be rewritten to the application database to reflect the changes.</b></param>
            <param name="Appli_Count"> number of applications in the DIGIPASS application BLOB table</param>
            <param name="StaticVectorIn"> Software DIGIPASS parameter settings, up to 4094 characters</param>
            <param name="SharedData"> data used to encrypt the activation data </param>
            <param name="Alea"> encryption diversifier pseudo randomly generated </param>
            <param name="ActivationFlags"> flag specifying the activation mode, online or offline activation:
            <ul>
            <li>ActivationFlags = ACTV_DEFAULT (0x00000000) Default activation mode (Online for Software DIGIPASS based
            on DIGIPASS SDK 4.0 or higher, static vector parameter dependent - Online or Offline - for prior versions)</li>
            <li>ActivationFlags = ACTV_OFFLINE (0x00000001) Offline activation mode </li></ul></param>
            <param name="XERCFlag"> Event Reactivation Counter Flag.
            The XERCFlag determines if the Event Reactivation Counter or (Encrypted Event Reactivation Counter) must be generated:
            <ul>
            <li>XERCFlag = 0 : The [X]ERC will not be generated</li>
            <li>XERCFlag = 1 : The [X]ERC will be generated.</li></ul></param>
            <returns> return 0 if successful.</returns>
        </member>
        <member name="M:Vasco.AAL2Wrap.AAL2GenActivationDataRndKey(System.Byte[][],System.Int16,System.String,System.String,System.String,System.Int32)">
            <summary>
            Returns DIGIPASS [Encrypted] Activation Code or [X]FAD and [Encrypted] Event Reactivation Counter with Random DIGIPASS KEY generation.<br/>
            </summary>
            <remarks>
            This function generates activation data with Random DIGIPASS KEY generation for Software DIGIPASS compliant with the standard one step activation
            (in the context of single device licensing; see Authentication Server Framework Product Guide). Will be generated:<br/>
            <ul>
            <li>Either an Activation Code that can be used for an offline activation workflow (Offline Activation Mode).
            This Activation Code will become an Encrypted Activation Code if the SharedData and/or Alea parameters are used.</li>
            <li>Or a Full Activation Data (FAD), that can be used for an online activation workflow (Online Activation Mode).
            This FAD will become an Encrypted Full Activation Data (XFAD) if the SharedData and/or Alea parameters are used.</li>
            </ul>
            <p></p>
            For Software DIGIPASS based on DIGIPASS SDK 4.0 or higher, the Activation Mode depends on the
            content of the ActivationFlags input parameter.
            <p></p>
            For the former Software DIGIPASS based on DIGIPASS SDK prior version 4.0, by default, the Activation mode
            depends on the Static Vector configuration and content. It can be forced to offline Activation Mode, setting the
            appropriate flag in the ActivationFlags input parameter.
            <p></p>
            This function will also generate:
            <ul>
            <li>Either an Event Reactivation Counter (ERC), if both the SharedData and Alea parameters are null.</li>
            <li>Or an Encrypted Event Reactivation Counter (XERC), if the SharedData and/or Alea parameters are used.</li>
            </ul>
            <p></p>
            <b>Note:</b><br/>
            For Software DIGIPASS based on DIGIPASS SDK prior version 4.0, it is not allowed to use 
            a SharedData and/or Alea in case of <b>offline</b> Activation Mode.<br/>
            <p></p>
            <b style="color:#FF6600">Important Notes:</b><br/>
            <ul>
            <li style="color:#FF6600">To generate activation data for a Software DIGIPASS using this function, it’s mandatory <b>to provide all the corresponding customer DIGIPASS application BLOBs</b>.
            The function will fail if all the customer DIGIPASS application BLOBs of the related Software DIGIPASS are not provided.
            In addition, new random key will be generated for the Software DIGIPASS and will replace the previous one.</li>
            <li style="color:#FF6600">The generated [Encrypted] Activation Code (or [X]FAD) will be related to the new Software DIGIPASS key, and the
            DIGIPASS application BLOBs will be updated with the new Software DIGIPASS key.</li>
            </ul>
            </remarks>
            <seealso cref="M:Vasco.AAL2Wrap.getRetCode"/> 
            <seealso cref="M:Vasco.AAL2Wrap.getLastError"/>
            <seealso cref="M:Vasco.AAL2Wrap.getActivationCode"/>
            <seealso cref="M:Vasco.AAL2Wrap.getXERC"/> 
            <seealso cref="M:Vasco.AAL2Wrap.getSerialNumber"/> 
            <param name="bDpData_Table"> byte[][248] DIGIPASS application BLOB table updated with the new Software DIGIPASS key (maximum 8 BLOBs).
            <b>Upon return from the function call, these BLOBs must be rewritten to the application database to reflect the changes.</b></param>
            <param name="Appli_Count"> number of applications in the DIGIPASS application BLOB table</param>
            <param name="StaticVectorIn"> Software DIGIPASS parameter settings, up to 4094 characters</param>
            <param name="SharedData"> data used to encrypt the activation data </param>
            <param name="Alea"> encryption diversifier pseudo randomly generated </param>
            <param name="ActivationFlags"> flag specifying the activation mode, online or offline activation:
            <ul>
            <li>ActivationFlags = ACTV_DEFAULT (0x00000000) Default activation mode (Online for Software DIGIPASS based
            on DIGIPASS SDK 4.0 or higher, static vector parameter dependent - Online or Offline - for prior versions)</li>
            <li>ActivationFlags = ACTV_OFFLINE (0x00000001) Offline activation mode </li></ul></param>
            <returns> return 0 if successful.</returns>
        </member>
        <member name="M:Vasco.AAL2Wrap.AAL2GenActivationDataRndKey(System.String[],System.Int16,System.String,System.String,System.String,System.Int32)">
            <summary>
            Returns DIGIPASS [Encrypted] Activation Code or [X]FAD and [Encrypted] Event Reactivation Counter with Random DIGIPASS KEY generation.<br/>
            </summary>
            <remarks>
            This function generates activation data with Random DIGIPASS KEY generation for Software DIGIPASS compliant with the standard one step activation
            (in the context of single device licensing; see Authentication Server Framework Product Guide). Will be generated:<br/>
            <ul>
            <li>Either an Activation Code that can be used for an offline activation workflow (Offline Activation Mode).
            This Activation Code will become an Encrypted Activation Code if the SharedData and/or Alea parameters are used.</li>
            <li>Or a Full Activation Data (FAD), that can be used for an online activation workflow (Online Activation Mode).
            This FAD will become an Encrypted Full Activation Data (XFAD) if the SharedData and/or Alea parameters are used.</li>
            </ul>
            <p></p>
            For Software DIGIPASS based on DIGIPASS SDK 4.0 or higher, the Activation Mode depends on the
            content of the ActivationFlags input parameter.
            <p></p>
            For the former Software DIGIPASS based on DIGIPASS SDK prior version 4.0, by default, the Activation mode
            depends on the Static Vector configuration and content. It can be forced to offline Activation Mode, setting the
            appropriate flag in the ActivationFlags input parameter.
            <p></p>
            This function will also generate:
            <ul>
            <li>Either an Event Reactivation Counter (ERC), if both the SharedData and Alea parameters are null.</li>
            <li>Or an Encrypted Event Reactivation Counter (XERC), if the SharedData and/or Alea parameters are used.</li>
            </ul>
            <p></p>
            <b>Note:</b><br/>
            For Software DIGIPASS based on DIGIPASS SDK prior version 4.0, it is not allowed to use 
            a SharedData and/or Alea in case of <b>offline</b> Activation Mode.<br/>
            <p></p>
            <b style="color:#FF6600">Important Notes:</b><br/>
            <ul style="color:#FF6600">
            <li style="color:#FF6600">To generate activation data for a Software DIGIPASS using this function, it’s mandatory <b>to provide all the corresponding customer DIGIPASS application BLOBs</b>.
            The function will fail if all the customer DIGIPASS application BLOBs of the related Software DIGIPASS are not provided.
            In addition, new random key will be generated for the Software DIGIPASS and will replace the previous one.</li>
            <li style="color:#FF6600">The generated [Encrypted] Activation Code (or [X]FAD) will be related to the new Software DIGIPASS key, and the
            DIGIPASS application BLOBs will be updated with the new Software DIGIPASS key.</li>
            </ul>
            </remarks>
            <seealso cref="M:Vasco.AAL2Wrap.getRetCode"/> 
            <seealso cref="M:Vasco.AAL2Wrap.getLastError"/>
            <seealso cref="M:Vasco.AAL2Wrap.getActivationCode"/>
            <seealso cref="M:Vasco.AAL2Wrap.getXERC"/> 
            <seealso cref="M:Vasco.AAL2Wrap.getSerialNumber"/> 
            <param name="DpData_Table"> string[] DIGIPASS application BLOB table updated with the new Software DIGIPASS key (maximum 8 BLOBs).
            <b>Upon return from the function call, these BLOBs must be rewritten to the application database to reflect the changes.</b></param>
            <param name="Appli_Count"> number of applications in the DIGIPASS application BLOB table</param>
            <param name="StaticVectorIn"> Software DIGIPASS parameter settings, up to 4094 characters</param>
            <param name="SharedData"> data used to encrypt the activation data </param>
            <param name="Alea"> encryption diversifier pseudo randomly generated </param>
            <param name="ActivationFlags"> flag specifying the activation mode, online or offline activation:
            <ul>
            <li>ActivationFlags = ACTV_DEFAULT (0x00000000) Default activation mode (Online for Software DIGIPASS based
            on DIGIPASS SDK 4.0 or higher, static vector parameter dependent - Online or Offline - for prior versions)</li>
            <li>ActivationFlags = ACTV_OFFLINE (0x00000001) Offline activation mode </li></ul></param>
            <returns> return 0 if successful.</returns>        
        </member>
        <member name="M:Vasco.AAL2Wrap.AAL2GenMessageActivation1(System.Byte[],System.String,System.String,System.String,System.String)">
            <summary>
            This function generates a message activation1 from the Master Activation application (the license), the Static Vector, 
            the Message Vector, and the Activation Vector. This activation1 message allows activating a DIGIPASS license into the device.
            <p>
            It is only applicable to Hardware or Software DIGIPASS compliant with the multi-device two steps activation
            (in the context of multi-device licensing; see Authentication Server Framework Product Guide).
            </p>
            This activation1 message is used in the multi-device activation process for all DIGIPASS instances of a particular license.
            <p>
            A challenge may be used (optionally) in order to generate an activation1 message bound to a particular challenge.
            Using challenges allows generating different activation1 messages for the same license, in order to possibly control afterward that
            the Device Code returned by the DIGIPASS device corresponds to the license activated with a particular challenge.
            As such, for a given license, it becomes possible to create new Activation1 message and to invalidate the previous one. If used, the challenge 
            must be mandatorily 16 numeric or hexadecimal characters, and the same challenge will have to be reused afterward to validate the Device 
            Code returned by the DIGIPASS device with the function <see cref="M:Vasco.AAL2Wrap.AAL2VerifyDeviceCode(System.Byte[],System.String,System.String)"/>.
            </p>
            The function <see cref="M:Vasco.AAL2Wrap.AAL2GenerateChallenge(System.Byte[])"/> can be used to generate a 16 numeric characters challenge.
            </summary>
            <seealso cref="M:Vasco.AAL2Wrap.getRetCode"/> 
            <seealso cref="M:Vasco.AAL2Wrap.getLastError"/>
            <param name="bDpMAData">byte[248] DIGIPASS Master Activation application BLOB of the DIGIPASS serial number license to use for the activation.</param>
            <param name="Challenge">Optional string of 16 numeric or hexadecimal characters. This parameter holds the challenge which must be used to generate the Message Activation 1. If no challenge must be used to generate the Message Activation 1, this parameter must be <i>null</i>.</param>
            <param name="StaticVector">StaticVector Software DIGIPASS parameter settings, up to 4094 characters.</param>
            <param name="MessageVector">Contains the Message parameter settings (obtained during import).</param>
            <param name="ActivationVector">Contains the Activation Vector corresponding to the DIGIPASS serial number to activate (obtained during import).</param>
            <returns>Activation1 Message (Up to 4202 hexadecimal characters of string) or <i>null</i></returns>
        </member>
        <member name="M:Vasco.AAL2Wrap.AAL2GenMessageActivation1(System.String,System.String,System.String,System.String,System.String)">
             <summary>
            This function generates a message activation1 from the Master Activation application (the license), the Static Vector, 
            the Message Vector, and the Activation Vector. This activation1 message allows activating a DIGIPASS license into the device.
            <p></p>
             <b>Note:</b><br/>
            It is only applicable to Hardware or Software DIGIPASS compliant with the multi-device two steps activation
            (in the context of multi-device licensing; see Authentication Server Framework Product Guide).
            <p></p>
            This activation1 message is used in the multi-device activation process for all DIGIPASS instances of a particular license.
            <p>
             A challenge may be used (optionally) in order to generate an activation1 message bound to a particular challenge.
             Using challenges allows generating different activation1 messages for the same license, in order to possibly control afterward that
             the Device Code returned by the DIGIPASS device corresponds to the license activated with a particular challenge.
             As such, for a given license, it becomes possible to create new Activation1 message and to invalidate the previous one. If used, the challenge 
             must be mandatorily 16 numeric or hexadecimal characters, and the same challenge will have to be reused afterward to validate the Device 
             Code returned by the DIGIPASS device with the function <see cref="M:Vasco.AAL2Wrap.AAL2VerifyDeviceCode(System.String@,System.String,System.String)"/>. 
             </p>
            The function <see cref="M:Vasco.AAL2Wrap.AAL2GenerateChallenge(System.String@)"/> can be used to generate a 16 numeric characters challenge.
             </summary>
             <seealso cref="M:Vasco.AAL2Wrap.getRetCode"/> 
             <seealso cref="M:Vasco.AAL2Wrap.getLastError"/>
             <param name="DpMAData">string DIGIPASS Master Activation application BLOB of the DIGIPASS serial number license to use for the activation.</param>
             <param name="Challenge">Optional string of 16 numeric or hexadecimal characters. This parameter holds the challenge which must be used to generate the Message Activation 1. If no challenge must be used to generate the Message Activation 1, this parameter must be <i>null</i>.</param>
             <param name="StaticVector">StaticVector Software DIGIPASS parameter settings, up to 4094 characters.</param>
             <param name="MessageVector">Contains the Message parameter settings (obtained during import).</param>
             <param name="ActivationVector">Contains the Activation Vector corresponding to the DIGIPASS serial number to activate (obtained during import).</param>
             <returns>Activation1 Message (Up to 4202 hexadecimal characters of string) or <i>null</i></returns>
        </member>
        <member name="M:Vasco.AAL2Wrap.AAL2GetMessageProperties(System.String)">
            <summary>
            This function is used to obtain information on a secure channel message (being a request message, a response message or an information message).
            <p></p>
            In case of success, the function will return RespGetMessageProperties object containing :
            <ul>
            <li> Indication of the message protocol version </li>
            <li> Indication of the message type </li>
            <li> Indication of the message protection type </li>
            <li> Indication if the message is encrypted or not </li>
            <li> Indication if the message is signed (authenticity and integrity protection) or not </li> 
            <li> Indication of the serial number referenced into the message. </li>
            </ul>
            <p></p>
            <b>Note:</b><br/>
            The message properties retrieval functionality is applicable:
            <ul>
            <li> To hardware or software DIGIPASS compliant with the multi-device two-step activation (in the context of the multi-device licensing) 
            and if the secure channel feature has been ordered (configured by VASCO at the time of order). </li>
            <li> To hardware DIGIPASS based on the single device licensing model and able to perform operation based on secure channel protocol. </li>
            </ul>
            <p></p>
            Refer to the Authentication Server Framework Product Guide for more information.
            </summary>
            <seealso cref="M:Vasco.AAL2Wrap.getRetCode"/> 
            <seealso cref="M:Vasco.AAL2Wrap.getLastError"/>
            <seealso cref="M:Vasco.Response.RespGetMessageProperties.getMessageProtocolVersion"/> 
            <seealso cref="M:Vasco.Response.RespGetMessageProperties.getMessageType"/> 
            <seealso cref="M:Vasco.Response.RespGetMessageProperties.getMessageProtectionType"/> 
            <seealso cref="M:Vasco.Response.RespGetMessageProperties.getIsMessageEncrypted"/> 
            <seealso cref="M:Vasco.Response.RespGetMessageProperties.getIsMessageSigned"/> 
            <seealso cref="M:Vasco.Response.RespGetMessageProperties.getMessageSerial"/> 
            <param name="Message">Hexadecimal character string containing a request message, a response message or an information message.
            The string length must be a multiple of 2 with a maximum length of 1070 characters.</param>
            <returns>RespGetMessageProperties containing information secure channel message or <i>null</i></returns>
        </member>
        <member name="M:Vasco.AAL2Wrap.AAL2GenPayloadKeyBlob(System.Byte[],System.String)">
            <summary>
            This function generates a Payload Key BLOB embedding a Payload Key randomly generated.
            <p></p>
            <b>Note:</b><br/>
            It is only applicable to Hardware or Software DIGIPASS compliant with the multi-device two steps activation
            (in the context of multi-device licensing; see Authentication Server Framework Product Guide).
            <p></p>
            The secure channel possibly applicable after activation of a compliant DIGIPASS allows protection of the messages
            exchanged between the server side and the client side (request messages and deactivation messages). The secure channel
            requires to provision during the activation process a Payload Key represented on the server side by a Payload Key BLOB.
            <p></p>
            To allow the secure channel, one Payload Key BLOB will have to be generated once for each DIGIPASS serial number license.
            <p></p>
            <b>Note:</b><br/>
            Payload key BLOBs must be generated only if the DIGIPASS uses the secure channel feature and has to be post-provisionned
            (DPX does not contain Payload Key).<br/> 
            No payload key BLOB must be generated if the payload key BLOB has been obtained during import(<see cref="M:Vasco.AAL2Wrap.AAL2DPXGetTokenBlobsEx">AAL2DPXGetTokenBlobsEx</see>) 
            or if the DIGIPASS does not support secure channel feature.
            <p></p>
            The different DIGIPASS instances activated from one DIGIPASS serial number license must use the same Payload Key BLOB in order
            to be provisioned with the same Payload Key.
            </summary>
            <seealso cref="M:Vasco.AAL2Wrap.getRetCode"/> 
            <seealso cref="M:Vasco.AAL2Wrap.getLastError"/> 
            <param name="bDpMAData">byte[248] DIGIPASS Master Activation application BLOB of the DIGIPASS serial number license that will be used for the activations.
            <b>Upon return from the function call, this  BLOB must be rewritten to the application database to reflect the changes.</b></param>
            <param name="MessageVector">Contains the Message parameter settings (obtained during import).</param>
            <returns>88 characters string in case of success or <i>null</i> in case of error. This is the generated Payload Key BLOB for a DIGIPASS serial number license. <b>Upon return from the function call, this BLOB must be written to the application database.</b></returns>
        </member>
        <member name="M:Vasco.AAL2Wrap.AAL2GenPayloadKeyBlob(System.String@,System.String)">
            <summary>
            This function generates a Payload Key BLOB embedding a Payload Key randomly generated.
            <p></p>
            <b>Note:</b><br/>
            It is only applicable to Hardware or Software DIGIPASS compliant with the multi-device two steps activation
            (in the context of multi-device licensing; see Authentication Server Framework Product Guide).
            <p></p>
            The secure channel possibly applicable after activation of a compliant DIGIPASS allows protection of the messages
            exchanged between the server side and the client side (request messages and deactivation messages). The secure channel
            requires to provision during the activation process a Payload Key represented on the server side by a Payload Key BLOB.
            <p></p>
            To allow the secure channel, one Payload Key BLOB will have to be generated once for each DIGIPASS serial number license.
            <p></p>
            <b>Note:</b><br/>
            Payload key BLOBs must be generated only if the DIGIPASS uses the secure channel feature and has to be post-provisionned
            (DPX does not contain Payload Key).<br/> 
            No payload key BLOB must be generated if the payload key BLOB has been obtained during import(<see cref="M:Vasco.AAL2Wrap.AAL2DPXGetTokenBlobsEx">AAL2DPXGetTokenBlobsEx</see>) 
            or if the DIGIPASS does not support secure channel feature.
            <p></p>
            The different DIGIPASS instances activated from one DIGIPASS serial number license must use the same Payload Key BLOB in order
            to be provisioned with the same Payload Key.
            </summary>
            <seealso cref="M:Vasco.AAL2Wrap.getRetCode"/> 
            <seealso cref="M:Vasco.AAL2Wrap.getLastError"/> 
            <param name="DpMAData">string DIGIPASS Master Activation application BLOB of the DIGIPASS serial number license that will be used for the activations
            <b>Upon return from the function call, this  BLOB must be rewritten to the application database to reflect the changes.</b></param>
            <param name="MessageVector">Contains the Message parameter settings (obtained during import).</param>
            <returns>88 characters string. This is the generated Payload Key BLOB for a DIGIPASS serial number license. <b>Upon return from the function call, this BLOB must be written to the application database.</b></returns>
        </member>
        <member name="M:Vasco.AAL2Wrap.AAL2VerifyDeviceCode(System.Byte[],System.String,System.String)">
            <summary>
            This function verifies the Device Code provided by the DIGIPASS device using the MasterActivation application data. It also returns an object in case of <b>SUCCESS</b> containing :
            <ul>
            <li>DIGIPASS Device ID</li>
            <li>DIGIPASS Device Type</li>
            </ul>
            <p></p>
            <b>Note:</b><br/>
            It is only applicable to Hardware or Software DIGIPASS compliant with the multi-device two steps activation
            (in the context of multi-device licensing; see Authentication Server Framework Product Guide).
            <p></p>
            In case of a challenge has been used to generate the Activation1 message ({<see cref="M:Vasco.AAL2Wrap.AAL2GenMessageActivation1(System.Byte[],System.String,System.String,System.String,System.String)"/> )
            received by the DIGIPASS device, the same challenge is necessary to validate the Device Code.
            <p></p>
            <b style="color:#FF6600">Important Note:</b><br/>
            <span style="color:#FF6600">
            If challenge is not used, the kernel parameter <b>CheckChallenge</b> has to be set to <b>0</b> to disable the challenge checking.
            </span>
            <p></p>
            <para>
            <b>Score Based DIGIPASS</b>
            </para>
            For DIGIPASS devices that integrate the <b>Score-Based Algorithm</b>, the VACMAN Controller performs a score based authentication to validate the device code. 
            This allows to retrieve the DIGIPASS scoring value.<br/>
            Once VACMAN Controller has successfully validated the device code, the <b>Return Code</b> contains either SUCCESS (0) or SUCCESS with the relevant scoring warning code (between 10001 and 10007).<br/>
            </summary>
            <seealso cref="M:Vasco.AAL2Wrap.getRetCode"/> 
            <seealso cref="M:Vasco.AAL2Wrap.getLastError"/> 
            <seealso cref="M:Vasco.Response.RespVerifyDeviceCode.getDeviceID"/>
            <seealso cref="M:Vasco.Response.RespVerifyDeviceCode.getDeviceType"/>
            <param name="bDpMAData">byte[248] DIGIPASS Master Activation application BLOB of the DIGIPASS serial number license to use for the activation. <b>Upon return from the function call,
            this BLOB must be rewritten to the application database to reflect the changes.</b></param>
            <param name="Challenge">Optional string of 16 numeric or hexadecimal characters. This parameter must hold the challenge that was used initially to generate the Message Activation 1. If no challenge was used to generate the Message Activation 1, this parameter must be <i>null</i>.</param>
            <param name="DeviceCode">Contains the Device Code generated by the DIGIPASS device.</param>
            <returns>RespVerifyDeviceCode object containing information and data used for Multi-Device Activation service or <i>null</i></returns>
        </member>
        <member name="M:Vasco.AAL2Wrap.AAL2VerifyDeviceCode(System.String@,System.String,System.String)">
            <summary>
            This function verifies the Device Code provided by the DIGIPASS device using the MasterActivation application data. It also returns an object in case of <b>SUCCESS</b> containing :
            <ul>
            <li>DIGIPASS Device ID</li>
            <li>DIGIPASS Device Type</li>
            </ul>
            <p></p>
            <b>Note:</b><br/>
            It is only applicable to Hardware or Software DIGIPASS compliant with the multi-device two steps activation
            (in the context of multi-device licensing; see Authentication Server Framework Product Guide).
            <p></p>
            In case of a challenge has been used to generate the Activation1 message ({<see cref="M:Vasco.AAL2Wrap.AAL2GenMessageActivation1(System.Byte[],System.String,System.String,System.String,System.String)"/> )
            received by the DIGIPASS device, the same challenge is necessary to validate the Device Code.
            <p></p>
            <b style="color:#FF6600">Important Note:</b><br/>
            <span style="color:#FF6600">
            If challenge is not used, the kernel parameter <b>CheckChallenge</b> has to be set to <b>0</b> to disable the challenge checking.
            </span>
            <para>
            <b>Score Based DIGIPASS</b>
            </para>
            For DIGIPASS devices that integrate the <b>Score-Based Algorithm</b>, the VACMAN Controller performs a score based authentication to validate the device code. 
            This allows to retrieve the DIGIPASS scoring value.<br/>
            Once VACMAN Controller has successfully validated the device code, the <b>Return Code</b> contains either SUCCESS (0) or SUCCESS with the relevant scoring warning code (between 10001 and 10007).<br/>
            </summary>
            <seealso cref="M:Vasco.AAL2Wrap.getRetCode"/> 
            <seealso cref="M:Vasco.AAL2Wrap.getLastError"/> 
            <seealso cref="M:Vasco.Response.RespVerifyDeviceCode.getDeviceID"/>
            <seealso cref="M:Vasco.Response.RespVerifyDeviceCode.getDeviceType"/>
            <param name="DpMAData">string DIGIPASS Master Activation application BLOB of the DIGIPASS serial number license to use for the activation. <b>Upon return from the function call,
            this BLOB must be rewritten to the application database to reflect the changes.</b></param>
            <param name="Challenge">Optional string of 16 numeric or hexadecimal characters. This parameter must hold the challenge that was used initially to generate the Message Activation 1. If no challenge was used to generate the Message Activation 1, this parameter must be <i>null</i>.</param>
            <param name="DeviceCode">Contains the Device Code generated by the DIGIPASS device.</param>
            <returns>RespVerifyDeviceCode object containing information and data used for Multi-Device Activation service or <i>null</i></returns>
        </member>
        <member name="M:Vasco.AAL2Wrap.AAL2GenMessageActivation2(System.Byte[],System.String,System.String,System.String,System.String)">
            <summary>
            This function is used to generate a message activation 2 from the Master Activation application (the license), the Payload Key BLOB, 
            the Static Vector, the Message Vector, and the DeviceID provided. This activation2 message allows activating a DIGIPASS instance of a license into the device.
            <p></p>
            <b>Note:</b><br/>
            It is only applicable to Hardware or Software DIGIPASS compliant with the multi-device two steps activation
            (in the context of multi-device licensing; see Authentication Server Framework Product Guide).
            <p></p>
            <b>Note:</b><br/>
            Payload Key BLOB must be used with this function only if the secure channel feature has been ordered (configured by VASCO at the time of order).
            No Payload Key BLOB must be used (parameter NULL or empty string) if the secure channel feature has not been ordered.
            <p></p>
            In case of success, this function will also generate the new DIGIPASS instance application BLOBs, directly bound to the specific Device ID provided.
            <p></p>
            This function consumes a new sequence number each time it successfully generates a new DIGIPASS instance for a given license.  
            The number of instances which can be issued from a license is limited to the threshold defined between 1 and 99 for the license 
            (sequence number threshold value can be obtained during import of the Master Activation application).
            <p></p>
            Above the defined sequence number threshold for a given license, the function will reject the generation attempt and will fails.
            </summary>
            <seealso cref="M:Vasco.AAL2Wrap.getRetCode"/> 
            <seealso cref="M:Vasco.AAL2Wrap.getLastError"/> 
            <seealso cref="M:Vasco.Response.RespGenMessageActivation2.getActivation2Message"/>
            <seealso cref="M:Vasco.Response.RespGenMessageActivation2.getApplCount"/>
            <seealso cref="M:Vasco.Response.RespGenMessageActivation2.getAuthMode"/>
            <seealso cref="M:Vasco.Response.RespGenMessageActivation2.getbDpData"/>
            <seealso cref="M:Vasco.Response.RespGenMessageActivation2.getSeqNum"/>
            <seealso cref="M:Vasco.Response.RespGenMessageActivation2.getSerialAppl"/>
            <seealso cref="M:Vasco.Response.RespGenMessageActivation2.getDpData"/>
            <seealso cref="M:Vasco.Response.RespGenMessageActivation2.getTokenType"/>
            <param name="bDpMAData">byte[248] DIGIPASS Master Activation application BLOB of the DIGIPASS serial number license to use for the activation. <b>Upon return from the function call,
            this BLOB must be rewritten to the application database to reflect the changes.</b></param>
            <param name="PKBlob">Contains the Payload Key BLOB of the DIGIPASS serial number to activate.
            Mandatory if the secure channel feature has been ordered. Must be null or empty string if the secure channel feature has not been ordered.</param>
            <param name="StaticVector">StaticVector Software DIGIPASS parameter settings, up to 4094 characters.</param>
            <param name="MessageVector">Contains the Message parameter settings (obtained during import).</param>
            <param name="DeviceID">Hexadecimal string containing the device ID value of the DIGIPASS device to bind with (8 hexadecimal characters), obtained after DeviceCode validation</param>
            <returns>RespGenMessageActivation2 object containing information and data used for Multi-Device Activation service or <i>null</i></returns>
        </member>
        <member name="M:Vasco.AAL2Wrap.AAL2GenMessageActivation2(System.String@,System.String,System.String,System.String,System.String)">
            <summary>
            This function is used to generate a message activation 2 from the Master Activation application (the license), the Payload Key BLOB, 
            the Static Vector, the Message Vector, and the DeviceID provided. This activation2 message allows activating a DIGIPASS instance of a license into the device.
            <p></p>
            <b>Note:</b><br/>
            It is only applicable to Hardware or Software DIGIPASS compliant with the multi-device two steps activation
            (in the context of multi-device licensing; see Authentication Server Framework Product Guide).
            <p></p>
            <b>Note:</b><br/>
            Payload Key BLOB must be used with this function only if the secure channel feature has been ordered (configured by VASCO at the time of order).
            No Payload Key BLOB must be used (parameter NULL or empty string) if the secure channel feature has not been ordered.
            <p></p>
            In case of success, this function will also generate the new DIGIPASS instance application BLOBs, directly bound to the specific Device ID provided.
            <p></p>
            This function consumes a new sequence number each time it successfully generates a new DIGIPASS instance for a given license.  
            The number of instances which can be issued from a license is limited to the threshold defined between 1 and 99 for the license 
            (sequence number threshold value can be obtained during import of the Master Activation application).
            <p></p>
            Above the defined sequence number threshold for a given license, the function will reject the generation attempt and will fails.
            </summary>
            <seealso cref="M:Vasco.AAL2Wrap.getRetCode"/> 
            <seealso cref="M:Vasco.AAL2Wrap.getLastError"/> 
            <seealso cref="M:Vasco.Response.RespGenMessageActivation2.getActivation2Message"/>
            <seealso cref="M:Vasco.Response.RespGenMessageActivation2.getApplCount"/>
            <seealso cref="M:Vasco.Response.RespGenMessageActivation2.getAuthMode"/>
            <seealso cref="M:Vasco.Response.RespGenMessageActivation2.getbDpData"/>
            <seealso cref="M:Vasco.Response.RespGenMessageActivation2.getSeqNum"/>
            <seealso cref="M:Vasco.Response.RespGenMessageActivation2.getSerialAppl"/>
            <seealso cref="M:Vasco.Response.RespGenMessageActivation2.getDpData"/>
            <seealso cref="M:Vasco.Response.RespGenMessageActivation2.getTokenType"/>
            <param name="DpMAData">string DIGIPASS Master Activation application BLOB of the DIGIPASS serial number license to use for the activation. <b>Upon return from the function call,
            this BLOB must be rewritten to the application database to reflect the changes.</b></param>
            <param name="PKBlob">Contains the Payload Key BLOB of the DIGIPASS serial number to activate.
            Mandatory if the secure channel feature has been ordered. Must be null or empty string if the secure channel feature has not been ordered.</param>
            <param name="StaticVector">StaticVector Software DIGIPASS parameter settings, up to 4094 characters.</param>
            <param name="MessageVector">Contains the Message parameter settings (obtained during import).</param>
            <param name="DeviceID">Hexadecimal string containing the device ID value of the DIGIPASS device to bind with (8 hexadecimal characters), obtained after DeviceCode validation</param>
            <returns>RespGenMessageActivation2 object containing information and data used for Multi-Device Activation service or <i>null</i></returns>
        </member>
        <member name="M:Vasco.AAL2Wrap.AAL2GenMessageRequest(System.String,System.String,System.String)">
            <summary>
            This function is used to generate a request message from a clear request body, using the Payload Key embedded into the Payload Key BLOB. 
            <p></p>
            <b>Note:</b><br/>
            It is only applicable to hardware and software DIGIPASS compliant with the secure channel protocol.
            <p></p>
            The Payload Key BLOB must be the one corresponding to the DIGIPASS serial number the request message will target.
            </summary>
            <seealso cref="M:Vasco.AAL2Wrap.getRetCode"/> 
            <seealso cref="M:Vasco.AAL2Wrap.getLastError"/> 
            <param name="PKBlob">Contains the Payload Key Blob that has been generated for the DIGIPASS instances activated with a particular serial number license 
            (in case of multi-device licensing model) or that has been imported for the DIGIPASS token with a particular serial number license 
            (in case of single-device licensing model). The Payload Key Blob parameter is mandatory only if the information message is protected (encrypted and/or signed);</param>
            <param name="MessageVector">Contains the Message parameter settings (obtained during import).</param>
            <param name="RequestBody">Hexadecimal character string containing the clear request body to use for the RequestMessage to generate. String length must be multiple of 2 and maximum 1024</param>
            <returns>String Up to 1070 hexadecimal characters string containing the generated RequestMessage in case of success or <i>null</i></returns>
        </member>
        <member name="M:Vasco.AAL2Wrap.AAL2ProcMessageResponse(System.String,System.String,System.String)">
            <summary>
            This function is used to extract a clear response body from a response message, using the Payload Key embedded into the Payload Key Blob.
            <p></p>
            <b>Note:</b><br/>
            It is only applicable to hardware and software DIGIPASS compliant with the secure channel protocol.
            <p></p>
            In case of response message correctly processed and containing a Secure Channel request error detected by the device, the return code 
            is dependent on the secure channel request error code byte (return code = offset + code byte with offset = 5000). 
            <p></p>
            The Payload Key Blob, mandatory only if the response message is protected (encrypted and/or signed) must be mandatorily the one corresponding 
            to the DIGIPASS serial number of the client device that generated the response message.
            <p></p>
            For DIGIPASS client devices supporting the 2 way secure channel, the response message will be sent back by the device as a reply to a request message.
            <p></p>
            </summary>
            <seealso cref="M:Vasco.AAL2Wrap.getRetCode"/> 
            <seealso cref="M:Vasco.AAL2Wrap.getLastError"/> 
            <param name="PKBlob">PKBlob Contains the Payload Key Blob that has been generated for the DIGIPASS instances activated with a particular serial number license 
            (in case of multi-device licensing model) or that has been imported for the DIGIPASS token with a particular serial number license 
            (in case of single-device licensing model). The Payload Key Blob parameter is mandatory only if the information message is protected (encrypted and/or signed);</param>
            <param name="ResponseMessage">Hexadecimal character string containing the response message that has been generated by the DIGIPASS client device in reply to a request message.
            The string length must be a multiple of 2 with a maximum length of 1070 characters.</param>
            <param name="RequestMessage">Hexadecimal character string containing the request message that has been used by the DIGIPASS device to generate the response message. 
            The String length must be multiple of 2 with a maximum length of 1070 characters.</param>
            <returns>String of up to 1024 hexadecimal characters containing the clear response body extracted from the ResponseMessage in case of success or <i>null</i> in case of error.</returns>
        </member>
        <member name="M:Vasco.AAL2Wrap.AAL2ProcMessageInformation(System.String,System.String)">
            <summary>
            This function is used to extract a clear information body from an information message, using the Payload Key embedded into the Payload Key Blob.
            <p></p>
            <b>Note:</b><br/>
            The information message processing is only applicable to software DIGIPASS compliant with the secure channel protocol
            and able to generate secure channel information messages.
            <p></p>
            The Payload Key Blob, mandatory only if the response message is protected (encrypted and/or signed) must be mandatorily the one corresponding 
            to the DIGIPASS serial number of the client device that generated the response message.
            <p></p>
            For DIGIPASS client devices supporting the 2 way secure channel, the response message will be sent back by the device as a reply to a request message.
            <p></p>
            @param PKBlob Contains the Payload Key Blob that has been generated for the DIGIPASS instances activated with a particular serial number license 
            (in case of multi-device licensing model) or that has been imported for the DIGIPASS token with a particular serial number license 
            (in case of single-device licensing model). The Payload Key Blob parameter is mandatory only if the information message is protected (encrypted and/or signed);
            </summary>
            <seealso cref="M:Vasco.AAL2Wrap.getRetCode"/> 
            <seealso cref="M:Vasco.AAL2Wrap.getLastError"/> 
            <param name="PKBlob">Contains the Payload Key Blob that has been generated for the DIGIPASS instances activated with a particular serial number license 
            (in case of multi-device licensing model) or that has been imported for the DIGIPASS token with a particular serial number license 
            (in case of single-device licensing model). The Payload Key Blob parameter is mandatory only if the information message is protected (encrypted and/or signed);</param>
            <param name="InformationMessage">InformationMessage Hexadecimal character string containing the information message that has been generated by the DIGIPASS client device.
            The string length must be a multiple of 2 with a maximum length of 1070 characters.</param>
            <returns>String of up to 1024 hexadecimal characters containing the clear information body extracted from the InformationMessage in case of success or <i>null</i> in case of error.</returns>
        </member>
        <member name="M:Vasco.AAL2Wrap.AAL2GenMessageDeactivation(System.String,System.String,System.Int32)">
            <summary>
            This function generates a deactivation message from a Sequence Number, using the Payload Key embedded into the Payload Key BLOB. 
            <p></p>
            It is only applicable to Hardware or Software DIGIPASS compliant with the multi-device two steps activation
            (in the context of multi-device licensing; see Authentication Server Framework Product Guide).
            <p></p>
            The Payload Key BLOB must be the one corresponding to the DIGIPASS serial number the deactivation message will target.
            <p></p>
            Note: The deactivation message generation is only applicable if the secure channel feature has been ordered (configured by VASCO at the time of order).
            </summary>
            <seealso cref="M:Vasco.AAL2Wrap.getRetCode"/> 
            <seealso cref="M:Vasco.AAL2Wrap.getLastError"/> 
            <param name="PKBlob">Contains the Payload Key BLOB that has been generated for the DIGIPASS instances activated with a particular serial number license.</param>
            <param name="MessageVector">Contains the Message parameter settings (obtained during import).</param>
            <param name="SeqNum">This is the sequence number of the DIGIPASS instance to deactivate</param>
            <returns>String Up to 50 hexadecimal characters containing the generated Deactivation Message in case of success or <i>null</i> in case of error.</returns>
        </member>
        <member name="M:Vasco.AAL2Wrap.AAL2ChangeStaticPassword(System.Byte[],System.String,System.String)">
            <summary>
            Changes DIGIPASS Static Password.
            </summary>
            <remarks>
            This function is used in combination with DIGIPASS which can use a static password
            like e.g. DIGIPASS GO 1. This will allow an Administrator to provide a
            new Static Password on a mandatory basis. As this function is critical;
            only authenticated user may use it in a regular integration.
            </remarks>
            <seealso cref="M:Vasco.AAL2Wrap.getRetCode"/> 
            <seealso cref="M:Vasco.AAL2Wrap.getLastError"/> 
            <param name="bDpData"> byte[248] DIGIPASS application BLOB.
            <b>Upon return from the function call, this BLOB must be rewritten to the application database to reflect the changes.</b></param>
            <param name="Password1">New Static Password.</param>
            <param name="Password2">Static Password confirmation.</param>
            <returns> return 0 if successful.</returns>
        </member>
        <member name="M:Vasco.AAL2Wrap.AAL2ChangeStaticPassword(System.String@,System.String,System.String)">
            <summary>
            Changes DIGIPASS Static Password.
            </summary>
            <remarks>
            This function is used in combination with DIGIPASS which can use a static password
            like e.g. DIGIPASS GO 1. This will allow an Administrator to provide a
            new Static Password on a mandatory basis. As this function is critical;
            only authenticated user may use it in a regular integration.
            </remarks>
            <seealso cref="M:Vasco.AAL2Wrap.getRetCode"/> 
            <seealso cref="M:Vasco.AAL2Wrap.getLastError"/> 
            <param name="DpData"> string DIGIPASS application BLOB.
            <b>Upon return from the function call, this BLOB must be rewritten to the application database to reflect the changes.</b></param>
            <param name="Password1"> New Static PIN. Supported characters for the New Static PIN are: %&amp;'()*+,-./:;&lt;=&gt;?_0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz . The space character must not be used.</param>
            <param name="Password2"> New Static PIN confirmation.</param>
            <returns> return 0 if successful.</returns>
        </member>
        <member name="M:Vasco.AAL2Wrap.AAL2MXGenerateChallenge(System.Byte[],System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Returns a random Challenge.
            </summary>
            <remarks>
            Returns a concatenation of row and column ID.
            ex: 2E5B means cell 2E and cell 5B
            </remarks>
            <seealso cref="M:Vasco.AAL2Wrap.AAL2MXVerifyPassword(System.Byte[],System.Int32,System.String,System.String)"/> 
            <seealso cref="M:Vasco.AAL2Wrap.getRetCode"/> 
            <seealso cref="M:Vasco.AAL2Wrap.getLastError"/> 
            <param name="bDpData"> byte[248] DIGIPASS application BLOB.
            <b>Upon return from the function call, this BLOB must be rewritten to the application database to reflect the changes.</b></param>
            <param name="MXCardSequenceNumber">int representing a sequence number of the matrix card on up to 4 digits.</param>
            <param name="NumberRows">int representing a number of Matrix row.</param>
            <param name="NumberColumns">int representing a number of Matrix columns.</param>
            <param name="SecurityLevel">int representing a number of cells taken in count to generate a password.</param>
            <returns>return the random Challenge or <i>null</i>.</returns>
        </member>
        <member name="M:Vasco.AAL2Wrap.AAL2MXGenerateChallenge(System.String@,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Returns a random Challenge.
            </summary>
            <remarks>
            Returns a concatenation of row and column ID.
            ex: 2E5B means cell 2E and cell 5B
            </remarks>
            <seealso cref="M:Vasco.AAL2Wrap.AAL2MXVerifyPassword(System.String@,System.Int32,System.String,System.String)"/> 
            <seealso cref="M:Vasco.AAL2Wrap.getRetCode"/> 
            <seealso cref="M:Vasco.AAL2Wrap.getLastError"/> 
            <param name="DpData"> string DIGIPASS application BLOB.
            <b>Upon return from the function call, this BLOB must be rewritten to the application database to reflect the changes.</b></param>
            <param name="MXCardSequenceNumber">int representing a sequence number of the matrix card on up to 4 digits.</param>
            <param name="NumberRows">int representing a number of Matrix row.</param>
            <param name="NumberColumns">int representing a number of Matrix columns.</param>
            <param name="SecurityLevel">int representing a number of cells taken in count to generate a password.</param>
            <returns>return the random Challenge or <i>null</i>.</returns>
        </member>
        <member name="M:Vasco.AAL2Wrap.AAL2GenPassword(System.String@,System.String)">
            <summary>
            Generate DIGIPASS <b>OTP</b>
            </summary>
            <remarks>
            If Virtual DIGIPASS is supported and activated for the given DIGIPASS application BLOB,
            this function can be used to generate a dynamic one-time password.
            </remarks>
            <seealso cref="M:Vasco.AAL2Wrap.getHostCode"/> 
            <seealso cref="M:Vasco.AAL2Wrap.getRetCode"/> 
            <seealso cref="M:Vasco.AAL2Wrap.getLastError"/> 
            <param name="DpData"> string DIGIPASS application BLOB.
            <b>Upon return from the function call, this BLOB must be rewritten to the application database to reflect the changes.</b></param>
            <param name="Challenge"> string Up to 17 numeric characters, left justified, null terminated or right padded with spaces.
            This parameter holds the challenge which may have been proposed to the user to generate CodeToVerify.
            If no challenge was generated, this parameter should be <i>null</i>.</param>
            <returns> return the random Password or <i>null</i>.</returns> 
        </member>
        <member name="M:Vasco.AAL2Wrap.AAL2GenPassword(System.Byte[],System.String)">
            <summary>
            Generate DIGIPASS <b>OTP</b>
            </summary>
            <remarks>
            If Virtual DIGIPASS is supported and activated for the given DIGIPASS application BLOB,
            this function can be used to generate a dynamic one-time password.
            </remarks>
            <seealso cref="M:Vasco.AAL2Wrap.getHostCode"/> 
            <seealso cref="M:Vasco.AAL2Wrap.getRetCode"/> 
            <seealso cref="M:Vasco.AAL2Wrap.getLastError"/> 
            <param name="bDpData"> byte[248] DIGIPASS application BLOB.
            <b>Upon return from the function call, this BLOB must be rewritten to the application database to reflect the changes.</b></param>
            <param name="Challenge"> string Up to 17 numeric characters, left justified, null terminated or right padded with spaces.
            This parameter holds the challenge which may have been proposed to the user to generate CodeToVerify.
            If no challenge was generated, this parameter should be <i>null</i>.</param>
            <returns> return the random Password or <i>null</i>.</returns> 
        </member>
        <member name="M:Vasco.AAL2Wrap.AAL2GenPassword(System.Byte[],System.Byte[])">
            <summary>
            Generate DIGIPASS <b>OTP</b>
            </summary>
            <remarks>
            @deprecated Since version 3.10.1 you must use AAL2GenPassword(byte[] bDpData, string Challenge)
            </remarks> 
        </member>
        <member name="M:Vasco.AAL2Wrap.AAL2GenSignature(System.Byte[],System.String[],System.Int32,System.Int32)">
            <summary>
            Generate DIGIPASS <b>Signature</b>
            </summary>
            <remarks>
             This function is called passing the necessary data to perform signature generation, based on up to
             eight <b>SignedDataFields</b> .
             The exact number of valid data fields is given in <b>FieldCount</b>.
             If necessary, synchronization information may be passed using the <b>DeferredSignatureData</b> parameter.
            </remarks>
            <seealso cref="M:Vasco.AAL2Wrap.getHostCode"/> 
            <seealso cref="M:Vasco.AAL2Wrap.getRetCode"/> 
            <seealso cref="M:Vasco.AAL2Wrap.getLastError"/> 
            <param name="bDpData"> byte[248] DIGIPASS application BLOB.
            <b>Upon return from the function call, this BLOB must be rewritten to the application database to reflect the changes.</b></param>
            <param name="SignedDataFields">SignedDataFields up to 8 Strings of 16 characters maximum for DIGIPASS applications. EMV-CAP applications are not supported. 
            This parameter holds the 8 possible data fields to sign.</param>
            <param name="FieldCount">FieldCount numeric value from 1 to 8. Indicates the number of data fields to
             use from the <b>SignedDataFields</b> array.</param>
            <param name="DeferredSignatureData">
            <ul>
            <li> Must be 0 if signature is generated in online mode (kernel parameter OnlineSG=1 or 2).</li>
            <li> If signature is generated in offline mode with kernel parameter OnlineSG=0 or 3, this parameter can receive the date for the signature generation
            (number of elapsed seconds from January 1st 1970) or 0 (0 forces using the current time).</li>
            </ul>
            </param>
            <returns>Return a String Signature or <i>null</i></returns>
        </member>
        <member name="M:Vasco.AAL2Wrap.AAL2GenSignature(System.String@,System.String[],System.Int32,System.Int32)">
            <summary>
            Generate DIGIPASS <b>Signature</b>
            </summary>
            <remarks>
             This function is called passing the necessary data to perform signature generation, based on up to
             eight <b>SignedDataFields</b> .
             The exact number of valid data fields is given in <b>FieldCount</b>.
             If necessary, synchronization information may be passed using the <b>DeferredSignatureData</b> parameter.
            </remarks>
            <seealso cref="M:Vasco.AAL2Wrap.getHostCode"/> 
            <seealso cref="M:Vasco.AAL2Wrap.getRetCode"/> 
            <seealso cref="M:Vasco.AAL2Wrap.getLastError"/> 
            <param name="DpData"> string DIGIPASS application BLOB.
            <b>Upon return from the function call, this BLOB must be rewritten to the application database to reflect the changes.</b></param>
            <param name="SignedDataFields">SignedDataFields up to 8 Strings of 16 characters maximum for DIGIPASS applications. EMV-CAP applications are not supported. 
            This parameter holds the 8 possible data fields to sign.</param>
            <param name="FieldCount">FieldCount numeric value from 1 to 8. Indicates the number of data fields to
             use from the <b>SignedDataFields</b> array.</param>
            <param name="DeferredSignatureData">
            <ul>
            <li> Must be 0 if signature is generated in online mode (kernel parameter OnlineSG=1 or 2).</li>
            <li> If signature is generated in offline mode with kernel parameter OnlineSG=0 or 3, this parameter can receive the date for the signature generation
            (number of elapsed seconds from January 1st 1970) or 0 (0 forces using the current time).</li>
            </ul>
            </param>
            <returns>Return a String Signature or <i>null</i></returns>
        </member>
        <member name="M:Vasco.AAL2Wrap.AAL2MXGenAuthChar(System.String@,System.Int32,System.Int32,System.Int32)">
            <summary>
            Generates Matrix Card User Authentication code. This is the code print in the matrix cells
            </summary>
            <remarks>
            This function generates the content of matrix card cells
            and the associated return host code based on the DIGIPASS Matrix Card application BLOB.
            </remarks>
            <seealso cref="M:Vasco.AAL2Wrap.getRetCode"/> 
            <seealso cref="M:Vasco.AAL2Wrap.getLastError"/>
            <seealso cref="M:Vasco.AAL2Wrap.getHostCode"/>  
            <param name="DpData"> string DIGIPASS application BLOB.
            <b>Upon return from the function call, this BLOB must be rewritten to the application database to reflect the changes.</b></param>
            <param name="MXCardSequenceNumber">int containing the Matrix Card Sequence Number.</param>
            <param name="RowIndex">int containing the index of the cell row.</param>
            <param name="ColIndex">int containing the index of the cell column.</param>
            <returns> return string User authentication character. This is the content of the matrix card cell.
            Its length is determined by the response length field in the DIGIPASS Matrix Card application BLOB.</returns> 
        </member>
        <member name="M:Vasco.AAL2Wrap.AAL2MXGenAuthChar(System.Byte[],System.Int32,System.Int32,System.Int32)">
            <summary>
            Generates Matrix Card User Authentication code. This is the code print in the matrix cells
            </summary>
            <remarks>
            This function generates the content of matrix card cells
            and the associated return host code based on the DIGIPASS Matrix Card application BLOB.
            </remarks>
            <seealso cref="M:Vasco.AAL2Wrap.getRetCode"/> 
            <seealso cref="M:Vasco.AAL2Wrap.getLastError"/>
            <seealso cref="M:Vasco.AAL2Wrap.getHostCode"/>  
            <param name="bDpData"> byte[248] DIGIPASS application BLOB.
            <b>Upon return from the function call, this BLOB must be rewritten to the application database to reflect the changes.</b></param>
            <param name="MXCardSequenceNumber">int containing the Matrix Card Sequence Number.</param>
            <param name="RowIndex">int containing the index of the cell row.</param>
            <param name="ColIndex">int containing the index of the cell column.</param>
            <returns> return string User authentication character. This is the content of the matrix card cell.
            Its length is determined by the response length field in the DIGIPASS Matrix Card application BLOB.</returns> 
        </member>
        <member name="M:Vasco.AAL2Wrap.AAL2VerifyAll(System.Byte[],System.String,System.String[],System.Int32,System.Int32,System.UInt32)">
            <summary>
            none description -- reserved use
            </summary>
        </member>
        <member name="M:Vasco.AAL2Wrap.AAL2VerifyAll(System.String@,System.String,System.String[],System.Int32,System.Int32,System.UInt32)">
            <summary>
            none description -- reserved use
            </summary>
        </member>
        <member name="M:Vasco.AAL2Wrap.AAL2VerifyAllEs(System.Byte[],System.String,System.String[],System.Int32,System.Int32,System.UInt32,System.String)">
            <summary>
            none description -- reserved use
            </summary>
        </member>
        <member name="M:Vasco.AAL2Wrap.AAL2VerifyAllEs(System.String@,System.String,System.String[],System.Int32,System.Int32,System.UInt32,System.String)">
            <summary>
            none description -- reserved use
            </summary>
        </member>
        <member name="M:Vasco.AAL2Wrap.AAL2VerifyPassword(System.Byte[],System.String,System.String)">
            <summary>
            Verifies a given Password.
            </summary>
            <remarks>
            Performs DIGIPASS owner's authentication by controlling if a given DIGIPASS
            generated dynamic Password is valid for a specified DIGIPASS application
            described by its DIGIPASS application BLOB.
            Optionally, the previously generated Challenge is also passed to this function.
            <para>
            <b>Integration specifics of one-button tokens (GO1, GO3, GO5 etc.)</b>
            </para>
            This function can also be used for static PIN management for DIGIPASS GO devices supporting the server static PIN. 
            In this case a password could have different appearances as in the examples below:
            <list type="bullet">
            <item>
            <description>Regular Password authentication request <span class="red">89574526</span> No static PIN.</description>
            </item>
            <item>
            <description>Same authentication request in combination with Static PIN usage <span class="green">1234</span><span class="red">89574526</span>, 
            the Static PIN is entered before the Dynamic Password, the AAL2VerifyPasswordHSM function will evaluate Static PIN and Dynamic Password in sequence.</description>
            </item>
            <item>
            <description>Same authentication request in combination with Static PIN usage and a request for PIN Change <span class="green">1234</span><span class="red">89574526</span><span class="blue">4321</span>4321, the Static PIN is entered before the Dynamic Password and both New PIN + New PIN confirmation are entered after. The AAL2VerifyPasswordHSM function will evaluate Static 
            PIN and Dynamic Password in sequence then process for a PIN change.</description>
            </item>
            </list> 
            <para>
            <b>Score Based DIGIPASS</b>
            </para>
            For DIGIPASS devices that integrate the <b>Score-Based Algorithm</b>, the VACMAN Controller performs a score based authentication.
            This allows to retrieve the DIGIPASS scoring value.<br/>
            Once VACMAN Controller has successfully validated a password, it returns either SUCCESS or SUCCESS with the relevant scoring warning code (see bellow).<br/>
            </remarks>
            <seealso cref="M:Vasco.AAL2Wrap.AAL2GenerateChallenge(System.Byte[])"/> 
            <seealso cref="M:Vasco.AAL2Wrap.getHostCode"/> 
            <seealso cref="M:Vasco.AAL2Wrap.getRetCode"/> 
            <seealso cref="M:Vasco.AAL2Wrap.getLastError"/> 
            <param name="bDpData"> byte[248] DIGIPASS application BLOB.
            <b>Upon return from the function call, this BLOB must be rewritten to the application database to reflect the changes.</b></param>
            <param name="Password"> Password String containing the dynamic Password.</param>
            <param name="Challenge"> Challenge String containing the previously generated Challenge (for challenge / response authentication).</param>
            <returns>0 if successful, value between 10001 and 10007 if successful with scoring warning code</returns>
        </member>
        <member name="M:Vasco.AAL2Wrap.AAL2VerifyPassword(System.String@,System.String,System.String)">
            <summary>
            Verifies a given Password.
            </summary>
            <remarks>
            Performs DIGIPASS owner's authentication by controlling if a given DIGIPASS
            generated dynamic Password is valid for a specified DIGIPASS application
            described by its DIGIPASS application BLOB.
            Optionally, the previously generated Challenge is also passed to this function.
            <para>
            <b>Integration specifics of one-button tokens (GO1, GO3, GO5 etc.)</b>
            </para>
            This function can also be used for static PIN management for DIGIPASS GO devices supporting the server static PIN. 
            In this case a password could have different appearances as in the examples below:
            <list type="bullet">
            <item>
            <description>Regular Password authentication request <span class="red">89574526</span> No static PIN.</description>
            </item>
            <item>
            <description>Same authentication request in combination with Static PIN usage <span class="green">1234</span><span class="red">89574526</span>, 
            the Static PIN is entered before the Dynamic Password, the AAL2VerifyPasswordHSM function will evaluate Static PIN and Dynamic Password in sequence.</description>
            </item>
            <item>
            <description>Same authentication request in combination with Static PIN usage and a request for PIN Change <span class="green">1234</span><span class="red">89574526</span><span class="blue">4321</span>4321, the Static PIN is entered before the Dynamic Password and both New PIN + New PIN confirmation are entered after. The AAL2VerifyPasswordHSM function will evaluate Static 
            PIN and Dynamic Password in sequence then process for a PIN change.</description>
            </item>
            </list>     
            <para>
            <b>Score Based DIGIPASS</b>
            </para>
            For DIGIPASS devices that integrate the <b>Score-Based Algorithm</b>, the VACMAN Controller performs a score based authentication.
            This allows to retrieve the DIGIPASS scoring value.<br/>
            Once VACMAN Controller has successfully validated a password, it returns either SUCCESS or SUCCESS with the relevant scoring warning code (see bellow).<br/>
            </remarks>
            <seealso cref="M:Vasco.AAL2Wrap.AAL2GenerateChallenge(System.String@)"/> 
            <seealso cref="M:Vasco.AAL2Wrap.getHostCode"/> 
            <seealso cref="M:Vasco.AAL2Wrap.getRetCode"/> 
            <seealso cref="M:Vasco.AAL2Wrap.getLastError"/> 
            <param name="DpData"> string DIGIPASS application BLOB.
            <b>Upon return from the function call, this BLOB must be rewritten to the application database to reflect the changes.</b></param>
            <param name="Password">Password String containing the dynamic Password.</param>
            <param name="Challenge">Challenge String containing the previously generated Challenge (for challenge / response authentication).</param>
            <returns>0 if successful, value between 10001 and 10007 if successful with scoring warning code</returns>
        </member>
        <member name="M:Vasco.AAL2Wrap.AAL2VerifyPasswordEs(System.Byte[],System.String,System.String,System.String)">
            <summary>
            Verifies a given Password with enhanced security.
            </summary>
            <remarks>
            Performs DIGIPASS owner's authentication by controlling if a given DIGIPASS
            generated dynamic Password is valid for a specified DIGIPASS application
            described by its DIGIPASS application BLOB.
            Optionally, the previously generated Challenge is also passed to this function.
            This function enhances the security by using the server's public key as seed.
            <para>
            <b>Integration specifics of one-button tokens (GO1, GO3, GO5 etc.)</b>
            </para>
            This function can also be used for static PIN management for DIGIPASS GO devices supporting the server static PIN. 
            In this case a password could have different appearances as in the examples below:
            <list type="bullet">
            <item>
            <description>Regular Password authentication request <span class="red">89574526</span> No static PIN.</description>
            </item>
            <item>
            <description>Same authentication request in combination with Static PIN usage <span class="green">1234</span><span class="red">89574526</span>, 
            the Static PIN is entered before the Dynamic Password, the AAL2VerifyPasswordHSM function will evaluate Static PIN and Dynamic Password in sequence.</description>
            </item>
            <item>
            <description>Same authentication request in combination with Static PIN usage and a request for PIN Change <span class="green">1234</span><span class="red">89574526</span><span class="blue">4321</span>4321, the Static PIN is entered before the Dynamic Password and both New PIN + New PIN confirmation are entered after. The AAL2VerifyPasswordHSM function will evaluate Static 
            PIN and Dynamic Password in sequence then process for a PIN change.</description>
            </item>
            </list>     
            <para>
            <b>Score Based DIGIPASS</b>
            </para>
            For DIGIPASS devices that integrate the <b>Score-Based Algorithm</b>, the VACMAN Controller performs a score based authentication.
            This allows to retrieve the DIGIPASS scoring value.<br/>
            Once VACMAN Controller has successfully validated a password, it returns either SUCCESS or SUCCESS with the relevant scoring warning code (see bellow).<br/>
            </remarks>
            <seealso cref="M:Vasco.AAL2Wrap.AAL2GenerateChallenge(System.Byte[])"/> 
            <seealso cref="M:Vasco.AAL2Wrap.getHostCode"/> 
            <seealso cref="M:Vasco.AAL2Wrap.getRetCode"/> 
            <seealso cref="M:Vasco.AAL2Wrap.getLastError"/> 
            <param name="bDpData"> byte[248] DIGIPASS application BLOB.
            <b>Upon return from the function call, this BLOB must be rewritten to the application database to reflect the changes.</b></param>
            <param name="Password"> Password String containing the dynamic Password.</param>
            <param name="Challenge"> Challenge String containing the previously generated Challenge (for challenge / response authentication).</param>
            <param name="ServerPublicKey"> ServerPublicKey String containing the Server's public encryption key (Hexadecimal characters). This parameter is used as a diversifier to prevent Man in the Middle attack. If this parameter is <i>null</i> , the diversification will not be done.</param>
            <returns>0 if successful, value between 10001 and 10007 if successful with scoring warning code</returns>
        </member>
        <member name="M:Vasco.AAL2Wrap.AAL2VerifyPasswordEs(System.String@,System.String,System.String,System.String)">
            <summary>
            Verifies a given Password with enhanced security.
            </summary>
            <remarks>
            Performs DIGIPASS owner's authentication by controlling if a given DIGIPASS
            generated dynamic Password is valid for a specified DIGIPASS application
            described by its DIGIPASS application BLOB.
            Optionally, the previously generated Challenge is also passed to this function.
            This function can support enhanced security feature with using the server's public key as challenge diversifier.
            <para>
            <b>Integration specifics of one-button tokens (GO1, GO3, GO5 etc.)</b>
            </para>
            This function can also be used for static PIN management for DIGIPASS GO devices supporting the server static PIN. 
            In this case a password could have different appearances as in the examples below:
            <list type="bullet">
            <item>
            <description>Regular Password authentication request <span class="red">89574526</span> No static PIN.</description>
            </item>
            <item>
            <description>Same authentication request in combination with Static PIN usage <span class="green">1234</span><span class="red">89574526</span>, 
            the Static PIN is entered before the Dynamic Password, the AAL2VerifyPasswordHSM function will evaluate Static PIN and Dynamic Password in sequence.</description>
            </item>
            <item>
            <description>Same authentication request in combination with Static PIN usage and a request for PIN Change <span class="green">1234</span><span class="red">89574526</span><span class="blue">4321</span>4321, the Static PIN is entered before the Dynamic Password and both New PIN + New PIN confirmation are entered after. The AAL2VerifyPasswordHSM function will evaluate Static 
            PIN and Dynamic Password in sequence then process for a PIN change.</description>
            </item>
            </list>     
            <para>
            <b>Score Based DIGIPASS</b>
            </para>
            For DIGIPASS devices that integrate the <b>Score-Based Algorithm</b>, the VACMAN Controller performs a score based authentication.
            This allows to retrieve the DIGIPASS scoring value.<br/>
            Once VACMAN Controller has successfully validated a password, it returns either SUCCESS or SUCCESS with the relevant scoring warning code (see bellow).<br/>
            </remarks>
            <seealso cref="M:Vasco.AAL2Wrap.AAL2GenerateChallenge(System.String@)"/> 
            <seealso cref="M:Vasco.AAL2Wrap.getHostCode"/> 
            <seealso cref="M:Vasco.AAL2Wrap.getRetCode"/> 
            <seealso cref="M:Vasco.AAL2Wrap.getLastError"/> 
            <param name="DpData"> string DIGIPASS application BLOB.
            <b>Upon return from the function call, this BLOB must be rewritten to the application database to reflect the changes.</b></param>
            <param name="Password">Password String containing the dynamic Password.</param>
            <param name="Challenge">Challenge String containing the previously generated Challenge (for challenge / response authentication).</param>
            <param name="ServerPublicKey"> ServerPublicKey String containing the Server's public encryption key (Hexadecimal characters). This parameter is used as a diversifier to prevent Man in the Middle attack. If this parameter is <i>null</i> , the diversification will not be done.</param>
            <returns>0 if successful, value between 10001 and 10007 if successful with scoring warning code</returns>
        </member>
        <member name="M:Vasco.AAL2Wrap.AAL2MXVerifyPassword(System.Byte[],System.Int32,System.String,System.String)">
            <summary>
            Verifies a given Password.
            </summary>
            <remarks>
            Performs DIGIPASS owner's authentication by controlling if a given DIGIPASS
            generated dynamic Password is valid for a specified DIGIPASS application
            described by its DIGIPASS application BLOB.
            Optionally, the previously generated Challenge is also passed to this function.
            </remarks>
            <seealso cref="M:Vasco.AAL2Wrap.AAL2MXGenerateChallenge(System.Byte[],System.Int32,System.Int32,System.Int32,System.Int32)"/> 
            <seealso cref="M:Vasco.AAL2Wrap.getHostCode"/> 
            <seealso cref="M:Vasco.AAL2Wrap.getRetCode"/> 
            <seealso cref="M:Vasco.AAL2Wrap.getLastError"/> 
            <param name="bDpData"> byte[248] DIGIPASS application BLOB.
            <b>Upon return from the function call, this BLOB must be rewritten to the application database to reflect the changes.</b></param>
            <param name="MXCardSequenceNumber">int containing the sequence number of the card.</param>
            <param name="Challenge">Challenge String containing the previously generated Challenge (for challenge / response authentication).</param>
            <param name="Password">Password String containing the dynamic Password.</param>
            <returns> returns 0 if successful </returns>
        </member>
        <member name="M:Vasco.AAL2Wrap.AAL2MXVerifyPassword(System.String@,System.Int32,System.String,System.String)">
            <summary>
            Verifies a given Password.
            </summary>
            <remarks>
            Performs DIGIPASS owner's authentication by controlling if a given DIGIPASS
            generated dynamic Password is valid for a specified DIGIPASS application
            described by its DIGIPASS application BLOB.
            Optionally, the previously generated Challenge is also passed to this function.
            </remarks>
            <seealso cref="M:Vasco.AAL2Wrap.AAL2MXGenerateChallenge(System.String@,System.Int32,System.Int32,System.Int32,System.Int32)"/> 
            <seealso cref="M:Vasco.AAL2Wrap.getHostCode"/> 
            <seealso cref="M:Vasco.AAL2Wrap.getRetCode"/> 
            <seealso cref="M:Vasco.AAL2Wrap.getLastError"/> 
            <param name="DpData"> string DIGIPASS application BLOB.
            <b>Upon return from the function call, this BLOB must be rewritten to the application database to reflect the changes.</b></param>
            <param name="MXCardSequenceNumber">int containing the sequence number of the card.</param>
            <param name="Challenge">Challenge String containing the previously generated Challenge (for challenge / response authentication).</param>
            <param name="Password">Password String containing the dynamic Password.</param>
            <returns> returns 0 if successful </returns>
        </member>
        <member name="M:Vasco.AAL2Wrap.AAL2VerifySignature(System.Byte[],System.String,System.String[],System.Int32,System.Int32)">
             <summary>
            Checks DIGIPASS Signature.
             </summary>
             <remarks>
             This function is called passing the necessary data to perform signature validation and
             integrity control, based on the Signature code generated by the user's DIGIPASS, and up to
             eight SignedDataFields on which authentication and integrity control are to be performed.
             The exact number of valid data fields is given in FieldCount.
             If necessary, a synchronization information may be passed using the DeferredSignatureData parameter.
             <p></p>
             <para>
             <b>Score Based DIGIPASS</b>
             </para>
             For DIGIPASS devices that integrate the <b>Score-Based Algorithm</b>, the VACMAN Controller performs a score based signature validation.
             This allows to retrieve the DIGIPASS scoring value.<br/>
             Once VACMAN Controller has successfully validated a signature, it returns either SUCCESS or SUCCESS with the relevant scoring warning code (see bellow).<br/>
             </remarks>
             <seealso cref="M:Vasco.AAL2Wrap.getHostCode"/> 
             <seealso cref="M:Vasco.AAL2Wrap.getRetCode"/> 
             <seealso cref="M:Vasco.AAL2Wrap.getLastError"/> 
             <param name="bDpData"> byte[248] DIGIPASS application BLOB.
             <b>Upon return from the function call, this BLOB must be rewritten to the application database to reflect the changes.</b></param>
             <param name="Signature"> Signature up to 17+24 numeric or hexadecimal characters.</param>
             <param name="SignedDataFields">SignedDataFields up to 8 Strings of 16 characters maximum for DIGIPASS applications and 10 characters maximum for EMV applications. 
             This parameter holds the 8 possible data fields that are entered in the DIGIPASS to generate a signature.</param>
             <param name="FieldCount"> FieldCount numeric value from 1 to 8. Indicates the number of data fields to use from the SignedDataFields array.</param>
             <param name="DeferredSignatureData">
             <ul>
             <li> Must be 0 if signature is validated in online mode (kernel parameter OnlineSG=1 or 2).</li>
             <li> If signature is validated in offline mode with kernel parameter OnlineSG=0, this parameter can receive the DIGIPASS date of the signature generation
             (number of elapsed seconds from January 1st 1970) or 0 (0 forces using the current time) Important: If &gt; 0, the parameter filled must be the DIGIPASS time, and not the host time.</li>
             <li> If signature is validated in offline mode with kernel parameter OnlineSG=3, this parameter MUST receive the counter of the DIGIPASS used for the signature generation.</li>
             </ul>
             <p></p>
             <b style="color:#FF6600">Important Note:</b><br/>
             <span style="color:#FF6600">
             This function is used to perform signature validation on standard signature process involving up to eight signed data fields.<br/>
             This function cannot be used to perform signature validation of a Secure Channel transaction (signature based on a Secure Channel request message).
             For signature validation of a Secure Channel transaction, AAL2VerifyMessageSignature must be used instead of AAL2VerifySignature.
             </span>
             </param>
             <returns>0 if successful, value between 10001 and 10007 if successful with scoring warning code</returns>
        </member>
        <member name="M:Vasco.AAL2Wrap.AAL2VerifySignature(System.String@,System.String,System.String[],System.Int32,System.Int32)">
             <summary>
            Checks DIGIPASS Signature.
             </summary>
             <remarks>
             This function is called passing the necessary data to perform signature validation and
             integrity control, based on the Signature code generated by the user's DIGIPASS, and up to
             eight SignedDataFields on which authentication and integrity control are to be performed.
             The exact number of valid data fields is given in FieldCount.
             If necessary, a synchronization information may be passed using the DeferredSignatureData parameter.
             <p></p>
             <para>
             <b>Score Based DIGIPASS</b>
             </para>
             For DIGIPASS devices that integrate the <b>Score-Based Algorithm</b>, the VACMAN Controller performs a score based signature validation.
             This allows to retrieve the DIGIPASS scoring value.<br/>
             Once VACMAN Controller has successfully validated a signature, it returns either SUCCESS or SUCCESS with the relevant scoring warning code (see bellow).<br/>
             </remarks>
             <seealso cref="M:Vasco.AAL2Wrap.getHostCode"/> 
             <seealso cref="M:Vasco.AAL2Wrap.getRetCode"/> 
             <seealso cref="M:Vasco.AAL2Wrap.getLastError"/> 
             <param name="DpData"> string DIGIPASS application BLOB.
             <b>Upon return from the function call, this BLOB must be rewritten to the application database to reflect the changes.</b></param>
             <param name="Signature"> Signature up to 17+24 numeric or hexadecimal characters.</param>
             <param name="SignedDataFields">SignedDataFields up to 8 Strings of 16 characters maximum for DIGIPASS applications and 10 characters maximum for EMV applications. 
             This parameter holds the 8 possible data fields that are entered in the DIGIPASS to generate a signature.</param>
             <param name="FieldCount"> FieldCount numeric value from 1 to 8. Indicates the number of data fields to use from the SignedDataFields array.</param>
             <param name="DeferredSignatureData">
             <ul>
             <li> Must be 0 if signature is validated in online mode (kernel parameter OnlineSG=1 or 2).</li>
             <li> If signature is validated in offline mode with kernel parameter OnlineSG=0, this parameter can receive the DIGIPASS date of the signature generation
             (number of elapsed seconds from January 1st 1970) or 0 (0 forces using the current time) Important: If &gt; 0, the parameter filled must be the DIGIPASS time, and not the host time.</li>
             <li> If signature is validated in offline mode with kernel parameter OnlineSG=3, this parameter MUST receive the counter of the DIGIPASS used for the signature generation.</li>
             </ul>
             <p></p>
             <b style="color:#FF6600">Important Note:</b><br/>
             <span style="color:#FF6600">
             This function is used to perform signature validation on standard signature process involving up to eight signed data fields.<br/>
             This function cannot be used to perform signature validation of a Secure Channel transaction (signature based on a Secure Channel request message).
             For signature validation of a Secure Channel transaction, AAL2VerifyMessageSignature must be used instead of AAL2VerifySignature.
             </span>
             </param>
             <returns>0 if successful, value between 10001 and 10007 if successful with scoring warning code</returns>
        </member>
        <member name="M:Vasco.AAL2Wrap.AAL2VerifySignatureEs(System.Byte[],System.String,System.String[],System.Int32,System.Int32,System.String)">
             <summary>
            Checks DIGIPASS Signature with enhanced security.
             </summary>
             <remarks>
             This function is called passing the necessary data to perform signature validation and
             integrity control, based on the Signature code generated by the user's DIGIPASS, and up to
             eight SignedDataFields on which authentication and integrity control are to be performed.
             The exact number of valid data fields is given in FieldCount.
             If necessary, a synchronization information may be passed using the DeferredSignatureData parameter.
             This function enhances the security by using the server's public key as seed.
             <p></p>
             <para>
             <b>Score Based DIGIPASS</b>
             </para>
             For DIGIPASS devices that integrate the <b>Score-Based Algorithm</b>, the VACMAN Controller performs a score based signature validation.
             This allows to retrieve the DIGIPASS scoring value.<br/>
             Once VACMAN Controller has successfully validated a signature, it returns either SUCCESS or SUCCESS with the relevant scoring warning code (see bellow).<br/>
             </remarks>
             <seealso cref="M:Vasco.AAL2Wrap.getHostCode"/> 
             <seealso cref="M:Vasco.AAL2Wrap.getRetCode"/> 
             <seealso cref="M:Vasco.AAL2Wrap.getLastError"/> 
             <param name="bDpData"> byte[248] DIGIPASS application BLOB.
             <b>Upon return from the function call, this BLOB must be rewritten to the application database to reflect the changes.</b></param>
             <param name="Signature"> Signature up to 17+24 numeric or hexadecimal characters.</param>
             <param name="SignedDataFields">SignedDataFields up to 8 Strings of maximum 32000 characters. This parameter holds the 8 possible data fields that are entered in the DIGIPASS to generate a signature. Supported characters for the data fields are: %&amp;'()*+,-./:;&lt;=&gt;?_0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz .</param>
             <param name="FieldCount">FieldCount numeric value from 1 to 8. Indicates the number of data fields to use from the SignedDataFields array.</param>
             <param name="DeferredSignatureData">
             <ul>
             <li> Must be 0 if signature is validated in online mode (kernel parameter OnlineSG=1 or 2).</li>
             <li> If signature is validated in offline mode with kernel parameter OnlineSG=0, this parameter can receive the DIGIPASS date of the signature generation
             (number of elapsed seconds from January 1st 1970) or 0 (0 forces using the current time) Important: If &gt; 0, the parameter filled must be the DIGIPASS time, and not the host time.</li>
             <li> If signature is validated in offline mode with kernel parameter OnlineSG=3, this parameter MUST receive the counter of the DIGIPASS used for the signature generation.</li>
             </ul>
             </param>
             <param name="ServerPublicKey"> ServerPublicKey String containing the Server's public encryption key (Hexadecimal characters). This parameter is used as a diversifier to prevent Man in the Middle attack. If this parameter is <i>null</i> , the diversification will not be done.</param>
             <returns>0 if successful, value between 10001 and 10007 if successful with scoring warning code</returns>
        </member>
        <member name="M:Vasco.AAL2Wrap.AAL2VerifySignatureEs(System.String@,System.String,System.String[],System.Int32,System.Int32,System.String)">
             <summary>
            Checks DIGIPASS Signature with enhanced security.
             </summary>
             <remarks>
             This function is called passing the necessary data to perform signature validation and
             integrity control, based on the Signature code generated by the user's DIGIPASS, and up to
             eight SignedDataFields on which authentication and integrity control are to be performed.
             The exact number of valid data fields is given in FieldCount.
             If necessary, a synchronization information may be passed using the DeferredSignatureData parameter.
             This function enhances the security by using the server's public key as seed.
             <p></p>
             <para>
             <b>Score Based DIGIPASS</b>
             </para>
             For DIGIPASS devices that integrate the <b>Score-Based Algorithm</b>, the VACMAN Controller performs a score based signature validation.
             This allows to retrieve the DIGIPASS scoring value.<br/>
             Once VACMAN Controller has successfully validated a signature, it returns either SUCCESS or SUCCESS with the relevant scoring warning code (see bellow).<br/>
             </remarks>
             <seealso cref="M:Vasco.AAL2Wrap.getHostCode"/> 
             <seealso cref="M:Vasco.AAL2Wrap.getRetCode"/> 
             <seealso cref="M:Vasco.AAL2Wrap.getLastError"/> 
             <param name="DpData"> string DIGIPASS application BLOB.
             <b>Upon return from the function call, this BLOB must be rewritten to the application database to reflect the changes.</b></param>
             <param name="Signature"> Signature up to 17+24 numeric or hexadecimal characters.</param>
             <param name="SignedDataFields">SignedDataFields up to 8 Strings of maximum 32000 characters. This parameter holds the 8 possible data fields that are entered in the DIGIPASS to generate a signature. Supported characters for the data fields are: %&amp;'()*+,-./:;&lt;=&gt;?_0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz .</param>
             <param name="FieldCount">FieldCount numeric value from 1 to 8. Indicates the number of data fields to use from the SignedDataFields array.</param>
             <param name="DeferredSignatureData">
             <ul>
             <li> Must be 0 if signature is validated in online mode (kernel parameter OnlineSG=1 or 2).</li>
             <li> If signature is validated in offline mode with kernel parameter OnlineSG=0, this parameter can receive the DIGIPASS date of the signature generation
             (number of elapsed seconds from January 1st 1970) or 0 (0 forces using the current time) Important: If &gt; 0, the parameter filled must be the DIGIPASS time, and not the host time.</li>
             <li> If signature is validated in offline mode with kernel parameter OnlineSG=3, this parameter MUST receive the counter of the DIGIPASS used for the signature generation.</li>
             </ul>
             </param>
             <param name="ServerPublicKey"> ServerPublicKey String containing the Server's public encryption key (Hexadecimal characters). This parameter is used as a diversifier to prevent Man in the Middle attack. If this parameter is <i>null</i> , the diversification will not be done.</param>
             <returns>0 if successful, value between 10001 and 10007 if successful with scoring warning code</returns>
        </member>
        <member name="M:Vasco.AAL2Wrap.AAL2VerifyMessageSignature(System.Byte[],System.Int32,System.String,System.String,System.Int32)">
            <summary>
            This function verifies the Signature provided by the DIGIPASS device in response to the activation2 message (generated with
            <see cref="M:Vasco.AAL2Wrap.AAL2GenMessageActivation2(System.String@,System.String,System.String,System.String,System.String)">AAL2GenMessageActivation2</see>)
            during the multi-device activation process  or in response to the request message (generated with
            <see cref="M:Vasco.AAL2Wrap.AAL2GenMessageRequest(System.String,System.String,System.String)">AAL2GenMessageRequest</see>) during a secure channel request process
            (optionally; depending if the request requires a signature validation).
            <p></p>
            <b>Note:</b>
            <p></p>
            It is only applicable to:
            <ul>
            <li>Hardware or Software DIGIPASS compliant with the multi-device two steps activation.</li>
            <li>Hardware DIGIPASS based on the single device licensing model and able to perform operation based on secure channel protocol.</li>
            </ul>
            Refer to the Authentication Server Framework Product Guide for more information.
            <p></p>
            In case of verifying the signature of an Activation2 message, the <b>DIGIPASS application BLOB used for the validation</b> must correspond to 
            <b>the crypto application of the DIGIPASS instance defined for the post-activation step</b>. Information on the crypto application used 
            for post-activation is part of the DIGIPASS client configuration.
            <p></p>
            In case of verifying the signature of a Request message, (that was containing a Secure Channel transaction),
            the <b>DIGIPASS application BLOB used for the validation</b> must correspond to
            <b>the crypto application of the DIGIPASS instance selected for signing the message</b>. Information on the crypto application selected 
            for signing the message is part of the request body; it allows the DIGIPASS device to perform the operation with the proper application.
            <p></p> 
            <para>
            <b>Signed message optional expiration check</b>
            </para>
            This function allows optionally checking a maximum amount of time authorized since the generation of the activation2 message or request 
            message for which the signature validation is performed. This message time validity check depends on the MessageExpirationTime parameter.
            <ul>
            <li> <i>If MessageExpirationTime = 0</i>, the function will not perform any message time validity check. </li>
            <li> <i>If MessageExpirationTime &gt; 0</i>, MessageExpirationTime represents the maximum amount of time (expressed in seconds) authorized since 
            the generation of the message (activation2 message or a request message).</li><p></p>
            <b>Note:</b>
            The activation2 messages or request messages must have been MANDATORILLY generated by a VACMAN Controller 3.15.1 or more if checking the time validity 
            (i.e.  <i>MessageExpirationTime &gt; 0</i>).
            Indeed, the Timestamp of the generation time is embedded in the activation2 messages and request messages only since the VACMAN Controller 3.15.1.
            </ul>
            <para>
            <b>Score Based DIGIPASS</b>
            </para>
            For DIGIPASS devices that integrate the <b>Score-Based Algorithm</b>, the VACMAN Controller performs a score based message signature validation. 
            This allows to retrieve the DIGIPASS scoring value.<br/>
            Once VACMAN Controller has successfully validated the signature, it returns either SUCCESS or SUCCESS with the relevant scoring warning code (see bellow).<br/>
            </summary>
            <seealso cref="M:Vasco.AAL2Wrap.getHostCode"/> 
            <seealso cref="M:Vasco.AAL2Wrap.getRetCode"/> 
            <seealso cref="M:Vasco.AAL2Wrap.getLastError"/> 
            <param name="bDpData"> byte[248] DIGIPASS application BLOB of the DIGIPASS instance to use for the signature verification.
            <b>Upon return from the function call, this BLOB must be rewritten to the application database to reflect the changes.</b></param>
            <param name="MessageExpirationTime">Must be mandatorily equal or greater to 0.
            <ul>
            <li> If <i>MessageExpirationTime = 0</i>: No message time validity check.</li>
            <li> If <i>MessageExpirationTime &gt; 0</i>: MessageExpirationTime represents the maximum amount of time (expressed in seconds) authorized 
            since the generation of the message (activation2 message or a request message).
            </li></ul>
            </param>
            <param name="Signature">Up to 17 numeric or hexadecimal characters.</param>
            <param name="SignedMessage">Hexadecimal character string containing the message that has been used by the DIGIPASS device to generate the signature. String length must be multiple of 2. This can be either an <b>activation2 message</b> or a <b>request message</b>.</param>
            <param name="DeferredSignatureData">-
            <ul>
            <li> Must be 0 if the signature is validated in online mode (OnlineSG=1 or 2).</li>
            <li> If signature is validated in offline mode with OnlineSG=0, this parameter can receive
            the DIGIPASS date of the signature generation (number of elapsed seconds since January 1st 1970) 
            or 0 (with 0, the current time is used) Important: If &gt; 0, the filled parameter must be the DIGIPASS time, and not the host time.</li>
            <li> If signature is validated in offline mode with OnlineSG=3, this parameter must receive the 
            counter of the DIGIPASS used for the signature generation.</li>
            </ul></param>
            <returns>0 if successful, value between 10001 and 10007 if successful with scoring warning code</returns>
        </member>
        <member name="M:Vasco.AAL2Wrap.AAL2VerifyMessageSignature(System.String@,System.Int32,System.String,System.String,System.Int32)">
            <summary>
            This function verifies the Signature provided by the DIGIPASS device in response to the activation2 message (generated with
            <see cref="M:Vasco.AAL2Wrap.AAL2GenMessageActivation2(System.Byte[],System.String,System.String,System.String,System.String)">AAL2GenMessageActivation2</see>)
            during the multi-device activation process  or in response to the request message (generated with
            <see cref="M:Vasco.AAL2Wrap.AAL2GenMessageRequest(System.String,System.String,System.String)">AAL2GenMessageRequest</see>) during a secure channel request process
            (optionally; depending if the request requires a signature validation).
            <p></p>
            <b>Note:</b>
            <p></p>
            It is only applicable to:
            <ul>
            <li>Hardware or Software DIGIPASS compliant with the multi-device two steps activation.</li>
            <li>Hardware DIGIPASS based on the single device licensing model and able to perform operation based on secure channel protocol.</li>
            </ul>
            Refer to the Authentication Server Framework Product Guide for more information.
            <p></p>
            In case of verifying the signature of an Activation2 message, the <b>DIGIPASS application BLOB used for the validation</b> must correspond to 
            <b>the crypto application of the DIGIPASS instance defined for the post-activation step</b>. Information on the crypto application used 
            for post-activation is part of the DIGIPASS client configuration.
            <p></p>
            In case of verifying the signature of a Request message, (that was containing a Secure Channel transaction),
            the <b>DIGIPASS application BLOB used for the validation</b> must correspond to
            <b>the crypto application of the DIGIPASS instance selected for signing the message</b>. Information on the crypto application selected 
            for signing the message is part of the request body; it allows the DIGIPASS device to perform the operation with the proper application.
            <p></p> 
            <para>
            <b>Signed message optional expiration check</b>
            </para>
            This function allows optionally checking a maximum amount of time authorized since the generation of the activation2 message or request 
            message for which the signature validation is performed. This message time validity check depends on the MessageExpirationTime parameter.
            <ul>
            <li> <i>If MessageExpirationTime = 0</i>, the function will not perform any message time validity check. </li>
            <li> <i>If MessageExpirationTime &gt; 0</i>, MessageExpirationTime represents the maximum amount of time (expressed in seconds) authorized since 
            the generation of the message (activation2 message or a request message).</li><p></p>
            <b>Note:</b>
            The activation2 messages or request messages must have been MANDATORILLY generated by a VACMAN Controller 3.15.1 or more if checking the time validity 
            (i.e.  <i>MessageExpirationTime &gt; 0</i>).
            Indeed, the Timestamp of the generation time is embedded in the activation2 messages and request messages only since the VACMAN Controller 3.15.1.
            </ul>
            <para>
            <b>Score Based DIGIPASS</b>
            </para>
            For DIGIPASS devices that integrate the <b>Score-Based Algorithm</b>, the VACMAN Controller performs a score based message signature validation. 
            This allows to retrieve the DIGIPASS scoring value.<br/>
            Once VACMAN Controller has successfully validated the signature, it returns either SUCCESS or SUCCESS with the relevant scoring warning code (see bellow).<br/>
            </summary>
            <seealso cref="M:Vasco.AAL2Wrap.getHostCode"/> 
            <seealso cref="M:Vasco.AAL2Wrap.getRetCode"/> 
            <seealso cref="M:Vasco.AAL2Wrap.getLastError"/> 
            <param name="DpData"> string DIGIPASS application BLOB of the DIGIPASS instance to use for the signature verification.
            <b>Upon return from the function call, this BLOB must be rewritten to the application database to reflect the changes.</b></param>
            <param name="MessageExpirationTime">Must be mandatorily equal or greater to 0.
            <ul>
            <li> If <i>MessageExpirationTime = 0</i>: No message time validity check.</li>
            <li> If <i>MessageExpirationTime &gt; 0</i>: MessageExpirationTime represents the maximum amount of time (expressed in seconds) authorized 
            since the generation of the message (activation2 message or a request message).
            </li></ul>
            </param>
            <param name="Signature">Up to 17 numeric or hexadecimal characters.</param>
            <param name="SignedMessage">Hexadecimal character string containing the message that has been used by the DIGIPASS device to generate the signature. String length must be multiple of 2. This can be either an <b>activation2 message</b> or a <b>request message</b>.</param>
            <param name="DeferredSignatureData">-
            <ul>
            <li> Must be 0 if the signature is validated in online mode (OnlineSG=1 or 2).</li>
            <li> If signature is validated in offline mode with OnlineSG=0, this parameter can receive 
            the DIGIPASS date of the signature generation (number of elapsed seconds since January 1st 1970) 
            or 0 (with 0, the current time is used) Important: If &gt; 0, the filled parameter must be the DIGIPASS time, and not the host time.</li>
            <li> If signature is validated in offline mode with OnlineSG=3, this parameter must receive the 
            counter of the DIGIPASS used for the signature generation.</li>
            </ul></param>
            <returns>0 if successful, value between 10001 and 10007 if successful with scoring warning code</returns>
        </member>
        <member name="M:Vasco.AAL2Wrap.AAL2DecryptQABlob(System.Byte[],System.String,System.String)">
            <summary>
            Decrypted an encrypted QA BLOB
            </summary>
            <remarks>
            This function decrypts the encrypted QABlob provided
            by the JAVA Applet of the DIGIPASS for Web architecture.
            <p></p>
            <para>
            <b>Score Based DIGIPASS</b>
            </para>
            For DIGIPASS devices that integrate the <b>Score-Based Algorithm</b>, the VACMAN Controller performs a score based authentication to decrypt the QA blob. 
            This allows to retrieve the DIGIPASS scoring value.<br/>
            Once VACMAN Controller has successfully decrypted the QA blob, it returns either SUCCESS or SUCCESS with the relevant scoring warning code (see bellow).<br/>
            </remarks>
            <seealso cref="M:Vasco.AAL2Wrap.getRetCode"/>
            <seealso cref="M:Vasco.AAL2Wrap.getLastError"/>
            <seealso cref="M:Vasco.AAL2Wrap.getQABlob"/>
            <seealso cref="M:Vasco.AAL2Wrap.getQABlobSize"/>
            <param name="bDpData"> byte[248] DIGIPASS application BLOB.
            <b>Upon return from the function call, this BLOB must be rewritten to the application database to reflect the changes.</b></param>
            <param name="Challenge"> string Challenge for CR mode. </param>
            <param name="EncryptedQABlob"> string data, Encrypted QABlob Format</param>
            <returns> return 0 if successful, value between 10001 and 10007 if successful with scoring warning code or error code.</returns>
        </member>
        <member name="M:Vasco.AAL2Wrap.AAL2DecryptQABlob(System.String@,System.String,System.String)">
            <summary>
            Decrypted an encrypted QA BLOB
            </summary>
            <remarks>
            This function decrypts the encrypted QABlob provided
            by the JAVA Applet of the DIGIPASS for Web architecture.
            <p></p>
            <para>
            <b>Score Based DIGIPASS</b>
            </para>
            For DIGIPASS devices that integrate the <b>Score-Based Algorithm</b>, the VACMAN Controller performs a score based authentication to decrypt the QA blob. 
            This allows to retrieve the DIGIPASS scoring value.<br/>
            Once VACMAN Controller has successfully decrypted the QA blob, it returns either SUCCESS or SUCCESS with the relevant scoring warning code (see bellow).<br/>
            </remarks>
            <param name="DpData"> string DIGIPASS application BLOB.
            <b>Upon return from the function call, this BLOB must be rewritten to the application database to reflect the changes.</b></param>
            <param name="Challenge"> string Challenge for CR mode. </param>
            <param name="EncryptedQABlob"> string data, Encrypted QABlob Format</param>
            <seealso cref="M:Vasco.AAL2Wrap.getRetCode"/>
            <seealso cref="M:Vasco.AAL2Wrap.getLastError"/>
            <seealso cref="M:Vasco.AAL2Wrap.getQABlob"/>
            <seealso cref="M:Vasco.AAL2Wrap.getQABlobSize"/>
            <returns> return 0 if successful, value between 10001 and 10007 if successful with scoring warning code or error code.</returns>
        </member>
        <member name="M:Vasco.AAL2Wrap.AAL2Unlock(System.String@,System.String)">
            <summary>
             Returns DIGIPASS unlock code.
            </summary>
            <remarks>
            If a user's DIGIPASS gets locked because of wrong PIN entries, the DIGIPASS Administrator
            will be able to unlock the DIGIPASS using this function.
            This function obtains the initialized unlock information of the users's DIGIPASS from
            DIGIPASS application BLOB and calls the related function to perform the unlock code calculation.
            This function generates an UnlockCode that the user will enter in his/her DIGIPASS
            in response to the currently displayed RandomNumber
            </remarks>
            <seealso cref="M:Vasco.AAL2Wrap.getRetCode"/> 
            <seealso cref="M:Vasco.AAL2Wrap.getLastError"/> 
            <param name="DpData"> string DIGIPASS application BLOB.
            <b>Upon return from the function call, this BLOB must be rewritten to the application database to reflect the changes.</b></param>
            <param name="RandomNumber">RandomNumber the DIGIPASS generated Challenge.</param>
            <returns> return the unlock code or <i>null</i></returns> 
        </member>
        <member name="M:Vasco.AAL2Wrap.AAL2Unlock(System.Byte[],System.String)">
            <summary>
             Returns DIGIPASS unlock code.
            </summary>
            <remarks>
            If a user's DIGIPASS gets locked because of wrong PIN entries, the DIGIPASS Administrator
            will be able to unlock the DIGIPASS using this function.
            This function obtains the initialized unlock information of the users's DIGIPASS from
            DIGIPASS application BLOB and calls the related function to perform the unlock code calculation.
            This function generates an UnlockCode that the user will enter in his/her DIGIPASS
            in response to the currently displayed RandomNumber
            </remarks>
            <seealso cref="M:Vasco.AAL2Wrap.getRetCode"/> 
            <seealso cref="M:Vasco.AAL2Wrap.getLastError"/> 
            <param name="bDpData"> byte[248] DIGIPASS application BLOB.
            <b>Upon return from the function call, this BLOB must be rewritten to the application database to reflect the changes.</b></param>
            <param name="RandomNumber">RandomNumber the DIGIPASS generated Challenge.</param>
            <returns> return the unlock code or <i>null</i></returns> 
        </member>
        <member name="M:Vasco.AAL2Wrap.AAL2GenUnlockAuthCode(System.Byte[],System.Int32)">
            <summary>
            Returns Unlock Authentication Code.
            </summary>
            <remarks>
            <p>
            If a user's DIGIPASS gets locked because of wrong PIN entries, the DIGIPASS Administrator has
            to authenticate the user before proving the DIGIPASS Unlock Code.
            This function generates Unlock Authentication Codes. This Code may be
            used to authenticate the user during a DIGIPASS unlock operation. The AAl2AuthorizeUnlock will
            perform the Unlock Authentication Code validation before generating the Unlock Code. An Unlock Authentication
            Code is valid only once; when used a new Unlock Authentication Code has to be supplied to the user.
            It is possible to generate more than one Unlock Authentication Code at a time.
            </p>
            <p>
            <b style="color:#FF6600">Important Note:</b><br/>
            <span style="color:#FF6600">
            Unlock Authentication Codes have to be used in sequence. If the third is presented
            before the first one, the first and the second codes are consumed.
            </span>
            </p>
            <p>
            Remark: it is not compulsory to implement the unlock user authentication in such a way.
            VASCO proposes this function as an option but the integrator is free to implement its own
            authentication mechanism. However VASCO strongly advises to implement a strong authentication process in any unlock scheme.
            </p>
            </remarks>
            <param name="bDpData"> byte[248] DIGIPASS application BLOB.
            <b>Upon return from the function call, this BLOB must be rewritten to the application database to reflect the changes.</b></param>
            <param name="UnlockAuthIndex">contains the Unlock Authentication Index value.
            This parameter value has to be set between 0 and 5.
            0: current Unlock Authentication Code
            1: next Unlock Authentication Code
            2: ...
            </param>
            <returns>Unlock Authentication Code or <i>null</i></returns>
            <seealso cref="M:Vasco.AAL2Wrap.getRetCode"/> 
            <seealso cref="M:Vasco.AAL2Wrap.getLastError"/> 
            <seealso cref="M:Vasco.AAL2Wrap.getUnlockAuthCounter"/> 
        </member>
        <member name="M:Vasco.AAL2Wrap.AAL2GenUnlockAuthCode(System.String@,System.Int32)">
            <summary>
            Returns Unlock Authentication Code.
            </summary>
            <remarks>
            <p>
            If a user's DIGIPASS gets locked because of wrong PIN entries, the DIGIPASS Administrator has
            to authenticate the user before proving the DIGIPASS Unlock Code.
            This function generates Unlock Authentication Codes. This Code may be
            used to authenticate the user during a DIGIPASS unlock operation. The AAl2AuthorizeUnlock will
            perform the Unlock Authentication Code validation before generating the Unlock Code. An Unlock Authentication
            Code is valid only once; when used a new Unlock Authentication Code has to be supplied to the user.
            It is possible to generate more than one Unlock Authentication Code at a time.
            </p>
            <p>
            <b style="color:#FF6600">Important Note:</b><br/>
            <span style="color:#FF6600">
            Unlock Authentication Codes have to be used in sequence. If the third is presented
            before the first one, the first and the second codes are consumed.
            </span>
            </p>
            <p>
            Remark: it is not compulsory to implement the unlock user authentication in such a way.
            VASCO proposes this function as an option but the integrator is free to implement its own
            authentication mechanism. However VASCO strongly advises to implement a strong authentication process in any unlock scheme.
            </p>
            </remarks>
            <param name="DpData"> string DIGIPASS application BLOB.
            <b>Upon return from the function call, this BLOB must be rewritten to the application database to reflect the changes.</b></param>
            <param name="UnlockAuthIndex">contains the Unlock Authentication Index value.
            This parameter value has to be set between 0 and 5.
            0: current Unlock Authentication Code
            1: next Unlock Authentication Code
            2: ...
            </param>
            <returns>Unlock Authentication Code or <i>null</i></returns>
            <seealso cref="M:Vasco.AAL2Wrap.getRetCode"/> 
            <seealso cref="M:Vasco.AAL2Wrap.getLastError"/> 
            <seealso cref="M:Vasco.AAL2Wrap.getUnlockAuthCounter"/> 
        </member>
        <member name="M:Vasco.AAL2Wrap.AAL2AuthorizeUnlock(System.Byte[],System.String,System.String)">
            <summary>
            Validates Unlock Authentication Code and returns Unlock Code.
            </summary>
            <remarks>
            If a user's DIGIPASS gets locked because of wrong PIN entries, the DIGIPASS Administrator
             will be able to unlock this User using this function. This function performs two actions:
             - validates the Unlock Authentication Code and if correct
             - obtains the initialized unlock information of the user's DIGIPASS from DIGIPASS application BLOB
             and calls the related Level 1 function to perform the unlock code calculation.
             This function authenticates the user and generates an unlock code that the user will enter
             in his/her DIGIPASS in response to the currently displayed RandomNumber.
             If a DIGIPASS has been programmed with more than one application and the AAL2SyncTokenBlob
             function should be called to synchronize the unlock authentication counter value stored in
             the different DIGIPASS application BLOBs after a call to the AAL2AuthoriseUnlock function.
            </remarks>
            <param name="bDpData"> byte[248] DIGIPASS application BLOB.
            <b>Upon return from the function call, this BLOB must be rewritten to the application database to reflect the changes.</b></param>
            <param name="UnlockAuthCode">String of up to 8 numeric characters. This parameter holds the unlock authentication code that is generated by <see cref="M:Vasco.AAL2Wrap.AAL2GenUnlockAuthCode(System.Byte[],System.Int32)">AAL2GenUnlockAuthCode</see>.</param>
            <param name="RandomNumber">String of up to 8 numeric characters. This parameter holds the random number that is generated and displayed by a DIGIPASS token when it gets locked.</param>
            <returns>the Unlock Code or <i>null</i>.</returns>
        </member>
        <member name="M:Vasco.AAL2Wrap.AAL2AuthorizeUnlock(System.String@,System.String,System.String)">
            <summary>
            Validates Unlock Authentication Code and returns Unlock Code.
            </summary>
            <remarks>
            If a user's DIGIPASS gets locked because of wrong PIN entries, the DIGIPASS Administrator
             will be able to unlock this User using this function. This function performs two actions:
             - validates the Unlock Authentication Code and if correct
             - obtains the initialized unlock information of the user's DIGIPASS from DIGIPASS application BLOB
             and calls the related Level 1 function to perform the unlock code calculation.
             This function authenticates the user and generates an unlock code that the user will enter
             in his/her DIGIPASS in response to the currently displayed RandomNumber.
             If a DIGIPASS has been programmed with more than one application and an unlock mechanism
             not based on Unlock V2, AAL2SyncTokenBlob
             function should be called to synchronize the unlock authentication counter value stored in
             the different DIGIPASS application BLOBs after a call to the AAL2AuthorizeUnlock function.
            </remarks>
            <param name="DpData"> string DIGIPASS application BLOB.
            <b>Upon return from the function call, this BLOB must be rewritten to the application database to reflect the changes.</b></param>
            <param name="UnlockAuthCode">String of up to 8 numeric characters. This parameter holds the unlock authentication code that is generated by <see cref="M:Vasco.AAL2Wrap.AAL2GenUnlockAuthCode(System.String@,System.Int32)">AAL2GenUnlockAuthCode</see>.</param>
            <param name="RandomNumber">String of up to 8 numeric characters. This parameter holds the random number that is generated and displayed by a DIGIPASS token when it gets locked.</param>
            <returns>the Unlock Code or <i>null</i>.</returns>
        </member>
        <member name="M:Vasco.AAL2Wrap.AAL2ChangeEncryptedStaticPassword(System.Byte[],System.String,System.String)">
            <summary>
            Changes DIGIPASS Encrypted Static Password.
            </summary>
            <remarks>
            This function is used in combination with DIGIPASS which can use an encrypted
            static password like e.g. DP110. This will allow an Administrator to provide
            a new Encrypted Static Password on a mandatory basis. As this function is critical;
            only authenticated user may use it in a regular integration.
            </remarks>
            <seealso cref="M:Vasco.AAL2Wrap.getRetCode"/> 
            <seealso cref="M:Vasco.AAL2Wrap.getLastError"/> 
            <param name="bDpData"> byte[248] DIGIPASS application BLOB.
            <b>Upon return from the function call, this BLOB must be rewritten to the application database to reflect the changes.</b></param>
            <param name="Challenge"> string containing a generated Challenge.</param>
            <param name="CESPR"> string containing a Change Encrypted Static Password Request.</param>
            <returns> return 0 if successful.</returns>
        </member>
        <member name="M:Vasco.AAL2Wrap.AAL2ChangeEncryptedStaticPassword(System.String@,System.String,System.String)">
            <summary>
            Changes Encrypted DIGIPASS Static Password.
            </summary>
            <remarks>
            This function is used in combination with DIGIPASS which can use an encrypted
            static password like e.g. DP110. This will allow an Administrator to provide
            a new Encrypted Static Password on a mandatory basis. As this function is critical;
            only authenticated user may use it in a regular integration.
            </remarks>
            <seealso cref="M:Vasco.AAL2Wrap.getRetCode"/> 
            <seealso cref="M:Vasco.AAL2Wrap.getLastError"/> 
            <param name="DpData"> string DIGIPASS application BLOB.
            <b>Upon return from the function call, this BLOB must be rewritten to the application database to reflect the changes.</b></param>
            <param name="Challenge"> string containing a generated Challenge.</param>
            <param name="CESPR"> string containing a Change Encrypted Static Password Request.</param>
            <returns> return 0 if successful.</returns>
        </member>
        <member name="M:Vasco.AAL2Wrap.AAL2ChangeEncryptedStaticPasswordEs(System.Byte[],System.String,System.String,System.String)">
            <summary>
            Changes DIGIPASS Encrypted Static Password with Enhanced Security.
            </summary>
            <remarks>
            This function is used in combination with DIGIPASS which can use an encrypted
            static password like e.g. DP110. This will allow an Administrator to provide
            a new Encrypted Static Password on a mandatory basis. As this function is critical;
            only authenticated user may use it in a regular integration.
            This function can support enhanced security feature with using the server's public key as challenge diversifier.
            </remarks>
            <seealso cref="M:Vasco.AAL2Wrap.getRetCode"/> 
            <seealso cref="M:Vasco.AAL2Wrap.getLastError"/> 
            <param name="bDpData"> byte[248] DIGIPASS application BLOB.
            <b>Upon return from the function call, this BLOB must be rewritten to the application database to reflect the changes.</b></param>
            <param name="Challenge"> string containing a generated Challenge.</param>
            <param name="CESPR"> string containing a Change Encrypted Static Password Request.</param>
            <param name="ServerPublicKey"> ServerPublicKey String containing the Server's public encryption key (Hexadecimal characters). This parameter is used as a diversifier to prevent Man in the Middle attack. If this parameter is <i>null</i> , the diversification will not be done.</param>
            <returns> return 0 if successful.</returns>
        </member>
        <member name="M:Vasco.AAL2Wrap.AAL2ChangeEncryptedStaticPasswordEs(System.String@,System.String,System.String,System.String)">
            <summary>
            Changes Encrypted DIGIPASS Static Password with Enhanced Security.
            </summary>
            <remarks>
            This function is used in combination with DIGIPASS which can use an encrypted
            static password like e.g. DP110. This will allow an Administrator to provide
            a new Encrypted Static Password on a mandatory basis. As this function is critical;
            only authenticated user may use it in a regular integration.
            This function enhances the security by using the server's public key as seed.
            </remarks>
            <seealso cref="M:Vasco.AAL2Wrap.getRetCode"/> 
            <seealso cref="M:Vasco.AAL2Wrap.getLastError"/> 
            <param name="DpData"> string DIGIPASS application BLOB.
            <b>Upon return from the function call, this BLOB must be rewritten to the application database to reflect the changes.</b></param>
            <param name="Challenge"> string containing a generated Challenge.</param>
            <param name="CESPR"> string containing a Change Encrypted Static Password Request.</param>
            <param name="ServerPublicKey"> ServerPublicKey String containing the Server's public encryption key (Hexadecimal characters). This parameter is used as a diversifier to prevent Man in the Middle attack. If this parameter is <i>null</i> , the diversification will not be done.</param>
            <returns> return 0 if successful.</returns>
        </member>
        <member name="M:Vasco.AAL2Wrap.AAL2ResetStaticPassword(System.Byte[])">
            <summary>
            Resets DIGIPASS Static Password.
            </summary>
            <remarks>
            This function is used in combination with DIGIPASS which can use a static
            password like e.g. DIGIPASS GO 1. A call to the AAL2ResetStaticPassword
            indicates that the user will have to define his static password at the next
            authentication request. In order to activate this option, the Password Change Allowed
            functionality has to be activated.
            </remarks>
            <seealso cref="M:Vasco.AAL2Wrap.getRetCode"/> 
            <seealso cref="M:Vasco.AAL2Wrap.getLastError"/> 
            <param name="bDpData"> byte[248] DIGIPASS application BLOB.
            <b>Upon return from the function call, this BLOB must be rewritten to the application database to reflect the changes.</b></param>
            <returns> return 0 if successful.</returns> 
        </member>
        <member name="M:Vasco.AAL2Wrap.AAL2ResetStaticPassword(System.String@)">
            <summary>
            Resets DIGIPASS Static Password.
            </summary>
            <remarks>
            This function is used in combination with DIGIPASS which can use a static
            password like e.g. DIGIPASS GO 1. A call to the AAL2ResetStaticPassword
            indicates that the user will have to define his static password at the next
            authentication request. In order to activate this option, the Password Change Allowed
            functionality has to be activated
            </remarks>
            <seealso cref="M:Vasco.AAL2Wrap.getRetCode"/> 
            <seealso cref="M:Vasco.AAL2Wrap.getLastError"/> 
            <param name="DpData"> string DIGIPASS application BLOB.
            <b>Upon return from the function call, this BLOB must be rewritten to the application database to reflect the changes.</b></param>
            <returns> return 0 if successful.</returns> 
        </member>
        <member name="M:Vasco.AAL2Wrap.AAL2SyncTokenAndHost(System.Byte[],System.String,System.String,System.String,System.String)">
            <summary>
            Based on two contiguous DIGIPASS responses, this function synchronises:
            <ul>
            <li>the HOST Time with the DIGIPASS Time and/or</li>
            <li>the HOST Event Counter with the DIGIPASS Event Counter.</li>
            </ul></summary>
            <remarks>
            This function can be used for
            <ul>
            <li>time-based only Algorithm</li>
            <li>event-based only Algorithm</li>
            <li>time-and-event-based algorithms are now supported.</li>
            Time synchronization is no more limited to 1 second per 6 hours (4 seconds per day).
            </ul><p></p>
            <see cref="M:Vasco.AAL2Wrap.AAL2GetTokenInfoEx(System.Byte[])"/> function can be used to retrieve
            the Algorithm: TIME BASED, EVENT BASED, TIME AND EVENT BASED from TDigipassInfoEx structure.
            Note, for time-based Challenge/Response DIGIPASSES, the CheckChallenge Kernel Parameter must be set to 4 to perform this Synchronize
            function (i.e.to allow two consecutive authentication requests in the same time-step.)
            <p></p>
            <para>
            <b>Score Based DIGIPASS</b>
            </para>
            For DIGIPASS devices that integrate the <b>Score-Based Algorithm</b>, the VACMAN Controller performs a score based authentication.
            This allows to retrieve the DIGIPASS scoring value.<br/>
            Once VACMAN Controller has successfully validated the two consecutive passwords, it returns either SUCCESS or SUCCESS with the relevant scoring warning code (see bellow).<br/>
            </remarks>
            <seealso cref="M:Vasco.AAL2Wrap.getRetCode"/> 
            <seealso cref="M:Vasco.AAL2Wrap.getLastError"/> 
            <param name="bDpData"> byte[248] DIGIPASS application BLOB.
            <b>Upon return from the function call, this BLOB must be rewritten to the application database to reflect the changes.</b></param>
            <param name="Response1In"> Response to be validated against the first given challenge.</param>
            <param name="Challenge1In"> The first given challenge.</param>
            <param name="Response2In"> Response to be validated against the second given challenge.</param>
            <param name="Challenge2In"> The second given challenge.</param>
            <returns> return 0 if successful, value between 10001 and 10007 if successful with scoring warning code or error code.</returns>
        </member>
        <member name="M:Vasco.AAL2Wrap.AAL2SyncTokenAndHost(System.String@,System.String,System.String,System.String,System.String)">
            <summary>
            Based on two contiguous DIGIPASS responses, this function synchronises:
            <ul>
            <li>the HOST Time with the DIGIPASS Time; or</li>
            <li>the HOST Event Counter with the DIGIPASS Event Counter.</li>
            </ul></summary>
            <remarks>
            This function can be used for
            <ul>
            <li>time-based only Algorithm; or</li>
            <li>event-based only Algorithm.</li>
            Time-and-event-based algorithms are not supported.
            </ul><p></p>
            <see cref="M:Vasco.AAL2Wrap.AAL2GetTokenInfoEx(System.String)"/> function can be used to retrieve
            the Algorithm: TIME BASED, EVENT BASED, TIME AND EVENT BASED from TDigipassInfoEx structure.
            Note, for time-based Challenge/Response DIGIPASSES, the CheckChallenge Kernel Parameter must be set to 4 to perform this Synchronize
            function (i.e.to allow two consecutive authentication requests in the same time-step.)
            <p></p>
            <para>
            <b>Score Based DIGIPASS</b>
            </para>
            For DIGIPASS devices that integrate the <b>Score-Based Algorithm</b>, the VACMAN Controller performs a score based authentication.
            This allows to retrieve the DIGIPASS scoring value.<br/>
            Once VACMAN Controller has successfully validated the two consecutive passwords, it returns either SUCCESS or SUCCESS with the relevant scoring warning code (see bellow).<br/>
            </remarks>
            <seealso cref="M:Vasco.AAL2Wrap.getRetCode"/> 
            <seealso cref="M:Vasco.AAL2Wrap.getLastError"/> 
            <param name="DpData"> string DIGIPASS application BLOB.
            <b>Upon return from the function call, this BLOB must be rewritten to the application database to reflect the changes.</b></param>
            <param name="Response1In"> Response to be validated against the first given challenge.</param>
            <param name="Challenge1In"> The first given challenge.</param>
            <param name="Response2In"> Response to be validated against the second given challenge.</param>
            <param name="Challenge2In"> The second given challenge.</param>
            <returns> return 0 if successful, value between 10001 and 10007 if successful with scoring warning code or error code.</returns>
        </member>
        <member name="M:Vasco.AAL2Wrap.AAL2VerifyEMVCAPMode1(System.Byte[],System.String,System.String,System.String,System.String)">
            <summary>
            EMV Verification Mode 1.
            This function is reserved to VACMAN Controller for CTVS.
            </summary>
            <param name="bDpData"> byte[248] EMV application BLOB.
            <b>Upon return from the function call, this BLOB must be rewritten to the application database to reflect the changes.</b></param>
            <param name="CAPToken">The displayed dynamic code.</param>
            <param name="Challenge">The challenge.</param>
            <param name="TransactionAmount">The transaction amount.</param>
            <param name="TransactionCurrency">The transaction currency.</param>
            <returns> return 0 if successful.</returns>
        </member>
        <member name="M:Vasco.AAL2Wrap.AAL2VerifyEMVCAPMode1(System.String@,System.String,System.String,System.String,System.String)">
            <summary>
            EMV Verification Mode 1.
            This function is reserved to VACMAN Controller for CTVS.
            </summary>
            <param name="DpData"> string EMV application BLOB.
            <b>Upon return from the function call, this BLOB must be rewritten to the application database to reflect the changes.</b></param>
            <param name="CAPToken">The displayed dynamic code.</param>
            <param name="Challenge">The challenge.</param>
            <param name="TransactionAmount">The transaction amount.</param>
            <param name="TransactionCurrency">The transaction currency.</param>
            <returns> return 0 if successful.</returns>
        </member>
        <member name="M:Vasco.AAL2Wrap.AAL2GenEMVCAPMode1(System.Byte[],System.String,System.String,System.String)">
            <summary>
            EMV Generation Mode 1.
            This function is reserved to VACMAN Controller for CTVS.
            </summary>
            <param name="bDpData"> byte[248] EMV application BLOB.
            <b>Upon return from the function call, this BLOB must be rewritten to the application database to reflect the changes.</b></param>
            <param name="Challenge">The challenge.</param>
            <param name="TransactionAmount">The transaction amount.</param>
            <param name="TransactionCurrency">The transaction currency.</param>
            <returns> return 0 if successful.</returns>
            <returns>Return a string code or <i>null</i></returns>
        </member>
        <member name="M:Vasco.AAL2Wrap.AAL2GenEMVCAPMode1(System.String@,System.String,System.String,System.String)">
            <summary>
            EMV Generation Mode 1.
            This function is reserved to VACMAN Controller for CTVS.
            </summary>
            <param name="DpData"> string EMV application BLOB.
            <b>Upon return from the function call, this BLOB must be rewritten to the application database to reflect the changes.</b></param>
            <param name="Challenge">The challenge.</param>
            <param name="TransactionAmount">The transaction amount.</param>
            <param name="TransactionCurrency">The transaction currency.</param>
            <returns> return 0 if successful.</returns>
            <returns>Return a string code or <i>null</i></returns>
        </member>
        <member name="M:Vasco.AAL2Wrap.AAL2VerifyEMVCAPMode2(System.Byte[],System.String,System.String[],System.Int32)">
            <summary>
            EMV Verification Mode 2.
            This function is reserved to VACMAN Controller for CTVS.
            </summary>
            <param name="bDpData"> byte[248] EMV application BLOB.
            <b>Upon return from the function call, this BLOB must be rewritten to the application database to reflect the changes.</b></param>
            <param name="CAPToken">The displayed dynamic code.</param>
            <param name="SignedDataFields">The signed data fields. Up to 10 Strings of 10 characters maximum.</param>
            <param name="TDSFlag">The TDS flag.</param>
            <returns> return 0 if successful.</returns>
        </member>
        <member name="M:Vasco.AAL2Wrap.AAL2VerifyEMVCAPMode2(System.String@,System.String,System.String[],System.Int32)">
            <summary>
            EMV Verification Mode 2.
            This function is reserved to VACMAN Controller for CTVS.
            </summary>
            <param name="DpData"> string EMV application BLOB.
            <b>Upon return from the function call, this BLOB must be rewritten to the application database to reflect the changes.</b></param>
            <param name="CAPToken">The displayed dynamic code.</param>
            <param name="SignedDataFields">The signed data fields. Up to 10 Strings of 10 characters maximum.</param>
            <param name="TDSFlag">The TDS flag.</param>
            <returns> return 0 if successful.</returns>
        </member>
        <member name="M:Vasco.AAL2Wrap.AAL2GenEMVCAPMode2(System.Byte[],System.String[],System.Int32)">
            <summary>
            EMV Generation Mode 2.
            This function is reserved to VACMAN Controller for CTVS.
            </summary>
            <param name="bDpData"> byte[248] EMV application BLOB.
            <b>Upon return from the function call, this BLOB must be rewritten to the application database to reflect the changes.</b></param>
            <param name="SignedDataFields">The signed data fields.</param>
            <param name="TDSFlag">The TDS flag.</param>
            <returns>Return a string code or <i>null</i></returns>
        </member>
        <member name="M:Vasco.AAL2Wrap.AAL2GenEMVCAPMode2(System.String@,System.String[],System.Int32)">
            <summary>
            EMV Generation Mode 2.
            This function is reserved to VACMAN Controller for CTVS.
            </summary>
            <param name="DpData"> string EMV application BLOB.
            <b>Upon return from the function call, this BLOB must be rewritten to the application database to reflect the changes.</b></param>
            <param name="SignedDataFields">The signed data fields.</param>
            <param name="TDSFlag">The TDS flag.</param>
            <returns>Return a string code or <i>null</i></returns>
        </member>
        <member name="M:Vasco.AAL2Wrap.AAL2VerifyEMVCAPMode3(System.Byte[],System.String,System.String)">
            <summary>
            EMV Verification Mode 3.
            This function is reserved to VACMAN Controller for CTVS.
            </summary>
            <param name="bDpData"> byte[248] EMV application BLOB.
            <b>Upon return from the function call, this BLOB must be rewritten to the application database to reflect the changes.</b></param>
            <param name="CAPToken">The displayed dynamic code.</param>
            <param name="Challenge">The challenge.</param>
            <returns> return 0 if successful.</returns>
        </member>
        <member name="M:Vasco.AAL2Wrap.AAL2VerifyEMVCAPMode3(System.String@,System.String,System.String)">
            <summary>
            EMV Verification Mode 3.
            This function is reserved to VACMAN Controller for CTVS.
            </summary>
            <param name="DpData"> string EMV application BLOB.
            <b>Upon return from the function call, this BLOB must be rewritten to the application database to reflect the changes.</b></param>
            <param name="CAPToken">The displayed dynamic code.</param>
            <param name="Challenge">The challenge.</param>
            <returns> return 0 if successful.</returns>
        </member>
        <member name="M:Vasco.AAL2Wrap.AAL2GenEMVCAPMode3(System.Byte[],System.String)">
            <summary>
            EMV Generation Mode 3.
            This function is reserved to VACMAN Controller for CTVS.
            </summary>
            <param name="bDpData"> byte[248] EMV application BLOB.
            <b>Upon return from the function call, this BLOB must be rewritten to the application database to reflect the changes.</b></param>
            <param name="Challenge">The challenge.</param>
            <returns>Return a string code or <i>null</i></returns>
        </member>
        <member name="M:Vasco.AAL2Wrap.AAL2GenEMVCAPMode3(System.String@,System.String)">
            <summary>
            EMV Generation Mode 3.
            This function is reserved to VACMAN Controller for CTVS.
            </summary>
            <param name="DpData"> string EMV application BLOB.
            <b>Upon return from the function call, this BLOB must be rewritten to the application database to reflect the changes.</b></param>
            <param name="Challenge">The challenge.</param>
            <returns>Return a string code or <i>null</i></returns>
        </member>
        <member name="M:Vasco.AAL2Wrap.AAL2VerifyWIN(System.Byte[],System.String,Vasco.AuthParms@)">
            <summary> 
            Verifies a given authentication response contained in AuthParms object.
            </summary>
            <remarks>
            Performs DIGIPASS owner's authentication by controlling if an authentication response  
            calculated with a given DIGIPASS dynamic password is valid for a specified DIGIPASS application
            described by its DIGIPASS application BLOB. 
            </remarks>
            <param name="bDpData"> byte[248] DIGIPASS application BLOB.
            <b>Upon return from the function call, this BLOB must be rewritten to the application database to reflect the changes.</b></param>
            <param name="Challenge"> string containing the previously generated Challenge or null.</param>
            <param name="cAuthParm"> Vasco.AuthParms object containing authentication challenges and response depending on the authentication protocol.</param>
            <returns> return 0 or error code.</returns>
        </member>
        <member name="M:Vasco.AAL2Wrap.AAL2VerifyWIN(System.String@,System.String,Vasco.AuthParms@)">
            <summary> 
            Verifies a given authentication response contained in AuthParms object.
            </summary>
            <remarks>
            Performs DIGIPASS owner's authentication by controlling if an authentication response  
            calculated with a given DIGIPASS dynamic password is valid for a specified DIGIPASS application
            described by its DIGIPASS application BLOB. 
            </remarks>
            <param name="DpData"> string DIGIPASS application BLOB.
            <b>Upon return from the function call, this BLOB must be rewritten to the application database to reflect the changes.</b></param>
            <param name="Challenge"> string containing the previously generated Challenge or null.</param>
            <param name="cAuthParm"> Vasco.AuthParms object containing authentication challenges and response depending on the authentication protocol.</param>
            <returns> return 0 or error code.</returns>
        </member>
        <member name="M:Vasco.AAL2Wrap.AAL2DeriveTokenBlobs(System.Byte[][],System.Int16,System.String,System.String,System.UInt32)">
            <summary> 
            Derives the DIGIPASS data of a Software DIGIPASS based on DIGIPASS SDK 4.0 or higher.
            </summary>
            <remarks>
            It is only applicable to Software DIGIPASS compliant with the standard one step activation
            (in the context of single device licensing; see Authentication Server Framework Product Guide).
            <p></p>
            If supported by the Software DIGIPASS, this feature is used to bind a Software DIGIPASS with its hosting device. 
            In this case, during the activation process, the Software DIGIPASS can create a diversifier based on a device’s fingerprint and
            can provide a derivation code based on the diversifier, an OTP and an optional challenge.<br/>
            AAL2DeriveTokenBlobs allows applying the derivation to the DIGIPASS application BLOBs on the server side.<br/>
            <p></p>
            <para>
            <b>Score Based DIGIPASS</b>
            </para>
            For DIGIPASS devices that integrate the <b>Score-Based Algorithm</b>, the VACMAN Controller performs a score based authentication to validate the derivation code. 
            This allows to retrieve the DIGIPASS scoring value.<br/>
            Once VACMAN Controller has successfully derived the blobs, it returns either SUCCESS or SUCCESS with the relevant scoring warning code (see bellow).<br/>
            <br/>
            Note:<br/>
            The derivation code is validated using the first DIGIPASS application BLOB of the DIGIPASS application BLOB table. This first DIGIPASS application BLOB MUST
            match the DIGIPASS application used for generating the derivation code on the client.
            This first DIGIPASS application BLOB MUST support either Response Only or Challenge Response authentication.<br/>
            For example, it means that when the application named "AUTH_APP1" is used for generating the derivation code on the
            client side, the first DIGIPASS application BLOB must relate to the "AUTH_APP1" application.<br/>
            Application names are exposed during import process.<br/>
            In addition, the derivation will fail if one or more DIGIPASS application BLOB does not support the derivation feature.<br/>
            <seealso cref="M:Vasco.AAL2Wrap.AAL2GetTokenProperty(System.Byte[],System.Int32,System.Int32@)"/> with property DERIVATION_SUPPORTED 
            </remarks>
            <param name="bDpData_Table"> byte[][248] DIGIPASS application BLOB table (maximum 8 BLOBs).
            <b>Upon return from the function call, these BLOBs must be rewritten to the application database to reflect the changes.</b></param>
            <param name="Appli_Count"> Number of applications in the DIGIPASS application BLOB table</param>
            <param name="Challenge"> string containing the optional Challenge or null</param>
            <param name="DerivationCode"> string containing the derivation code.</param>
            <param name="DerivationCodeFormat"> uint reserved, must be 0</param>
            <returns> return 0 if successful, value between 10001 and 10007 if successful with scoring warning code or error code.</returns>
        </member>
        <member name="M:Vasco.AAL2Wrap.AAL2DeriveTokenBlobs(System.String[],System.Int16,System.String,System.String,System.UInt32)">
            <summary> 
            Derives the DIGIPASS data of a Software DIGIPASS based on DIGIPASS SDK 4.0 or higher.
            </summary>
            <remarks>
            It is only applicable to Software DIGIPASS compliant with the standard one step activation
            (in the context of single device licensing; see Authentication Server Framework Product Guide).
            <p></p>
            If supported by the Software DIGIPASS, this feature is used to bind a Software DIGIPASS with its hosting device. 
            In this case, during the activation process, the Software DIGIPASS can create a diversifier based on a device’s fingerprint and
            can provide a derivation code based on the diversifier, an OTP and an optional challenge.<br/>
            AAL2DeriveTokenBlobs allows applying the derivation to the DIGIPASS application BLOBs on the server side.<br/>
            <p></p>
            <para>
            <b>Score Based DIGIPASS</b>
            </para>
            For DIGIPASS devices that integrate the <b>Score-Based Algorithm</b>, the VACMAN Controller performs a score based authentication to validate the derivation code. 
            This allows to retrieve the DIGIPASS scoring value.<br/>
            Once VACMAN Controller has successfully derived the blobs, it returns either SUCCESS or SUCCESS with the relevant scoring warning code (see bellow).<br/>
            <br/>
            Note:<br/>
            The derivation code is validated using the first DIGIPASS application BLOB of the DIGIPASS application BLOB table. This first DIGIPASS application BLOB MUST
            match the DIGIPASS application used for generating the derivation code on the client.
            This first DIGIPASS application BLOB MUST support either Response Only or Challenge Response authentication.<br/>
            For example, it means that when the application named "AUTH_APP1" is used for generating the derivation code on the
            client side, the first DIGIPASS application BLOB must relate to the "AUTH_APP1" application.<br/>
            Application names are exposed during import process.<br/>
            In addition, the derivation will fail if one or more DIGIPASS application BLOB does not support the derivation feature.<br/>
            <seealso cref="M:Vasco.AAL2Wrap.AAL2GetTokenProperty(System.String,System.Int32,System.Int32@)"/> with property DERIVATION_SUPPORTED 
            </remarks>
            <param name="DpData_Table"> string[] DIGIPASS application BLOB table (maximum 8 BLOBs).
            <b>Upon return from the function call, these BLOBs must be rewritten to the application database to reflect the changes.</b></param>
            <param name="Appli_Count"> Number of applications in the DIGIPASS application BLOB table</param>
            <param name="Challenge"> string containing the optional Challenge or null</param>
            <param name="DerivationCode"> string containing the derivation code.</param>
            <param name="DerivationCodeFormat"> uint reserved, must be 0</param>
            <returns> return 0 if successful, value between 10001 and 10007 if successful with scoring warning code or error code.</returns>
        </member>
        <member name="M:Vasco.AAL2Wrap.getRetCode">
            <summary>
            Returns the error code generated by the last function call.
            </summary>
            <seealso cref="M:Vasco.AAL2Wrap.getLastError"/> 
            <returns> return error code.</returns> 
        </member>
        <member name="M:Vasco.AAL2Wrap.getLastError">
            <summary>
            Returns the clear text error message corresponding to the last function call.
            </summary>
            <seealso cref="M:Vasco.AAL2Wrap.getRetCode"/> 
            <returns> return error message.</returns> 
        </member>
        <member name="M:Vasco.AAL2Wrap.getError(System.Int32)">
             <summary>
             Returns the clear text error message corresponding to the return code of the VACMAN Controller function (except DPX functions).
            </summary>
             <param name="returnCode"> Return Code returned by the VACMAN Controller function.</param>
             <seealso cref="M:Vasco.AAL2Wrap.getDPXError(System.Int32)"/> 
             <returns> return error message</returns> 
        </member>
        <member name="M:Vasco.AAL2Wrap.getDPXError(System.Int32)">
            <summary>
            Returns the clear text error message corresponding to the return code of a DPX function call.
            </summary>
            <param name="DPXreturnCode"> Return Code returned by the DPX function.</param>
            <seealso cref="M:Vasco.AAL2Wrap.getError(System.Int32)"/> 
            <returns> return error message.</returns> 
        </member>
        <member name="M:Vasco.AAL2Wrap.getQAIndexList">
            <summary>
            Returns the QA index list generated by the last AAL2GenQAHashData function call.
            </summary>
            <remarks>
            List of the Question Index on 2 ascii characters randomly chosen
            </remarks>
            <seealso cref="M:Vasco.AAL2Wrap.AAL2GenQAHashData(System.String,System.Int32)"/> 
            <returns> return QA index list or null.</returns> 
        </member>
        <member name="M:Vasco.AAL2Wrap.getQAHashData">
            <summary>
            Returns the QA hash data generated by the last AAL2GenQAHashData function call.
            </summary>
            <remarks>
            List of matching answer hash on 30 ascii characters
            </remarks>
            <seealso cref="M:Vasco.AAL2Wrap.AAL2GenQAHashData(System.String,System.Int32)"/> 
            <returns> return QA hash data or null.</returns> 
        </member>
        <member name="M:Vasco.AAL2Wrap.getActivationCode">
            <summary>
            Returns the [Encrypted] Activation Code or [X]FAD generated by the last AAL2GenActivationCodeEx, 
            AAL2GenActivationCodeXErc or AAL2GenActivationDataRndKey call.
            </summary>
            <seealso cref="M:Vasco.AAL2Wrap.AAL2GenActivationCodeEx(System.Byte[],System.String,System.String,System.String,System.Int32)"/> 
            <seealso cref="M:Vasco.AAL2Wrap.AAL2GenActivationCodeEx(System.String@,System.String,System.String,System.String,System.Int32)"/> 
            <seealso cref="M:Vasco.AAL2Wrap.AAL2GenActivationCodeXErc(System.Byte[][],System.Int16,System.String,System.String,System.String,System.Int32,System.Int32)"/> 
            <seealso cref="M:Vasco.AAL2Wrap.AAL2GenActivationCodeXErc(System.String[],System.Int16,System.String,System.String,System.String,System.Int32,System.Int32)"/> 
            <seealso cref="M:Vasco.AAL2Wrap.AAL2GenActivationDataRndKey(System.Byte[][],System.Int16,System.String,System.String,System.String,System.Int32)"/> 
            <seealso cref="M:Vasco.AAL2Wrap.AAL2GenActivationDataRndKey(System.String[],System.Int16,System.String,System.String,System.String,System.Int32)"/> 
            <returns> return Activation Code or null.</returns> 
        </member>
        <member name="M:Vasco.AAL2Wrap.getXERC">
            <summary>
            Returns the [Encrypted] Event Reactivation Counter generated by the last AAL2GenActivationCodeXErc 
            or AAL2GenActivationDataRndKey call.
            </summary>
            <seealso cref="M:Vasco.AAL2Wrap.AAL2GenActivationCodeXErc(System.Byte[][],System.Int16,System.String,System.String,System.String,System.Int32,System.Int32)"/> 
            <seealso cref="M:Vasco.AAL2Wrap.AAL2GenActivationCodeXErc(System.String[],System.Int16,System.String,System.String,System.String,System.Int32,System.Int32)"/> 
            <seealso cref="M:Vasco.AAL2Wrap.AAL2GenActivationDataRndKey(System.Byte[][],System.Int16,System.String,System.String,System.String,System.Int32)"/> 
            <seealso cref="M:Vasco.AAL2Wrap.AAL2GenActivationDataRndKey(System.String[],System.Int16,System.String,System.String,System.String,System.Int32)"/> 
            <returns> return Event Reactivation Counter or null.</returns> 
        </member>
        <member name="M:Vasco.AAL2Wrap.getSerialNumber">
            <summary>
            Returns the Serial Number suffix generated by the last AAL2GenActivationCodeEx, 
            AAL2GenActivationCodeXErc or AAL2GenActivationDataRndKey call.
            </summary>
            <seealso cref="M:Vasco.AAL2Wrap.AAL2GenActivationCodeEx(System.Byte[],System.String,System.String,System.String,System.Int32)"/> 
            <seealso cref="M:Vasco.AAL2Wrap.AAL2GenActivationCodeEx(System.String@,System.String,System.String,System.String,System.Int32)"/> 
            <seealso cref="M:Vasco.AAL2Wrap.AAL2GenActivationCodeXErc(System.Byte[][],System.Int16,System.String,System.String,System.String,System.Int32,System.Int32)"/> 
            <seealso cref="M:Vasco.AAL2Wrap.AAL2GenActivationCodeXErc(System.String[],System.Int16,System.String,System.String,System.String,System.Int32,System.Int32)"/> 
            <seealso cref="M:Vasco.AAL2Wrap.AAL2GenActivationDataRndKey(System.Byte[][],System.Int16,System.String,System.String,System.String,System.Int32)"/> 
            <seealso cref="M:Vasco.AAL2Wrap.AAL2GenActivationDataRndKey(System.String[],System.Int16,System.String,System.String,System.String,System.Int32)"/> 
            <returns> return Serial Number suffix or null.</returns> 
        </member>
        <member name="M:Vasco.AAL2Wrap.getHostCode">
            <summary>
            Returns the Host Code.
            </summary>
            <remarks>
            Returns the Host Code previously generated by the AAL2VerifyPassword or AAL2VerifySignature functions.
            </remarks>
            <seealso cref="M:Vasco.AAL2Wrap.AAL2GenerateChallenge(System.Byte[])"/> 
            <seealso cref="M:Vasco.AAL2Wrap.AAL2VerifyPassword(System.Byte[],System.String,System.String)"/>
            <seealso cref="M:Vasco.AAL2Wrap.getRetCode"/> 
            <seealso cref="M:Vasco.AAL2Wrap.getLastError"/> 
            <returns> Host Code if supported </returns> 
        </member>
        <member name="M:Vasco.AAL2Wrap.getStaticVector">
            <summary>
            Returns the Static Vector  retreived by the last AAL2DPXGetStaticVector function call.
            </summary>
            <seealso cref="M:Vasco.AAL2Wrap.AAL2DPXGetStaticVector"/> 
            <returns> return Static Vector or null.</returns> 
        </member>
        <member name="M:Vasco.AAL2Wrap.getStaticVectorLen">
            <summary>
            Returns the Static Vector size retreived by the last AAL2DPXGetStaticVector function call.
            </summary>
            <remarks>
            Length of the Static Vector
            </remarks>
            <seealso cref="M:Vasco.AAL2Wrap.AAL2DPXGetStaticVector"/> 
            <returns> return Static Vector size or null.</returns> 
        </member>
        <member name="M:Vasco.AAL2Wrap.getMessageVector">
            <summary>
            Returns the Message Vector  retreived by the last AAL2DPXGetMessageVector function call.
            </summary>
            <seealso cref="M:Vasco.AAL2Wrap.AAL2DPXGetMessageVector"/> 
            <returns> return Message Vector or null.</returns> 
        </member>
        <member name="M:Vasco.AAL2Wrap.getMessageVectorLen">
            <summary>
            Returns the Message Vector size retreived by the last AAL2DPXGetMessageVector function call.
            </summary>
            <remarks>
            Length of the Static Vector
            </remarks>
            <seealso cref="M:Vasco.AAL2Wrap.AAL2DPXGetMessageVector"/> 
            <returns> return Static Vector size or null.</returns> 
        </member>
        <member name="M:Vasco.AAL2Wrap.getUnlockAuthCounter">
            <summary>
            Returns the Unlock Authentication Counter by the last AAL2GenUnlockAuthCode function call.
            </summary>
            <seealso cref="M:Vasco.AAL2Wrap.AAL2GenUnlockAuthCode(System.String@,System.Int32)"/> 
            <seealso cref="M:Vasco.AAL2Wrap.AAL2GenUnlockAuthCode(System.Byte[],System.Int32)"/> 
            <returns>the Unlock Authentication Counter</returns>
        </member>
        <member name="M:Vasco.AAL2Wrap.getQABlob">
            <summary>
            Returns the QA blob list decrypted by the last AAL2DecryptQABlob function call.
            </summary>
            <remarks>
            QABlob resulting from the formatted answer hash :
            UserID          32 Ascii
            BLOB Version    02 Ascii
            Hash Number     02 Ascii
            Index           02 Ascii
            Hash            30 Ascii
            Checksum        16 Ascii 
            </remarks>
            <seealso cref="M:Vasco.AAL2Wrap.AAL2DecryptQABlob(System.Byte[],System.String,System.String)"/> 
            <seealso cref="M:Vasco.AAL2Wrap.AAL2DecryptQABlob(System.String@,System.String,System.String)"/> 
            <returns> return QABlob list or null.</returns> 
        </member>
        <member name="M:Vasco.AAL2Wrap.getQABlobSize">
            <summary>
            Returns the QA blob size data generated by the last AAL2DecryptQABlob function call.
            </summary>
            <remarks>
            Length of the QABlob
            </remarks>
            <seealso cref="M:Vasco.AAL2Wrap.AAL2DecryptQABlob(System.Byte[],System.String,System.String)"/> 
            <seealso cref="M:Vasco.AAL2Wrap.AAL2DecryptQABlob(System.String@,System.String,System.String)"/> 
            <returns> return QABlob size data or null.</returns> 
        </member>
        <member name="T:Vasco.AAL2Wrap.TData">
            <summary>
            This Structure is used to get Token information.
            </summary>
        </member>
        <member name="T:Vasco.AAL2Wrap.TDpxHandle">
            <summary>
            This Structure is used during import process.
            </summary>
        </member>
        <member name="T:Vasco.AAL2Wrap.TDigipass">
            <summary>
            This Structure is used during import process.
            </summary>
        </member>
        <member name="F:Vasco.AAL2Wrap.TDigipass.SerialNumber">
            <summary>
            DIGIPASS Serial Number.
            </summary>
            <remarks>
            22 characters, composed of the 10 digits DIGIPASS device serial number 
            concatenated with its 12 digits application name. 
            This represents a logical instance of a DIGIPASS cryptographic application with its unique secrets and parameters. 
            It may be used as a search key to access your DIGIPASS database. 
            </remarks>
        </member>
        <member name="F:Vasco.AAL2Wrap.TDigipass.Type">
            <summary>
            Physical Token Model.
            </summary>
            <remarks>
            5 characters, this field gives the physical device type of this DIGIPASS. 
            It may be used for information purpose, or to determine which flashing pattern protocol 
            to use in order to send data through the device's optical interface if any. 
            </remarks>
        </member>
        <member name="F:Vasco.AAL2Wrap.TDigipass.Mode">
            <summary>
            DIGIPASS Authentication Mode.
            </summary>
            <remarks>
            2 characters. Defines this DIGIPASS application authentication mode, 
            which is one of the following:
            <para>
            RO  :  Response Only
            </para>
            CR  :  Challenge/Response
            <para>
            SG  :  Signature 
            </para>
            MM  :  Multi-Mode
            <para>
            UL  :  Unlock V2 Application 
            </para>
            Please notice that Signature mode devices may also be used for Challenge/Response authentication if they are programmed to accept a single input data field. 
            </remarks>
        </member>
        <member name="F:Vasco.AAL2Wrap.TDigipass.DpData">
            <summary>
             DIGIPASS application BLOB in String format (248 characters).
            <b>Once read, this BLOB must be written to the application database.</b>
            </summary>
        </member>
        <member name="F:Vasco.AAL2Wrap.TDigipass.bDpData">
            <summary>
             DIGIPASS application BLOB in byte format (248 bytes).
            <b>Once read, this BLOB must be written to the application database.</b>
            </summary>
        </member>
        <member name="T:Vasco.AAL2Wrap.TKernelParms">
            <summary>
            This is used to pass runtime parameters to VACMAN Controller .net wrapper API functions.<br/>
            For more details about each runtime parameters, refer to the Authentication Server Framework Product Guide, section “Runtime Parameters”.<br/>
            <b>CAUTION: The runtime parameters are very important as they modify the behavior of some specific features.</b>
            </summary>
        </member>
        <member name="F:Vasco.AAL2Wrap.TKernelParms.ParmCount">
            <summary>
            The number of successive parameters that may be used by the functionalities.
            </summary>
            <remarks>
            <para>
            Range: From 0 to 19.<br/>
            Default Value: 19
            </para>
            The parameters are considered in the following order:<br/>
            1 : ITimeWindow<br/>
            2 : STimeWindow<br/>
            3 : DiagLevel<br/>
            4 : GMTAdjust<br/>
            5 : CheckChallenge<br/>
            6 : IThreshold<br/>
            7 : SThreshold<br/>
            8 : ChkInactDays<br/>
            9 : DeriveVector<br/>
            10 : SyncWindow<br/>
            11 : OnLineSG<br/>
            12 : EventWindow<br/>
            13 : HSMSlotId<br/>
            14 : StorageKeyId<br/>
            15 : TransportKeyId<br/>
            16 : StorageDeriveKey1<br/>
            17 : StorageDeriveKey2<br/>
            18 : StorageDeriveKey3<br/>
            19 : StorageDeriveKey4<br/>
            </remarks>
        </member>
        <member name="F:Vasco.AAL2Wrap.TKernelParms.ITimeWindow">
            <summary>
            Identification Window size in nbr of time steps.
            </summary>
            <remarks>
            <para>
            Range: From 2 to 1000 TimeSteps.<br/>
            Default Value: 100
            </para>
            This size determines the acceptable time difference between a DIGIPASS and the host system for Identification function.<br/>
            This difference is adjusted to the last known shift for each token.<br/> 
            The time step is determined by the DIGIPASS internal programming options.<br/>
            <para>
            TW_DYNAMIC_WINDOWS is a bitmask indicator to indicate whether ITimeWindow is Dynamic or Static.<br/>
            </para>
            Please refer to the Authentication Server Framework Product Guide to have more information concerning the Time Management in the VACMAN  Controller.
            </remarks>
        </member>
        <member name="F:Vasco.AAL2Wrap.TKernelParms.STimeWindow">
            <summary>
            Signature Window size in nbr of time steps.
            </summary>
            <remarks>
            <para>
            Range: From 2 to 500 TimeSteps.<br/>
            Default Value: 24
            </para>
            This size determines the acceptable time difference between a DIGIPASS token and the host system for Signature function.<br/>
            This difference is adjusted to the last known shift for each token.<br/>
            The time step is determined by the DIGIPASS internal programming options.<br/>
            <para>
            TW_DYNAMIC_WINDOWS is a bitmask indicator to indicate whether STimeWindow is Dynamic or Static.<br/>
            </para>
            Please refer to the Authentication Server Framework Product Guide to have more information concerning the Time Management in the VACMAN  Controller.
            </remarks>
        </member>
        <member name="F:Vasco.AAL2Wrap.TKernelParms.DiagLevel">
            <summary>
            Level of diagnostic information.
            </summary>
            <remarks>
            <para>
            Range: From 0 to 3.<br/>
            Default Value: 0
            </para>
            Level of diagnostic information generated by the validation and generation functions.
            <para>
            0 : No diagnostic info.<br/>
            >0 : Diagnostic info about the token application in the standard output.
            </para>
            Note: Not used in case of VACMAN Controller for HSM.
            </remarks>
        </member>
        <member name="F:Vasco.AAL2Wrap.TKernelParms.GMTAdjust">
            <summary>
            GMT Time adjustment to perform.
            </summary>
            <remarks>
            <para>
            Range: From - 86400 to + 86400 seconds.<br/>
            Default Value: 0 
            </para> 
            GMT Time adjustment to perform in case the C language gmtime function doesn't 
            give an accurate value. 
            </remarks>
        </member>
        <member name="F:Vasco.AAL2Wrap.TKernelParms.CheckChallenge">
            <summary>
            Verify Challenge Corrupted.
            </summary>
            <remarks>
            <para>
            Range: From 0 to 4.<br/>
            Default Value: 1
            </para>
            Verify or not if the challenge has been corrupted before validation.   
            <para>
            0 : No challenge checking<br/>
            1 : Check the parameter then verify with the DPData Challenge<br/>
            2 : Always use the DPData Challenge to validate responses<br/>
            3 : Avoid Challenge-Response Replay Attack by allowing only one Challenge-Response authentication per timestep<br/>
            4 : Avoid Challenge-Response Replay Attack by rejecting the second response if responses from two consecutive authentication requests are equal and in the same time-step.
            </para>
            </remarks>
        </member>
        <member name="F:Vasco.AAL2Wrap.TKernelParms.IThreshold">
            <summary>
            Identification Error Threshold.
            </summary>
            <remarks>
            <para>
            Range: From 0 to 255.<br/>
            Default Value: 0
            </para>
            Number of successive Identification errors allowed.<br/>
            When the specified number is reached, return code 202 is sent to caller.<br/>
            0 means this feature is disabled.
            </remarks>  
        </member>
        <member name="F:Vasco.AAL2Wrap.TKernelParms.SThreshold">
            <summary>
            Signature Error Threshold.
            </summary>
            <remarks>
            <para>
            Range: From 0 to 255.<br/>
            Default Value: 0
            </para>
            Number of successive Signature errors allowed. When the specified number is reached, return code 203 is sent to caller.<br/>
            0 means this feature is disabled. 
            </remarks>
        </member>
        <member name="F:Vasco.AAL2Wrap.TKernelParms.ChkInactDays">
            <summary>
            Check Inactive Days.
            </summary>
            <remarks>
            <para>
            Range: From 0 to 1024.<br/>
            Default Value: 0
            </para>
            Acceptable number of days of user/token inactivity. Passed this number, return code 205 will be generated and DIGIPASS will have to be Reset.<br/>
            0 means this feature is disabled. 
            </remarks>
        </member>
        <member name="F:Vasco.AAL2Wrap.TKernelParms.DeriveVector">
            <summary>
            Vector used to make Data Software Encryption unique.
            </summary>
            <remarks>
            <para>
            Range: From 0x00000000 to 0x7FFFFFFF.<br/>
            Default Value: 0 
            </para>
            Vector used to make data software encryption unique for a host.
            </remarks>
        </member>
        <member name="F:Vasco.AAL2Wrap.TKernelParms.SyncWindow">
            <summary>
            Synchronisation Time Window (in hours or minutes).
            </summary>
            <remarks>
            <para>
            Range: From 1 to 512.<br/>
            Default Value: 6 hours 
            </para>
            This parameter defines The initial time synchronization window for the first verification of a DIGIPASS.<br/>
            This parameter allows the verification process to calculate the initial deviation
            between a DIGIPASS time and the VACMAN Controller GMT time.
            <para>
            IMPORTANT : This value is expressed in hours or minutes.
            </para>
            SW_UNIT_MINUTE is a bitmask indicator to determine whether the Synchronization Window is measured in Hours or in Minutes.<br/>
            The value of SyncWindow Kernel Parameter can be adjusted to use either of these units.<br/>
            SW_DISCRETE is a bitmask indicator to activate the Discrete Synchronization Time Window feature.<br/>
            <para>
            Please refer to the Authentication Server Framework Product Guide to have more information concerning the Time Management in the VACMAN  Controller.
            </para>
            </remarks>
        </member>
        <member name="F:Vasco.AAL2Wrap.TKernelParms.OnLineSG">
            <summary>
            Level of Online Signature. 
            </summary>
            <remarks>
            <para>
            Range: From 0 to 3.<br/>
            Default Value: 0 
            </para>
            Level of Online Signature. 
            <para>
            0 : Offline mode<br/>
            1 : Online mode (Recommended in most cases). Several Signatures are allowed in the same TimeStep (except identical successive ones)<br/>
            2 : Online Mode. Only one signature per TimeStep is allowed<br/>
            3 : Offline Mode. For event based Signatures, use the DeferredSignatureData parameter of the signature validation function to pass an event counter. 
            </para>
            </remarks>
        </member>
        <member name="F:Vasco.AAL2Wrap.TKernelParms.EventWindow">
            <summary>
            Event Window size in nbr of iterations.
            </summary>
            <remarks>
            <para>
            Range: From 10 to 1000.<br/>
            Default Value: 100 
            </para>
            Event Window size expressed in number of iterations represents the acceptable
            event counter difference between DIGIPASS and host.<br/>
            This parameter applies only to event based operating modes.
            </remarks>
        </member>
        <member name="F:Vasco.AAL2Wrap.TKernelParms.HSMSlotId">
            <summary>
            HSM Slot Id.
            </summary>
            <remarks>
            <para>
            Range: From 0 to 60.<br/>
            Default Value: 0 
            </para>
            HSMSlotId contains the HSM slot ID used to store the HSM StorageKey and the HSM TransportKey.<br/>
            <para>
            Note: The HSMSlotId is only used with the HSM versions of the VACMAN Controller.<br/>
            It is not used with the VACMAN Controller software version.
            </para>
            </remarks>
        </member>
        <member name="F:Vasco.AAL2Wrap.TKernelParms.StorageKeyId">
            <summary>
            StorageKeyId encrypts the sensitive DIGIPASS application BLOB data.
            </summary>
            <remarks>
            <para>
            Range: From 0 to 0x7FFFFF.<br/>
            Default Value: 0 
            </para>
            StorageKeyId contains the HSM key ID used to encrypt the sensitive DIGIPASS application BLOB data.<br/>
            <para>
            Note: The StorageKeyId is only used with the HSM versions of the VACMAN Controller.<br/>
            It is not used with the VACMAN Controller software version.<br/>
            </para>
            StorageKeyId only used if no StorageKeyName or EncryptionKeyName are provided in the HSM functions.<br/>
            </remarks>
        </member>
        <member name="F:Vasco.AAL2Wrap.TKernelParms.TransportKeyId">
            <summary>
            TransportKeyId decrypts the sensitive DIGIPASS application BLOB data.
            </summary>
            <remarks>
            <para>
            Range: From 0 to 0x7FFFFF.<br/>
            Default Value: 0x7FFFFF 
            </para>
            TransportKeyId contains the HSM key ID used to decrypt the sensitive DIGIPASS application BLOB data.<br/>
            This can be either of the following:<br/>
            - the ID of the HSM-level transport key used to encrypt the sensitive DPX data.<br/>
            - the ID of the HSM storage key used to decrypt the BLOB in case of storage key 1 to storage key 2 migration.<br/>
            <para>
            Note: The TransportKeyId is only used with the HSM versions of the VACMAN Controller.<br/>
            It is not used with the VACMAN Controller software version.<br/>
            </para>
            TransportKeyId only used if no DecryptionKeyName is provided in the HSM functions.
            </remarks>
        </member>
        <member name="F:Vasco.AAL2Wrap.TKernelParms.StorageDeriveKey1">
            <summary>
            Storage DerivationKey Part 1 used to make Data Software Encryption unique.
            </summary>
            <remarks>
            <para>
            Range: From 0x00000000 to 0xFFFFFFFF.<br/>
            Default Value: 0 
            </para>
            Storage DerivationKey Part 1 used to make data software encryption unique for a host.
            </remarks>
        </member>
        <member name="F:Vasco.AAL2Wrap.TKernelParms.StorageDeriveKey2">
            <summary>
            Storage DerivationKey Part 2 used to make Data Software Encryption unique.
            </summary>
            <remarks>
            <para>
            Range: From 0x00000000 to 0xFFFFFFFF.<br/>
            Default Value: 0 
            </para>
            Storage DerivationKey Part 2 used to make data software encryption unique for a host.
            </remarks>
        </member>
        <member name="F:Vasco.AAL2Wrap.TKernelParms.StorageDeriveKey3">
            <summary>
            Storage DerivationKey Part 3 used to make Data Software Encryption unique.
            </summary>
            <remarks>
            <para>
            Range: From 0x00000000 to 0xFFFFFFFF.<br/>
            Default Value: 0 
            </para>
            Storage DerivationKey Part 3 used to make data software encryption unique for a host.
            </remarks>
        </member>
        <member name="F:Vasco.AAL2Wrap.TKernelParms.StorageDeriveKey4">
            <summary>
            Storage DerivationKey Part 4 used to make Data Software Encryption unique.
            </summary>
            <remarks>
            <para>
            Range: From 0x00000000 to 0xFFFFFFFF.<br/>
            Default Value: 0 
            </para>
            Storage DerivationKey Part 4 used to make data software encryption unique for a host.
            </remarks>
        </member>
        <member name="T:Vasco.AAL2Wrap.TDigipassInfo">
            <summary>
            This Structure contains DIGIPASS instance information.
            </summary>
        </member>
        <member name="F:Vasco.AAL2Wrap.TDigipassInfo.TokenModel">
            <summary>
            Physical Token Type.
            </summary>
        </member>
        <member name="F:Vasco.AAL2Wrap.TDigipassInfo.UseCount">
            <summary>
            Usage Count.
            </summary>
        </member>
        <member name="F:Vasco.AAL2Wrap.TDigipassInfo.LastTimeUsed">
            <summary>
            Last Token Time Used.
            </summary>
        </member>
        <member name="F:Vasco.AAL2Wrap.TDigipassInfo.LastTimeShift">
            <summary>
            Last Token Time Shift.
            </summary>  
        </member>
        <member name="F:Vasco.AAL2Wrap.TDigipassInfo.ErrorCount">
            <summary>
            Current Error Count.
            </summary>  
        </member>
        <member name="F:Vasco.AAL2Wrap.TDigipassInfo.CodeWord">
            <summary>
            Binary Codeword.
            </summary>  
        </member>
        <member name="F:Vasco.AAL2Wrap.TDigipassInfo.TripleDes">
            <summary>
            Triple DES Used.
            </summary>  
        </member>
        <member name="F:Vasco.AAL2Wrap.TDigipassInfo.MaxInputFields">
            <summary>
            Challenge/Data Fields nbr.
            </summary>  
        </member>
        <member name="F:Vasco.AAL2Wrap.TDigipassInfo.ResponseLength">
            <summary>
            Response Length.
            </summary>  
        </member>
        <member name="F:Vasco.AAL2Wrap.TDigipassInfo.ResponseType">
            <summary>
            Output Type.
            </summary>  
        </member>
        <member name="F:Vasco.AAL2Wrap.TDigipassInfo.ResponseChecksum">
            <summary>
            Checksum Requested Flag.
            </summary>  
        </member>
        <member name="F:Vasco.AAL2Wrap.TDigipassInfo.TimeStepUsed">
            <summary>
            Time step used if any.
            </summary>  
        </member>
        <member name="T:Vasco.AAL2Wrap.TDigipassInfoEx">
            <summary>
            This Structure contains DIGIPASS instance information extended.
            </summary>
        </member>
        <member name="F:Vasco.AAL2Wrap.TDigipassInfoEx.TokenModel">
            <summary>
            Physical Token Type.
            </summary>
        </member>
        <member name="F:Vasco.AAL2Wrap.TDigipassInfoEx.UseCount">
            <summary>
            Usage Count.
            </summary>
        </member>
        <member name="F:Vasco.AAL2Wrap.TDigipassInfoEx.LastTimeUsed">
            <summary>
            Last Token Time Used.
            </summary>
        </member>
        <member name="F:Vasco.AAL2Wrap.TDigipassInfoEx.LastTimeShift">
            <summary>
            Last Token Time Shift.
            </summary>  
        </member>
        <member name="F:Vasco.AAL2Wrap.TDigipassInfoEx.TimeBasedAlgo">
            <summary>
            If Time Based Algorithm used.
            </summary>  
        </member>
        <member name="F:Vasco.AAL2Wrap.TDigipassInfoEx.EventBaseAlgo">
            <summary>
            If Event Based Algorithm used.
            </summary>  
        </member>
        <member name="F:Vasco.AAL2Wrap.TDigipassInfoEx.PinSupported">
            <summary>
            If Pin Supported.
            </summary>  
        </member>
        <member name="F:Vasco.AAL2Wrap.TDigipassInfoEx.UnlockSupported">
            <summary>
            If Unlock Supported.
            </summary>  
        </member>
        <member name="F:Vasco.AAL2Wrap.TDigipassInfoEx.PinChangedOn">
            <summary>
            If  Pin Changed set.
            </summary>  
        </member>
        <member name="F:Vasco.AAL2Wrap.TDigipassInfoEx.PinLength">
            <summary>
            PIN Length.
            </summary>  
        </member>
        <member name="F:Vasco.AAL2Wrap.TDigipassInfoEx.PinMinLen">
            <summary>
            PIN minimum Length.
            </summary>  
        </member>
        <member name="F:Vasco.AAL2Wrap.TDigipassInfoEx.PinEnable">
            <summary>
            If PIN is enable or Not.
            </summary>  
        </member>
        <member name="F:Vasco.AAL2Wrap.TDigipassInfoEx.PinChForced">
            <summary>
            To indicate that the has to be changed at the next logon.
            </summary>  
        </member>
        <member name="F:Vasco.AAL2Wrap.TDigipassInfoEx.PrimTokenEnable">
            <summary>
            If Primary token is enable or not.
            </summary>  
        </member>
        <member name="F:Vasco.AAL2Wrap.TDigipassInfoEx.VirtualTokenSup">
            <summary>
            If Virtual token is supported or not.
            </summary>  
        </member>
        <member name="F:Vasco.AAL2Wrap.TDigipassInfoEx.VirtualTokenEnable">
            <summary>
            If Virtual token support or not.
            </summary>  
        </member>
        <member name="F:Vasco.AAL2Wrap.TDigipassInfoEx.VirtualTokenType">
            <summary>
            Virtual Token type.
            </summary>  
        </member>
        <member name="F:Vasco.AAL2Wrap.TDigipassInfoEx.VirtualTokenGracePeriod">
            <summary>
            Virtual Token grace periode expiration date.
            </summary>  
        </member>
        <member name="F:Vasco.AAL2Wrap.TDigipassInfoEx.VirtualTokenRemUse">
            <summary>
            Virtual token remaining uses.
            </summary>  
        </member>
        <member name="F:Vasco.AAL2Wrap.TDigipassInfoEx.LastResponseType">
            <summary>
            last valid response type.
            </summary>  
        </member>
        <member name="F:Vasco.AAL2Wrap.TDigipassInfoEx.EventValue">
            <summary>
            Current Event(for event time based) value stored in the DIGIPASS application BLOB.
            </summary>  
        </member>
        <member name="F:Vasco.AAL2Wrap.TDigipassInfoEx.lastEventValue">
            <summary>
            Event Value from the last valid verification (for event time based).
            </summary>  
        </member>
        <member name="F:Vasco.AAL2Wrap.TDigipassInfoEx.SyncWindow">
            <summary>
            Indicates whether or not the Initial Synchronization Window .
            </summary>  
        </member>
        <member name="F:Vasco.AAL2Wrap.TDigipassInfoEx.ErrorCount">
            <summary>
            Error Count.
            </summary>  
        </member>
        <member name="F:Vasco.AAL2Wrap.TDigipassInfoEx.IMKLabel">
            <summary>
            Issuer Master Key Label
            </summary>
        </member>
        <member name="F:Vasco.AAL2Wrap.TDigipassInfoEx.KCVType">
            <summary>
            KCV Type
            </summary>
        </member>
        <member name="F:Vasco.AAL2Wrap.TDigipassInfoEx.KCVValue">
            <summary>
            KCV Value
            </summary>
        </member>
        <member name="T:Vasco.AAL2Wrap.TTLVItemEx">
            <summary>
            This Structure is used with VACMAN Controller for CTVS.
            </summary>
        </member>
        <member name="F:Vasco.AAL2Wrap.TTLVItemEx.Tag">
            <summary>
            TLV Item Tag.
            </summary>
        </member>
        <member name="F:Vasco.AAL2Wrap.TTLVItemEx.Size">
            <summary>
            TLV Item Size.
            </summary>
        </member>
        <member name="F:Vasco.AAL2Wrap.TTLVItemEx.Format">
            <summary>
            TLV Item Format.
            </summary>
        </member>
        <member name="F:Vasco.AAL2Wrap.TTLVItemEx.Mandatory">
            <summary>
            TLV Item - Mandatory or not.
            </summary>
        </member>
        <member name="F:Vasco.AAL2Wrap.TTLVItemEx.Found">
            <summary>
            TLV Item - Found or not.
            </summary>
        </member>
        <member name="F:Vasco.AAL2Wrap.TTLVItemEx.iMinLen">
            <summary>
            TLV Item Min Length.
            </summary>
        </member>
        <member name="F:Vasco.AAL2Wrap.TTLVItemEx.iMaxLen">
            <summary>
            TLV Item Max Length.
            </summary>
        </member>
        <member name="F:Vasco.AAL2Wrap.TTLVItemEx.Value">
            <summary>
            TLV Item Value.
            </summary>
        </member>
        <member name="T:Vasco.AAL2Wrap.TTLVItem">
            <summary>
            This Structure is used with VACMAN Controller for CTVS.
            </summary>
        </member>
        <member name="F:Vasco.AAL2Wrap.TTLVItem.Tag">
            <summary>
            TLV Item Tag.
            </summary>
        </member>
        <member name="F:Vasco.AAL2Wrap.TTLVItem.Size">
            <summary>
            TLV Item Size.
            </summary>
        </member>
        <member name="F:Vasco.AAL2Wrap.TTLVItem.Value">
            <summary>
            TLV Item Value.
            </summary>
        </member>
        <member name="T:Vasco.TLVConst">
            <summary>
            TLV Constants.
            </summary>
            <remarks>
            <para>
            This class is used to encapsulate the definitions of the constants for the EMV-CAP process.
            </para>
            </remarks>
        </member>
        <member name="F:Vasco.TLVConst.IT_AID">
            <summary>
            Application Identifier
            </summary>
        </member>
        <member name="F:Vasco.TLVConst.IT_AIP">
            <summary>
            Appl'n Interch Profile
            </summary>
        </member>
        <member name="F:Vasco.TLVConst.IT_ATC">
            <summary>
            Appl'n Transaction Ctr
            </summary>
        </member>
        <member name="F:Vasco.TLVConst.IT_IAD">
            <summary>
            Issuer Application Data
            </summary>
        </member>
        <member name="F:Vasco.TLVConst.IT_CID">
            <summary>
            Cryptogram Info Data
            </summary>
        </member>
        <member name="F:Vasco.TLVConst.IT_PAN">
            <summary>
            Appl'n Primary Acct No
            </summary>
        </member>
        <member name="F:Vasco.TLVConst.IT_PAN_SEQ">
            <summary>
            Application PAN Sequence Number
            </summary>
        </member>
        <member name="F:Vasco.TLVConst.IT_IIPB">
            <summary>
            Issuer Internet Proprietary Bitmap
            </summary>
        </member>
        <member name="F:Vasco.TLVConst.IT_CDOL1">
            <summary>
            Card Risk Management Data Object List
            </summary>
        </member>
        <member name="F:Vasco.TLVConst.IT_IAF">
            <summary>
            Issuer Authentication Flag
            </summary>
        </member>
        <member name="T:Vasco.AuthParms">
            <summary>
            CHAP and Microsoft Response Authentication class
            </summary>
            <remarks>
            <para>
            This class is used by <see cref="T:Vasco.AAL2Wrap"/> during the AAL2VerifyWIN validation process.
            It allows providing all authentication parameters needed to validate an authentication response based
            on a DIGIPASS® dynamic password, and retrieving validation hashes and responses calculated by the 
            VACMAN® Controller library. 
            </para>
            <para>
            Authentication responses must be compliant with LANMAM, NTLM, CHAP or MSCHAP protocol.
            </para>
            <para>
            version VACMAN Controller 3.21.0
            </para>
            </remarks>
        </member>
        <member name="M:Vasco.AuthParms.#ctor">
            <summary>
            Class Contructor.
            </summary>
        </member>
        <member name="M:Vasco.AuthParms.#ctor(Vasco.AuthParms)">
            <summary>
            Class Contructor.
            </summary>
        </member>
        <member name="M:Vasco.AuthParms.Reset">
            <summary>
            Reset authentication parameters.
            </summary>
        </member>
        <member name="M:Vasco.AuthParms.SetLANMANAuthent(System.Byte[],System.Byte[])">
            <summary>
            Set authentication parameters required for LANMAN response validation.
            </summary>
            <param name="AuthentChallenge"> The 8-byte challenge generated by the server</param>
            <param name="LMResponse"> The 24-byte LM response to the server challenge</param>
            <seealso cref="M:Vasco.AuthParms.GetLMHash"/> 
            <seealso cref="M:Vasco.AAL2Wrap.AAL2VerifyWIN(System.Byte[],System.String,Vasco.AuthParms@)"/> 
        </member>
        <member name="M:Vasco.AuthParms.SetNTLMAuthent(System.Byte[],System.Byte[])">
            <summary>
            Set authentication parameters required for NTLMv1 response validation.
            </summary>
            <param name="AuthentChallenge"> The 8-byte challenge generated by the server</param>
            <param name="NTResponse"> The 24-byte NTLMv1 response to the server challenge</param>
            <seealso cref="M:Vasco.AuthParms.GetNTHash"/> 
            <seealso cref="M:Vasco.AAL2Wrap.AAL2VerifyWIN(System.Byte[],System.String,Vasco.AuthParms@)"/> 
        </member>
        <member name="M:Vasco.AuthParms.SetNTLMv2Authent(System.Byte[],System.Byte[],System.Byte[],System.Byte[])">
            <summary>
            Set authentication parameters required for NTLMv2 response validation.
            </summary>
            <param name="UserName"> The name of the user to be authenticated (up to 512-byte)</param>
            <param name="DomainName"> The domain or computer name hosting the user account (up to 512-byte)</param>
            <param name="AuthentChallenge"> The 8-byte challenge generated by the server</param>
            <param name="NTResponse"> The 24-byte NTLMv2 response to the server challenge</param>
            <seealso cref="M:Vasco.AuthParms.GetNTHash"/> 
            <seealso cref="M:Vasco.AAL2Wrap.AAL2VerifyWIN(System.Byte[],System.String,Vasco.AuthParms@)"/> 
        </member>
        <member name="M:Vasco.AuthParms.SetMSCHAPv2Authent(System.Byte[],System.Byte[],System.Byte[],System.Byte[])">
            <summary>
            Set authentication parameters required for MSCHAPv2 response validation.
            </summary>
            <param name="UserName"> The name of the user to be authenticated (up to 255-byte)</param>
            <param name="AuthentChallenge"> The 16-byte challenge generated by the server</param>
            <param name="PeerChallenge"> The 16-byte challenge generated by the client</param>
            <param name="MSCHAP2Response"> The 24-byte MSCHAPv2 response to the server challenge</param>
            <seealso cref="M:Vasco.AuthParms.GetMSCHAP2AuthentResponse"/> 
            <seealso cref="M:Vasco.AAL2Wrap.AAL2VerifyWIN(System.Byte[],System.String,Vasco.AuthParms@)"/> 
        </member>
        <member name="M:Vasco.AuthParms.SetCHAPAuthent(System.Byte,System.Byte[],System.Byte[])">
            <summary>
            Set authentication parameters required for CHAP response validation.
            </summary>
            <param name="CHAPIdentifier"> The CHAP identifier used for the handshake sequence</param>
            <param name="AuthentChallenge"> The challenge generated by the server (up to 255-byte)</param>
            <param name="CHAPResponse"> The 16-byte CHAP response to the server challenge</param>
            <seealso cref="M:Vasco.AAL2Wrap.AAL2VerifyWIN(System.Byte[],System.String,Vasco.AuthParms@)"/> 
        </member>
        <member name="M:Vasco.AuthParms.GetLMHash">
            <summary> 
            Get LANMAM password hash calculated by VACMAN Controller. 
            </summary>
            <remarks>
            The LANMAN hash is available after a successfull LANMAM response validation.
            This hash is based on the DIGIPASS dynamic password use to forge the response.
            </remarks>
            <returns>return the LANMAN hash byte array or null</returns>
            <seealso cref="M:Vasco.AuthParms.SetLANMANAuthent(System.Byte[],System.Byte[])"/> 
        </member>
        <member name="M:Vasco.AuthParms.GetNTHash">
            <summary> 
            Get NTLM password hash calculated by VACMAN Controller. 
            </summary>
            <remarks>
            The NTLM hash is available after a successfull NTLMv1, NTLMv2 or MSCHAPv2 response validation.
            This hash is based on the DIGIPASS dynamic password use to forge the response.
            </remarks>
            <returns>return the NTLM hash byte array or null</returns>
            <seealso cref="M:Vasco.AuthParms.SetNTLMAuthent(System.Byte[],System.Byte[])"/> 
            <seealso cref="M:Vasco.AuthParms.SetNTLMv2Authent(System.Byte[],System.Byte[],System.Byte[],System.Byte[])"/> 
            <seealso cref="M:Vasco.AuthParms.SetMSCHAPv2Authent(System.Byte[],System.Byte[],System.Byte[],System.Byte[])"/> 
        </member>
        <member name="M:Vasco.AuthParms.GetMSCHAP2AuthentResponse">
            <summary> 
            Get the MSCHAPv2 authenticator response to the client authentication message. 
            </summary>
            <remarks>
            The MSCHAPv2 authenticator response is available after a successfull MSCHAPv2 response validation
            </remarks>
            <returns>return the authenticator response string or null</returns>
            <seealso cref="M:Vasco.AuthParms.SetMSCHAPv2Authent(System.Byte[],System.Byte[],System.Byte[],System.Byte[])"/> 
        </member>
        <member name="T:Vasco.Key">
            <summary>
            This class is used by <see cref="T:Vasco.AAL2Wrap"/> during EMV-CAP process.
            </summary>
            <seealso cref="M:Vasco.AAL2Wrap.AAL2GenEMVBlobEx(System.Byte[],System.UInt32,System.UInt32,Vasco.Key,System.String)"/> 
            <para>
            version VACMAN Controller 3.21.0
            </para>
        </member>
        <member name="M:Vasco.Key.#ctor(System.Byte[],System.Boolean)">
            <summary>
            Constructor for a Software Master Key object.
            </summary>
            <param name="KeyData">the master key bytes (byte[16]).</param>
            <param name="isIMK"> the master key type 
            <list type="bullet">
            <item><B>true</B> : the key is an Issuer Master Key.</item>
            <item><B>false</B> : the key is an Smart Card Master Key.</item>
            </list>
            </param>
        </member>
        <member name="M:Vasco.Key.#ctor(System.Byte[],System.Byte)">
            <summary>
            Constructor for a Software Master Key object.
            </summary>
            <param name="KeyData">the master key bytes (byte[16]).</param>
            <param name="KType">the key type byte</param>
        </member>
        <member name="M:Vasco.Key.#ctor(System.String,System.Boolean,System.Byte[],System.Byte)">
            <summary>
            Constructor for an Hardware Master Key object.
            </summary>
            <param name="KeyLabel">the master key name.</param>
            <param name="isIMK">the master key type 
            <list type="bullet">
             <item><B>true</B> : the key is an Issuer Master Key.</item>
             <item><B>false</B> : the key is an Smart Card Master Key.</item></list></param>
            <param name="KeyKCV">the Key Check Value (3 bytes).</param>
            <param name="KCVType">the KCV Type :
            <list type="bullet">
            <item><B>0</B> : KCV not used.</item>
            <item><B>1</B> : KCV of the Issuer Master Key.</item>
            <item><B>2</B> : KCV of the Smart Card Master Key.</item>
            </list>></param>
        </member>
        <member name="M:Vasco.Key.#ctor(System.Byte,System.Boolean,System.Byte[],System.Byte)">
            <summary>
            Constructor for an Hardware Master Key object.
            </summary>
            <param name="KeyIndex">the master key index.</param>
            <param name="isIMK">the master key type
            <list type="bullet">
            <item><B>true</B> : the key is an Issuer Master Key.</item>
            <item><B>false</B> : the key is an Smart Card Master Key.</item></list></param>
            <param name="KeyKCV">the Key Check Value (3 bytes).</param>
            <param name="KCVType">the KCV Type :
            <list type="bullet">
             <item><B>0</B> : KCV not used.</item>
             <item><B>1</B> : KCV of the Issuer Master Key.</item>
             <item><B>2</B> : KCV of the Smart Card Master Key.</item></list></param>
        </member>
        <member name="M:Vasco.Key.#ctor(System.String,System.Byte,System.Byte[],System.Byte)">
            <summary>
            Constructor for an Hardware Master Key object.
            </summary>
            <param name="KeyLabel">the master key name.</param>
            <param name="KType">the key type byte.</param>
            <param name="KeyKCV">the Key Check Value (3 bytes).</param>
            <param name="KCVType">the KCV Type :
            <list type="bullet">
            <item><B>0</B> : KCV not used.</item>
            <item><B>1</B> : KCV of the Issuer Master Key.</item>
            <item><B>2</B> : KCV of the Smart Card Master Key.</item></list></param>
        </member>
        <member name="M:Vasco.Key.#ctor(System.Byte,System.Byte,System.Byte[],System.Byte)">
            <summary>
            Constructor for an Hardware Master Key object.
            </summary>
            <param name="KeyIndex">the master key index.</param>
            <param name="KType">the key type byte.</param>
            <param name="KeyKCV">the Key Check Value (3 bytes).</param>
            <param name="KCVType">the KCV Type :
            <list type="bullet">
            <item><B>0</B> : KCV not used.</item>
            <item><B>1</B> : KCV of the Issuer Master Key.</item>
            <item><B>2</B> : KCV of the Smart Card Master Key.</item></list></param>
        </member>
        <member name="M:Vasco.Key.getKeyType">
            <summary>
            Returns the key type byte.
            </summary>
            <returns>the key type byte</returns>
        </member>
        <member name="M:Vasco.Key.getKeyData">
            <summary>
            eturns the raw key bytes.
            </summary>
            <returns>the raw key bytes (byte[16]) or <i>null</i>.</returns>
        </member>
        <member name="M:Vasco.Key.getKeyLabel">
            <summary>
            Returns the Key Reference Label.
            </summary>
            <returns>the key reference label or <i>null</i>.</returns>
        </member>
        <member name="M:Vasco.Key.getKeyIndex">
            <summary>
            Returns the Key Reference Index.
            </summary>
            <returns>the key reference Index or <i>0</i>.</returns>
        </member>
        <member name="M:Vasco.Key.getKeyKCV">
            <summary>
            Returns the raw KCV bytes.
            </summary>
            <returns>the raw KCV bytes (byte[3]) or <i>null</i>.</returns>
        </member>
        <member name="M:Vasco.Key.getKCVType">
            <summary>
            Returns the KCV Type.
            </summary>
            <returns>the KCV Type or <i>0</i>:
            <list type="bullet">
            <item><B>0</B> : KCV not used.</item>
            <item><B>1</B> : KCV of the Issuer Master Key.</item>
            <item><B>2</B> : KCV of the Smart Card Master Key.</item></list></returns>
        </member>
        <member name="T:Vasco.Response.RespDPXGetTokenBlobsEx">
            <summary>
            This object is used to get all needed information and  when a DIGIPASS instance is generated from a DPX file during Import service
            </summary>
        </member>
        <member name="M:Vasco.Response.RespDPXGetTokenBlobsEx.getTokenType">
            <summary>
            Returns the physical device type of the DIGIPASS. 
            It may be used for information purposes, or to determine which flashing pattern protocol to 
            use in order to send data through the device's optical interface, if any.
            <p>
            Possible values:
            sAKII, AUTCD, DP100, DP300, DP500, DP600, DP700,
            </p>
            </summary>
            <returns>TokenType</returns>
        </member>
        <member name="M:Vasco.Response.RespDPXGetTokenBlobsEx.getApplCount">
            <summary>
            Returns the number of DIGIPASS applications found for the DIGIPASS.
            </summary>
            <returns>ApplCount</returns>
        </member>
        <member name="M:Vasco.Response.RespDPXGetTokenBlobsEx.getSerial">
            <summary>
            Returns a string of device serial number of a DIGIPASS.
            </summary>
            <returns>Serial</returns>
        </member>
        <member name="M:Vasco.Response.RespDPXGetTokenBlobsEx.getSerialAppl">
            <summary>
            Returns a string array of Serial Application.
            <p>
            Each is composed of the 10-digit DIGIPASS device serial number concatenated 
            with its 12-digit application name. Each array entry represents the logical instance 
            of a DIGIPASS cryptographic application with its unique secrets and parameters.
            </p>
            </summary>
            <returns>SerialApplArray</returns>
        </member>
        <member name="M:Vasco.Response.RespDPXGetTokenBlobsEx.getAuthMode">
            <summary>
            Returns a string array of  Authentication Mode
            Defines each returned DIGIPASS application authentication mode.
            <ul>
            <li><b>RO</b>: Response Only </li>
            <li><b>CR</b>: Challenge/Response </li>
            <li><b>SG</b>: Signature </li>
            <li><b>MM</b>: Multi-Mode </li>
            <li><b>UL</b>: Unlock V2 dedicated application </li>
            <li><b>MA</b>: Master Activation Application </li>
            </ul>
            <b> Note that signature mode devices may also be used for challenge/response authentication if they are programmed to accept a single input data field.</b>
            </summary>
            <returns>AuthModeArray</returns>
        </member>
        <member name="M:Vasco.Response.RespDPXGetTokenBlobsEx.getDpData">
            <summary>
            Returns all DIGIPASS application BLOBs as an array of Strings.
            </summary>
            <returns>String DpData table. <b>Once read, these BLOBs must be written to the application database.</b></returns>
        </member>
        <member name="M:Vasco.Response.RespDPXGetTokenBlobsEx.getbDpData">
            <summary>
            Returns all DIGIPASS application BLOBs as an array of Strings.
            </summary>
            <returns>bDpData table. <b>Once read, these BLOBs must be written to the application database.</b></returns>
        </member>
        <member name="M:Vasco.Response.RespDPXGetTokenBlobsEx.getActivationVector">
            <summary>
            Returns 76 characters string, Activation Vector.
            <p>
            The Activation Vector corresponds to the Master Activation application returned. 
            </p>
            <p>
            Will return empty string in case of DIGIPASS not containing a Master Activation application <b>MA</b>.
            </p>
            </summary>
            <returns>ActivationVector</returns>
        </member>
        <member name="M:Vasco.Response.RespDPXGetTokenBlobsEx.getPKBlob">
            <summary>
            Returns 88 characters string the Payload Key Blob.
            </summary>
            <p>
            This is the generated Payload Key BLOB for a DIGIPASS serial number license.
            </p>
            <p>
            Will return empty string in case of DPX not containing a Payload Key. <b>Upon return from the function call, this BLOB must be written to the application database.</b>.
            </p>
            <returns>PKeyBlob</returns>
        </member>
        <member name="M:Vasco.Response.RespDPXGetTokenBlobsEx.getSeqNumThreshold">
            <summary>
            Returns the Sequence Number Threshold of the Master Activation application returned (from 1 to 99).
            <p>
            The returned value is 0 in case of DIGIPASS not containing a Master Activation application <b>MA</b>.
            </p>
            </summary>
            <returns>SeqNumThreshold</returns>
        </member>
        <member name="T:Vasco.Response.RespGenMessageActivation2">
            <summary>
            This object is used  to get information and data when an Activation2 Message and DIGIPASS instances are generated during Multi-Device Activation service
            </summary>
        </member>
        <member name="M:Vasco.Response.RespGenMessageActivation2.getTokenType">
            <summary>
            Returns the DIGIPASS type name given to the DIGIPASS instance.
            Will return a DIGIPASS type of the form <b>"TYPxx"</b> with xx equal 
            the Device Type coded on 2 decimal digits e.g: <b>"TYP07"</b>.
            </summary>
            <returns>TokenType</returns>
        </member>
        <member name="M:Vasco.Response.RespGenMessageActivation2.getApplCount">
            <summary>
            Returns the number of applications found
            </summary>
            <returns>ApplCount</returns>
        </member>
        <member name="M:Vasco.Response.RespGenMessageActivation2.getSerialAppl">
            <summary>
            Returns a string array of Serial Application.
            <p>
            Each is composed of the 10 characters license serial number concatenated with 12 characters application name.
            Each array entry represents the logical instance of a DIGIPASS cryptographic application with its unique secrets and parameters.
            </p>
            <p>
            The application name part will end with the sequence number coded on 2 decimal digits e.g: <b>"APPL1     03"</b>.
            </p>
            </summary>
            <returns>SerialApplArray</returns>
        </member>
        <member name="M:Vasco.Response.RespGenMessageActivation2.getAuthMode">
            <summary>
            Returns an array of  Authentication Mode.
            <p>
            Defines each returned DIGIPASS application authentication mode.
            <ul>
            <li><b>RO</b>: Response Only </li>
            <li><b>CR</b>: Challenge/Response </li>
            <li><b>SG</b>: Signature </li> 
            <li><b>MM</b>: Multi-Mode </li>
            <li><b>UL</b>: Unlock V2 dedicated application </li>
            </ul> 
            <b> Note that signature mode devices may also be used for challenge/response authentication if they are programmed to accept a single input data field.</b>
            </p>
            </summary>
            <returns>AuthModeArray</returns>
        </member>
        <member name="M:Vasco.Response.RespGenMessageActivation2.getDpData">
            <summary>
            Returns all DIGIPASS application BLOBs of the DIGIPASS instance as an array of Strings.
            </summary>
            <returns>String DPData table. <b>Once read, these BLOBs must be written to the application database.</b></returns>
        </member>
        <member name="M:Vasco.Response.RespGenMessageActivation2.getbDpData">
            <summary>
            Returns all DIGIPASS application BLOB of the DIGIPASS instance  as an array of byte array.
            </summary>
            <returns>bDpData table. <b>Once read, these BLOBs must be written to the application database.</b></returns>
        </member>
        <member name="M:Vasco.Response.RespGenMessageActivation2.getActivation2Message">
            <summary>
            Returns up to 124 hexadecimal characters string, the Activation2 Message necessary during the activation process to provision the DIGIPASS Keys
            and the Payload Key into the DIGIPASS device
            </summary>
            <returns>Activation2Message</returns>
        </member>
        <member name="M:Vasco.Response.RespGenMessageActivation2.getSeqNum">
            <summary>
            Returns the Sequence Number of the DIGIPASS instance generated (from 1 to 99)
            </summary>
            <returns>SeqNum</returns>
        </member>
        <member name="T:Vasco.Response.RespGetLibraryVersion">
            <summary>
            This object is used to get version and bitness of C native library.
            </summary>
        </member>
        <member name="M:Vasco.Response.RespGetLibraryVersion.getLibraryVersion">
            <summary>
            Returns the Library Version of the VACMAN  Controller Native C Library.
            </summary>
            Will return a string with the form "w.x.y.z" : 
            w, x, y and z are positive decimal values between 0 and 255.
            <returns>LibraryBitness</returns>
        </member>
        <member name="M:Vasco.Response.RespGetLibraryVersion.getLibraryBitness">
            <summary>
            Returns the Bitness of the VACMAN Controller Native C Library.
            </summary>
            Value can be <b>32</b> or <b>64</b> 
            <returns>LibraryBitness</returns>
        </member>
        <member name="M:Vasco.Response.RespGetLibraryVersion.getLibraryType">
            <summary>
            Returns the type of the VACMAN Controller Native C Library.
            </summary>
            Possible values:
            <ul>
            <li><b>SSM</b>: VACMAN Controller Software  </li>
            <li><b>HSM</b>: VACMAN Controller for HSM Safenet or nCipher  </li>
            <li><b>ICSF</b>: VACMAN Controller for zOS ICSF  </li>
            </ul>
            <returns>LibraryType</returns>
        </member>
        <member name="T:Vasco.Response.RespGetMessageProperties">
            <summary>
             This object is used to get Properties on a Secure Channel Message.
            </summary>
        </member>
        <member name="M:Vasco.Response.RespGetMessageProperties.getMessageProtocolVersion">
            <summary>
            Returns the message protocol version
            </summary>
            <returns>MessageProtocolVersion</returns>
        </member>
        <member name="M:Vasco.Response.RespGetMessageProperties.getMessageType">
            <summary>
            Returns the type of the message:
            </summary>
            Possible message type values:
            <ul>
            <li><b>0x3</b>: request message </li>
            <li><b>0x23</b>: response message </li>
            <li><b>0x3F</b>: response error message </li>
            <li><b>0x24</b>: information message </li>
            </ul>
            <returns>MessageType</returns>
        </member>
        <member name="M:Vasco.Response.RespGetMessageProperties.getMessageProtectionType">
            <summary>
            Returns the protection type of the message:
            </summary>
            Possible protection type values:
            <ul>
            <li><b>0x00</b>: Unprotected (neither encrypted or signed) </li>
            <li><b>0x01</b>: Encrypted (AES-CTR 128 bits) and Signed (HMAC-SHA256) </li>
            <li><b>0x11</b>: Signed (HMAC-SHA256) </li>
            </ul>
            <returns>MessageProtectionType</returns>
        </member>
        <member name="M:Vasco.Response.RespGetMessageProperties.getIsMessageEncrypted">
            <summary>
            Returns if the message is encrypted or not:
            </summary>
            Possible values are:
            <ul>
            <li><b>0</b>: not encrypted </li>
            <li><b>1</b>: encrypted </li>
            </ul>
            <returns>IsMessageEncrypted</returns>
        </member>
        <member name="M:Vasco.Response.RespGetMessageProperties.getIsMessageSigned">
            <summary>
            Returns if the message is signed or not:
            </summary>
            Possible values are:
            <ul>
            <li><b>0</b>: not signed </li>
            <li><b>1</b>: signed </li>
            </ul>
            <returns>IsMessageSigned</returns>
        </member>
        <member name="M:Vasco.Response.RespGetMessageProperties.getMessageSerial">
            <summary>
            Returns string of 10 characters containing the serial number referenced into the message.
            </summary>
            <returns>MessageSerial</returns>
        </member>
        <member name="T:Vasco.Response.RespVerifyDeviceCode">
            <summary>
             This object is used to get all needed information and  when a Device Code verification is performed during Multi-Device Activation Service.
            </summary>
        </member>
        <member name="M:Vasco.Response.RespVerifyDeviceCode.getDeviceID">
            <summary>
            Returns the Device ID (8 hexadecimal characters)
            </summary>
            <returns>DeviceID</returns>
        </member>
        <member name="M:Vasco.Response.RespVerifyDeviceCode.getDeviceType">
            <summary>
            Returns the Device Type of the DIGIPASS device in case of success (from 0 to 31).
            </summary>
            <b>List of Device Type values an Definition:</b>
            <ul>
            <li><b>0</b>: Hardware device </li>
            <li><b>1</b>: Unknown software platform </li>
            <li><b>3</b>: iOS </li>
            <li><b>5</b>: Jailbroken iOS </li>
            <li><b>7</b>: Android </li>
            <li><b>9</b>: Rooted Android </li>
            <li><b>11</b>: Windows Phone </li>
            <li><b>13</b>: Blackberry Native </li>
            <li><b>15</b>: MIDP2 Platform or BB java </li>
            <li><b>17</b>: Windows </li>
            <li><b>19</b>: Linux </li>
            <li><b>21</b>: Mac </li>
            <li><b>Other</b>: RFU </li>
            </ul>
            <returns>DeviceType</returns>
        </member>
    </members>
</doc>
